
package org.mule.modules.wikipedia.adapters;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Generated;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpMethod;
import org.apache.commons.httpclient.HttpVersion;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.cookie.CookiePolicy;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.util.URIUtil;
import org.apache.commons.lang.StringUtils;
import org.mule.api.MuleContext;
import org.mule.api.MuleMessage;
import org.mule.api.context.MuleContextAware;
import org.mule.api.lifecycle.Disposable;
import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.api.registry.RegistrationException;
import org.mule.api.registry.ResolverException;
import org.mule.api.registry.TransformerResolver;
import org.mule.api.transformer.DataType;
import org.mule.api.transformer.Transformer;
import org.mule.api.transformer.TransformerException;
import org.mule.modules.wikipedia.WikiPediaConnector;
import org.mule.modules.wikipedia.strategy.ConnectorConnectionStrategy;
import org.mule.registry.TypeBasedTransformerResolver;
import org.mule.transformer.simple.ObjectToString;
import org.mule.transformer.types.DataTypeFactory;
import org.mule.transport.http.HttpMuleMessageFactory;

@Generated(value = "Mule DevKit Version 3.6.0", date = "2015-04-30T10:58:05+10:00", comments = "Build UNNAMED.2363.ef5c8a7")
public class WikiPediaConnectorRestClientAdapter
    extends WikiPediaConnectorProcessAdapter
    implements MuleContextAware, Disposable, Initialisable
{

    private int responseTimeout;
    private MuleContext muleContext;
    private volatile HttpClient httpClient;
    private HttpMuleMessageFactory httpMuleMessageFactory;

    private MuleMessage getMuleMessage(HttpMethod method, String encoding) {
        try {
            MuleMessage muleMessage = httpMuleMessageFactory.create(method, encoding);
            muleMessage.getPayloadAsString();
            return muleMessage;
        } catch (Exception e) {
            throw new RuntimeException("Couldn't transform http response to MuleMessage", e);
        }
    }

    public void setMuleContext(MuleContext context) {
        muleContext = context;
        httpMuleMessageFactory = new HttpMuleMessageFactory(muleContext);
    }

    private Transformer getPayloadTransformer(DataType inputDataType, DataType outputDataType) {
        try {
            TransformerResolver typeBasedResolver = muleContext.getRegistry().lookupObject(TypeBasedTransformerResolver.class);
            Transformer typeResolverTransformer = typeBasedResolver.resolve(inputDataType, outputDataType);
            if ((typeResolverTransformer == null)||(typeResolverTransformer instanceof ObjectToString)) {
                Transformer transformer = muleContext.getRegistry().lookupTransformer(inputDataType, outputDataType);
                if (transformer!= null) {
                    return transformer;
                }
            }
            return typeResolverTransformer;
        } catch (ResolverException rese) {
            throw new RuntimeException(rese.getMessage(), rese);
        } catch (RegistrationException re) {
            throw new RuntimeException(re.getMessage(), re);
        } catch (TransformerException te) {
            throw new RuntimeException(te.getMessage(), te);
        }
    }

    @Override
    public void initialise()
        throws InitialisationException
    {
        httpClient = new HttpClient();
        httpClient.getParams().setParameter("http.protocol.version", HttpVersion.HTTP_1_1);
        httpClient.getParams().setParameter("http.socket.timeout", responseTimeout);
        httpClient.getParams().setParameter("http.protocol.content-charset", "UTF-8");
        httpClient.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);
    }

    /**
     * Sets responseTimeout
     * 
     * @param value Value to set
     */
    public void setResponseTimeout(int value) {
        this.responseTimeout = value;
    }

    public String query(String format, String prop, String list, String meta, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("query", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named query", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropCategories(String format, String list, String meta, String clprop, String clshow, String cllimit, String clcontinue, String clcategories, String cldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=categories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((clprop!= null)&&(!StringUtils.isEmpty(String.valueOf(clprop)))) {
            queryString.append("&").append("clprop").append("=").append(String.valueOf(clprop));
        }
        if ((clshow!= null)&&(!StringUtils.isEmpty(String.valueOf(clshow)))) {
            queryString.append("&").append("clshow").append("=").append(String.valueOf(clshow));
        }
        if ((cllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(cllimit)))) {
            queryString.append("&").append("cllimit").append("=").append(String.valueOf(cllimit));
        }
        if ((clcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(clcontinue)))) {
            queryString.append("&").append("clcontinue").append("=").append(String.valueOf(clcontinue));
        }
        if ((clcategories!= null)&&(!StringUtils.isEmpty(String.valueOf(clcategories)))) {
            queryString.append("&").append("clcategories").append("=").append(String.valueOf(clcategories));
        }
        if ((cldir!= null)&&(!StringUtils.isEmpty(String.valueOf(cldir)))) {
            queryString.append("&").append("cldir").append("=").append(String.valueOf(cldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropCategoryInfo(String format, String list, String meta, String cicontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=categoryinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((cicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(cicontinue)))) {
            queryString.append("&").append("cicontinue").append("=").append(String.valueOf(cicontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropCategoryInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropCategoryInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropContributors(String format, String list, String meta, String pcgroup, String pcexcludegroup, String pcrights, String pcexcluderights, String pclimit, String pccontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=contributors";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((pcgroup!= null)&&(!StringUtils.isEmpty(String.valueOf(pcgroup)))) {
            queryString.append("&").append("pcgroup").append("=").append(String.valueOf(pcgroup));
        }
        if ((pcexcludegroup!= null)&&(!StringUtils.isEmpty(String.valueOf(pcexcludegroup)))) {
            queryString.append("&").append("pcexcludegroup").append("=").append(String.valueOf(pcexcludegroup));
        }
        if ((pcrights!= null)&&(!StringUtils.isEmpty(String.valueOf(pcrights)))) {
            queryString.append("&").append("pcrights").append("=").append(String.valueOf(pcrights));
        }
        if ((pcexcluderights!= null)&&(!StringUtils.isEmpty(String.valueOf(pcexcluderights)))) {
            queryString.append("&").append("pcexcluderights").append("=").append(String.valueOf(pcexcluderights));
        }
        if ((pclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(pclimit)))) {
            queryString.append("&").append("pclimit").append("=").append(String.valueOf(pclimit));
        }
        if ((pccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(pccontinue)))) {
            queryString.append("&").append("pccontinue").append("=").append(String.valueOf(pccontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropContributors", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropContributors", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropDeletedRevisions(String format, String list, String meta, String drvprop, String drvlimit, String drvexpandtemplates, String drvgeneratexml, String drvparse, String drvsection, String drvdiffto, String drvdifftotext, String drvcontentformat, String drvstart, String drvend, String drvdir, String drvtag, String drvuser, String drvexcludeuser, String drvcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=deletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((drvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(drvprop)))) {
            queryString.append("&").append("drvprop").append("=").append(String.valueOf(drvprop));
        }
        if ((drvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(drvlimit)))) {
            queryString.append("&").append("drvlimit").append("=").append(String.valueOf(drvlimit));
        }
        if ((drvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(drvexpandtemplates)))) {
            queryString.append("&").append("drvexpandtemplates").append("=").append(String.valueOf(drvexpandtemplates));
        }
        if ((drvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(drvgeneratexml)))) {
            queryString.append("&").append("drvgeneratexml").append("=").append(String.valueOf(drvgeneratexml));
        }
        if ((drvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(drvparse)))) {
            queryString.append("&").append("drvparse").append("=").append(String.valueOf(drvparse));
        }
        if ((drvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(drvsection)))) {
            queryString.append("&").append("drvsection").append("=").append(String.valueOf(drvsection));
        }
        if ((drvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(drvdiffto)))) {
            queryString.append("&").append("drvdiffto").append("=").append(String.valueOf(drvdiffto));
        }
        if ((drvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(drvdifftotext)))) {
            queryString.append("&").append("drvdifftotext").append("=").append(String.valueOf(drvdifftotext));
        }
        if ((drvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(drvcontentformat)))) {
            queryString.append("&").append("drvcontentformat").append("=").append(String.valueOf(drvcontentformat));
        }
        if ((drvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(drvstart)))) {
            queryString.append("&").append("drvstart").append("=").append(String.valueOf(drvstart));
        }
        if ((drvend!= null)&&(!StringUtils.isEmpty(String.valueOf(drvend)))) {
            queryString.append("&").append("drvend").append("=").append(String.valueOf(drvend));
        }
        if ((drvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(drvdir)))) {
            queryString.append("&").append("drvdir").append("=").append(String.valueOf(drvdir));
        }
        if ((drvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(drvtag)))) {
            queryString.append("&").append("drvtag").append("=").append(String.valueOf(drvtag));
        }
        if ((drvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(drvuser)))) {
            queryString.append("&").append("drvuser").append("=").append(String.valueOf(drvuser));
        }
        if ((drvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(drvexcludeuser)))) {
            queryString.append("&").append("drvexcludeuser").append("=").append(String.valueOf(drvexcludeuser));
        }
        if ((drvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(drvcontinue)))) {
            queryString.append("&").append("drvcontinue").append("=").append(String.valueOf(drvcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropDuplicateFiles(String format, String list, String meta, String dflimit, String dfcontinue, String dfdir, String dflocalonly, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=duplicatefiles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((dflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(dflimit)))) {
            queryString.append("&").append("dflimit").append("=").append(String.valueOf(dflimit));
        }
        if ((dfcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(dfcontinue)))) {
            queryString.append("&").append("dfcontinue").append("=").append(String.valueOf(dfcontinue));
        }
        if ((dfdir!= null)&&(!StringUtils.isEmpty(String.valueOf(dfdir)))) {
            queryString.append("&").append("dfdir").append("=").append(String.valueOf(dfdir));
        }
        if ((dflocalonly!= null)&&(!StringUtils.isEmpty(String.valueOf(dflocalonly)))) {
            queryString.append("&").append("dflocalonly").append("=").append(String.valueOf(dflocalonly));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropDuplicateFiles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropDuplicateFiles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropExtLinks(String format, String list, String meta, String ellimit, String eloffset, String elprotocol, String elquery, String elexpandurl, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=extlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((ellimit!= null)&&(!StringUtils.isEmpty(String.valueOf(ellimit)))) {
            queryString.append("&").append("ellimit").append("=").append(String.valueOf(ellimit));
        }
        if ((eloffset!= null)&&(!StringUtils.isEmpty(String.valueOf(eloffset)))) {
            queryString.append("&").append("eloffset").append("=").append(String.valueOf(eloffset));
        }
        if ((elprotocol!= null)&&(!StringUtils.isEmpty(String.valueOf(elprotocol)))) {
            queryString.append("&").append("elprotocol").append("=").append(String.valueOf(elprotocol));
        }
        if ((elquery!= null)&&(!StringUtils.isEmpty(String.valueOf(elquery)))) {
            queryString.append("&").append("elquery").append("=").append(String.valueOf(elquery));
        }
        if ((elexpandurl!= null)&&(!StringUtils.isEmpty(String.valueOf(elexpandurl)))) {
            queryString.append("&").append("elexpandurl").append("=").append(String.valueOf(elexpandurl));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropExtLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropExtLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropExtracts(String format, String list, String meta, String exchars, String exsentences, String exlimit, String exintro, String explaintext, String exsectionformat, String excontinue, String exvariant, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=extracts";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((exchars!= null)&&(!StringUtils.isEmpty(String.valueOf(exchars)))) {
            queryString.append("&").append("exchars").append("=").append(String.valueOf(exchars));
        }
        if ((exsentences!= null)&&(!StringUtils.isEmpty(String.valueOf(exsentences)))) {
            queryString.append("&").append("exsentences").append("=").append(String.valueOf(exsentences));
        }
        if ((exlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(exlimit)))) {
            queryString.append("&").append("exlimit").append("=").append(String.valueOf(exlimit));
        }
        if ((exintro!= null)&&(!StringUtils.isEmpty(String.valueOf(exintro)))) {
            queryString.append("&").append("exintro").append("=").append(String.valueOf(exintro));
        }
        if ((explaintext!= null)&&(!StringUtils.isEmpty(String.valueOf(explaintext)))) {
            queryString.append("&").append("explaintext").append("=").append(String.valueOf(explaintext));
        }
        if ((exsectionformat!= null)&&(!StringUtils.isEmpty(String.valueOf(exsectionformat)))) {
            queryString.append("&").append("exsectionformat").append("=").append(String.valueOf(exsectionformat));
        }
        if ((excontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(excontinue)))) {
            queryString.append("&").append("excontinue").append("=").append(String.valueOf(excontinue));
        }
        if ((exvariant!= null)&&(!StringUtils.isEmpty(String.valueOf(exvariant)))) {
            queryString.append("&").append("exvariant").append("=").append(String.valueOf(exvariant));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropExtracts", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropExtracts", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropFileusage(String format, String list, String meta, String fuprop, String funamespace, String fushow, String fulimit, String fucontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=fileusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((fuprop!= null)&&(!StringUtils.isEmpty(String.valueOf(fuprop)))) {
            queryString.append("&").append("fuprop").append("=").append(String.valueOf(fuprop));
        }
        if ((funamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(funamespace)))) {
            queryString.append("&").append("funamespace").append("=").append(String.valueOf(funamespace));
        }
        if ((fushow!= null)&&(!StringUtils.isEmpty(String.valueOf(fushow)))) {
            queryString.append("&").append("fushow").append("=").append(String.valueOf(fushow));
        }
        if ((fulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(fulimit)))) {
            queryString.append("&").append("fulimit").append("=").append(String.valueOf(fulimit));
        }
        if ((fucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(fucontinue)))) {
            queryString.append("&").append("fucontinue").append("=").append(String.valueOf(fucontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropFileusage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropFileusage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropGlobalUsage(String format, String list, String meta, String guprop, String gulimit, String gucontinue, String gufilterlocal, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=globalusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((guprop!= null)&&(!StringUtils.isEmpty(String.valueOf(guprop)))) {
            queryString.append("&").append("guprop").append("=").append(String.valueOf(guprop));
        }
        if ((gulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gulimit)))) {
            queryString.append("&").append("gulimit").append("=").append(String.valueOf(gulimit));
        }
        if ((gucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gucontinue)))) {
            queryString.append("&").append("gucontinue").append("=").append(String.valueOf(gucontinue));
        }
        if ((gufilterlocal!= null)&&(!StringUtils.isEmpty(String.valueOf(gufilterlocal)))) {
            queryString.append("&").append("gufilterlocal").append("=").append(String.valueOf(gufilterlocal));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropGlobalUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropGlobalUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropImageInfo(String format, String list, String meta, String iiprop, String iilimit, String iistart, String iiend, String iiurlwidth, String iiurlheight, String iimetadataversion, String iiextmetadatalanguage, String iiextmetadatamultilang, String iiextmetadatafilter, String iiurlparam, String iicontinue, String iilocalonly, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=imageinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((iiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(iiprop)))) {
            queryString.append("&").append("iiprop").append("=").append(String.valueOf(iiprop));
        }
        if ((iilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(iilimit)))) {
            queryString.append("&").append("iilimit").append("=").append(String.valueOf(iilimit));
        }
        if ((iistart!= null)&&(!StringUtils.isEmpty(String.valueOf(iistart)))) {
            queryString.append("&").append("iistart").append("=").append(String.valueOf(iistart));
        }
        if ((iiend!= null)&&(!StringUtils.isEmpty(String.valueOf(iiend)))) {
            queryString.append("&").append("iiend").append("=").append(String.valueOf(iiend));
        }
        if ((iiurlwidth!= null)&&(!StringUtils.isEmpty(String.valueOf(iiurlwidth)))) {
            queryString.append("&").append("iiurlwidth").append("=").append(String.valueOf(iiurlwidth));
        }
        if ((iiurlheight!= null)&&(!StringUtils.isEmpty(String.valueOf(iiurlheight)))) {
            queryString.append("&").append("iiurlheight").append("=").append(String.valueOf(iiurlheight));
        }
        if ((iimetadataversion!= null)&&(!StringUtils.isEmpty(String.valueOf(iimetadataversion)))) {
            queryString.append("&").append("iimetadataversion").append("=").append(String.valueOf(iimetadataversion));
        }
        if ((iiextmetadatalanguage!= null)&&(!StringUtils.isEmpty(String.valueOf(iiextmetadatalanguage)))) {
            queryString.append("&").append("iiextmetadatalanguage").append("=").append(String.valueOf(iiextmetadatalanguage));
        }
        if ((iiextmetadatamultilang!= null)&&(!StringUtils.isEmpty(String.valueOf(iiextmetadatamultilang)))) {
            queryString.append("&").append("iiextmetadatamultilang").append("=").append(String.valueOf(iiextmetadatamultilang));
        }
        if ((iiextmetadatafilter!= null)&&(!StringUtils.isEmpty(String.valueOf(iiextmetadatafilter)))) {
            queryString.append("&").append("iiextmetadatafilter").append("=").append(String.valueOf(iiextmetadatafilter));
        }
        if ((iiurlparam!= null)&&(!StringUtils.isEmpty(String.valueOf(iiurlparam)))) {
            queryString.append("&").append("iiurlparam").append("=").append(String.valueOf(iiurlparam));
        }
        if ((iicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(iicontinue)))) {
            queryString.append("&").append("iicontinue").append("=").append(String.valueOf(iicontinue));
        }
        if ((iilocalonly!= null)&&(!StringUtils.isEmpty(String.valueOf(iilocalonly)))) {
            queryString.append("&").append("iilocalonly").append("=").append(String.valueOf(iilocalonly));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropImageInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropImageInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropImages(String format, String list, String meta, String imlimit, String imcontinue, String imimages, String imdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=images";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((imlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(imlimit)))) {
            queryString.append("&").append("imlimit").append("=").append(String.valueOf(imlimit));
        }
        if ((imcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(imcontinue)))) {
            queryString.append("&").append("imcontinue").append("=").append(String.valueOf(imcontinue));
        }
        if ((imimages!= null)&&(!StringUtils.isEmpty(String.valueOf(imimages)))) {
            queryString.append("&").append("imimages").append("=").append(String.valueOf(imimages));
        }
        if ((imdir!= null)&&(!StringUtils.isEmpty(String.valueOf(imdir)))) {
            queryString.append("&").append("imdir").append("=").append(String.valueOf(imdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropInfo(String format, String list, String meta, String inprop, String intestactions, String incontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=info";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((inprop!= null)&&(!StringUtils.isEmpty(String.valueOf(inprop)))) {
            queryString.append("&").append("inprop").append("=").append(String.valueOf(inprop));
        }
        if ((intestactions!= null)&&(!StringUtils.isEmpty(String.valueOf(intestactions)))) {
            queryString.append("&").append("intestactions").append("=").append(String.valueOf(intestactions));
        }
        if ((incontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(incontinue)))) {
            queryString.append("&").append("incontinue").append("=").append(String.valueOf(incontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropIwLinks(String format, String list, String meta, String iwprop, String iwprefix, String iwtitle, String iwdir, String iwlimit, String iwcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=iwlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((iwprop!= null)&&(!StringUtils.isEmpty(String.valueOf(iwprop)))) {
            queryString.append("&").append("iwprop").append("=").append(String.valueOf(iwprop));
        }
        if ((iwprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(iwprefix)))) {
            queryString.append("&").append("iwprefix").append("=").append(String.valueOf(iwprefix));
        }
        if ((iwtitle!= null)&&(!StringUtils.isEmpty(String.valueOf(iwtitle)))) {
            queryString.append("&").append("iwtitle").append("=").append(String.valueOf(iwtitle));
        }
        if ((iwdir!= null)&&(!StringUtils.isEmpty(String.valueOf(iwdir)))) {
            queryString.append("&").append("iwdir").append("=").append(String.valueOf(iwdir));
        }
        if ((iwlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(iwlimit)))) {
            queryString.append("&").append("iwlimit").append("=").append(String.valueOf(iwlimit));
        }
        if ((iwcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(iwcontinue)))) {
            queryString.append("&").append("iwcontinue").append("=").append(String.valueOf(iwcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropIwLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropIwLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryProplanglinks(String format, String list, String meta, String llprop, String lllang, String lltitle, String lldir, String llinlanguagecode, String lllimit, String llcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=langlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((llprop!= null)&&(!StringUtils.isEmpty(String.valueOf(llprop)))) {
            queryString.append("&").append("llprop").append("=").append(String.valueOf(llprop));
        }
        if ((lllang!= null)&&(!StringUtils.isEmpty(String.valueOf(lllang)))) {
            queryString.append("&").append("lllang").append("=").append(String.valueOf(lllang));
        }
        if ((lltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(lltitle)))) {
            queryString.append("&").append("lltitle").append("=").append(String.valueOf(lltitle));
        }
        if ((lldir!= null)&&(!StringUtils.isEmpty(String.valueOf(lldir)))) {
            queryString.append("&").append("lldir").append("=").append(String.valueOf(lldir));
        }
        if ((llinlanguagecode!= null)&&(!StringUtils.isEmpty(String.valueOf(llinlanguagecode)))) {
            queryString.append("&").append("llinlanguagecode").append("=").append(String.valueOf(llinlanguagecode));
        }
        if ((lllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(lllimit)))) {
            queryString.append("&").append("lllimit").append("=").append(String.valueOf(lllimit));
        }
        if ((llcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(llcontinue)))) {
            queryString.append("&").append("llcontinue").append("=").append(String.valueOf(llcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryProplanglinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryProplanglinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryProplinks(String format, String list, String meta, String plnamespace, String pllimit, String plcontinue, String pltitles, String pldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=links";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((plnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(plnamespace)))) {
            queryString.append("&").append("plnamespace").append("=").append(String.valueOf(plnamespace));
        }
        if ((pllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(pllimit)))) {
            queryString.append("&").append("pllimit").append("=").append(String.valueOf(pllimit));
        }
        if ((plcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(plcontinue)))) {
            queryString.append("&").append("plcontinue").append("=").append(String.valueOf(plcontinue));
        }
        if ((pltitles!= null)&&(!StringUtils.isEmpty(String.valueOf(pltitles)))) {
            queryString.append("&").append("pltitles").append("=").append(String.valueOf(pltitles));
        }
        if ((pldir!= null)&&(!StringUtils.isEmpty(String.valueOf(pldir)))) {
            queryString.append("&").append("pldir").append("=").append(String.valueOf(pldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryProplinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryProplinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropLinkShere(String format, String list, String meta, String lhprop, String lhnamespace, String lhshow, String lhlimit, String lhcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=linkshere";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((lhprop!= null)&&(!StringUtils.isEmpty(String.valueOf(lhprop)))) {
            queryString.append("&").append("lhprop").append("=").append(String.valueOf(lhprop));
        }
        if ((lhnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(lhnamespace)))) {
            queryString.append("&").append("lhnamespace").append("=").append(String.valueOf(lhnamespace));
        }
        if ((lhshow!= null)&&(!StringUtils.isEmpty(String.valueOf(lhshow)))) {
            queryString.append("&").append("lhshow").append("=").append(String.valueOf(lhshow));
        }
        if ((lhlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(lhlimit)))) {
            queryString.append("&").append("lhlimit").append("=").append(String.valueOf(lhlimit));
        }
        if ((lhcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(lhcontinue)))) {
            queryString.append("&").append("lhcontinue").append("=").append(String.valueOf(lhcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropLinkShere", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropLinkShere", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropPageImages(String format, String list, String meta, String piprop, String pithumbsize, String pilimit, String picontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=pageimages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((piprop!= null)&&(!StringUtils.isEmpty(String.valueOf(piprop)))) {
            queryString.append("&").append("piprop").append("=").append(String.valueOf(piprop));
        }
        if ((pithumbsize!= null)&&(!StringUtils.isEmpty(String.valueOf(pithumbsize)))) {
            queryString.append("&").append("pithumbsize").append("=").append(String.valueOf(pithumbsize));
        }
        if ((pilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(pilimit)))) {
            queryString.append("&").append("pilimit").append("=").append(String.valueOf(pilimit));
        }
        if ((picontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(picontinue)))) {
            queryString.append("&").append("picontinue").append("=").append(String.valueOf(picontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropPageImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropPageImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropPageProps(String format, String list, String meta, String ppcontinue, String ppprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=pageprops";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((ppcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ppcontinue)))) {
            queryString.append("&").append("ppcontinue").append("=").append(String.valueOf(ppcontinue));
        }
        if ((ppprop!= null)&&(!StringUtils.isEmpty(String.valueOf(ppprop)))) {
            queryString.append("&").append("ppprop").append("=").append(String.valueOf(ppprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropPageProps", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropPageProps", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropPageTerms(String format, String list, String meta, String wbptcontinue, String wbptterms, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=pageterms";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((wbptcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(wbptcontinue)))) {
            queryString.append("&").append("wbptcontinue").append("=").append(String.valueOf(wbptcontinue));
        }
        if ((wbptterms!= null)&&(!StringUtils.isEmpty(String.valueOf(wbptterms)))) {
            queryString.append("&").append("wbptterms").append("=").append(String.valueOf(wbptterms));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropPageTerms", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropPageTerms", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropRedirects(String format, String list, String meta, String rdprop, String rdnamespace, String rdshow, String rdlimit, String rdcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=redirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((rdprop!= null)&&(!StringUtils.isEmpty(String.valueOf(rdprop)))) {
            queryString.append("&").append("rdprop").append("=").append(String.valueOf(rdprop));
        }
        if ((rdnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(rdnamespace)))) {
            queryString.append("&").append("rdnamespace").append("=").append(String.valueOf(rdnamespace));
        }
        if ((rdshow!= null)&&(!StringUtils.isEmpty(String.valueOf(rdshow)))) {
            queryString.append("&").append("rdshow").append("=").append(String.valueOf(rdshow));
        }
        if ((rdlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(rdlimit)))) {
            queryString.append("&").append("rdlimit").append("=").append(String.valueOf(rdlimit));
        }
        if ((rdcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(rdcontinue)))) {
            queryString.append("&").append("rdcontinue").append("=").append(String.valueOf(rdcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropRevisions(String format, String list, String meta, String rvprop, String rvlimit, String rvexpandtemplates, String rvgeneratexml, String rvparse, String rvsection, String rvdiffto, String rvdifftotext, String rvcontentformat, String rvstartid, String rvendid, String rvstart, String rvend, String rvdir, String rvuser, String rvexcludeuser, String rvtag, String rvcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=revisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((rvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(rvprop)))) {
            queryString.append("&").append("rvprop").append("=").append(String.valueOf(rvprop));
        }
        if ((rvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(rvlimit)))) {
            queryString.append("&").append("rvlimit").append("=").append(String.valueOf(rvlimit));
        }
        if ((rvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(rvexpandtemplates)))) {
            queryString.append("&").append("rvexpandtemplates").append("=").append(String.valueOf(rvexpandtemplates));
        }
        if ((rvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(rvgeneratexml)))) {
            queryString.append("&").append("rvgeneratexml").append("=").append(String.valueOf(rvgeneratexml));
        }
        if ((rvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(rvparse)))) {
            queryString.append("&").append("rvparse").append("=").append(String.valueOf(rvparse));
        }
        if ((rvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(rvsection)))) {
            queryString.append("&").append("rvsection").append("=").append(String.valueOf(rvsection));
        }
        if ((rvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(rvdiffto)))) {
            queryString.append("&").append("rvdiffto").append("=").append(String.valueOf(rvdiffto));
        }
        if ((rvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(rvdifftotext)))) {
            queryString.append("&").append("rvdifftotext").append("=").append(String.valueOf(rvdifftotext));
        }
        if ((rvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(rvcontentformat)))) {
            queryString.append("&").append("rvcontentformat").append("=").append(String.valueOf(rvcontentformat));
        }
        if ((rvstartid!= null)&&(!StringUtils.isEmpty(String.valueOf(rvstartid)))) {
            queryString.append("&").append("rvstartid").append("=").append(String.valueOf(rvstartid));
        }
        if ((rvendid!= null)&&(!StringUtils.isEmpty(String.valueOf(rvendid)))) {
            queryString.append("&").append("rvendid").append("=").append(String.valueOf(rvendid));
        }
        if ((rvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(rvstart)))) {
            queryString.append("&").append("rvstart").append("=").append(String.valueOf(rvstart));
        }
        if ((rvend!= null)&&(!StringUtils.isEmpty(String.valueOf(rvend)))) {
            queryString.append("&").append("rvend").append("=").append(String.valueOf(rvend));
        }
        if ((rvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(rvdir)))) {
            queryString.append("&").append("rvdir").append("=").append(String.valueOf(rvdir));
        }
        if ((rvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(rvuser)))) {
            queryString.append("&").append("rvuser").append("=").append(String.valueOf(rvuser));
        }
        if ((rvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(rvexcludeuser)))) {
            queryString.append("&").append("rvexcludeuser").append("=").append(String.valueOf(rvexcludeuser));
        }
        if ((rvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(rvtag)))) {
            queryString.append("&").append("rvtag").append("=").append(String.valueOf(rvtag));
        }
        if ((rvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(rvcontinue)))) {
            queryString.append("&").append("rvcontinue").append("=").append(String.valueOf(rvcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropStashImageinfo(String format, String list, String meta, String siifilekey, String siiprop, String siiurlwidth, String siiurlheight, String siiurlparam, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=stashimageinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((siifilekey!= null)&&(!StringUtils.isEmpty(String.valueOf(siifilekey)))) {
            queryString.append("&").append("siifilekey").append("=").append(String.valueOf(siifilekey));
        }
        if ((siiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(siiprop)))) {
            queryString.append("&").append("siiprop").append("=").append(String.valueOf(siiprop));
        }
        if ((siiurlwidth!= null)&&(!StringUtils.isEmpty(String.valueOf(siiurlwidth)))) {
            queryString.append("&").append("siiurlwidth").append("=").append(String.valueOf(siiurlwidth));
        }
        if ((siiurlheight!= null)&&(!StringUtils.isEmpty(String.valueOf(siiurlheight)))) {
            queryString.append("&").append("siiurlheight").append("=").append(String.valueOf(siiurlheight));
        }
        if ((siiurlparam!= null)&&(!StringUtils.isEmpty(String.valueOf(siiurlparam)))) {
            queryString.append("&").append("siiurlparam").append("=").append(String.valueOf(siiurlparam));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropStashImageinfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropStashImageinfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropTemplates(String format, String list, String meta, String tlnamespace, String tllimit, String tlcontinue, String tltemplates, String tldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=templates";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((tlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(tlnamespace)))) {
            queryString.append("&").append("tlnamespace").append("=").append(String.valueOf(tlnamespace));
        }
        if ((tllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(tllimit)))) {
            queryString.append("&").append("tllimit").append("=").append(String.valueOf(tllimit));
        }
        if ((tlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(tlcontinue)))) {
            queryString.append("&").append("tlcontinue").append("=").append(String.valueOf(tlcontinue));
        }
        if ((tltemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(tltemplates)))) {
            queryString.append("&").append("tltemplates").append("=").append(String.valueOf(tltemplates));
        }
        if ((tldir!= null)&&(!StringUtils.isEmpty(String.valueOf(tldir)))) {
            queryString.append("&").append("tldir").append("=").append(String.valueOf(tldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropTemplates", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropTemplates", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropTranscludedin(String format, String list, String meta, String tiprop, String tinamespace, String tishow, String tilimit, String ticontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=transcludedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((tiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(tiprop)))) {
            queryString.append("&").append("tiprop").append("=").append(String.valueOf(tiprop));
        }
        if ((tinamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(tinamespace)))) {
            queryString.append("&").append("tinamespace").append("=").append(String.valueOf(tinamespace));
        }
        if ((tishow!= null)&&(!StringUtils.isEmpty(String.valueOf(tishow)))) {
            queryString.append("&").append("tishow").append("=").append(String.valueOf(tishow));
        }
        if ((tilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(tilimit)))) {
            queryString.append("&").append("tilimit").append("=").append(String.valueOf(tilimit));
        }
        if ((ticontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ticontinue)))) {
            queryString.append("&").append("ticontinue").append("=").append(String.valueOf(ticontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropTranscludedin", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropTranscludedin", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryPropVideoInfo(String format, String list, String meta, String viprop, String vilimit, String vistart, String viend, String viurlwidth, String viurlheight, String viurlparam, String vicontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=videoinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((viprop!= null)&&(!StringUtils.isEmpty(String.valueOf(viprop)))) {
            queryString.append("&").append("viprop").append("=").append(String.valueOf(viprop));
        }
        if ((vilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(vilimit)))) {
            queryString.append("&").append("vilimit").append("=").append(String.valueOf(vilimit));
        }
        if ((vistart!= null)&&(!StringUtils.isEmpty(String.valueOf(vistart)))) {
            queryString.append("&").append("vistart").append("=").append(String.valueOf(vistart));
        }
        if ((viend!= null)&&(!StringUtils.isEmpty(String.valueOf(viend)))) {
            queryString.append("&").append("viend").append("=").append(String.valueOf(viend));
        }
        if ((viurlwidth!= null)&&(!StringUtils.isEmpty(String.valueOf(viurlwidth)))) {
            queryString.append("&").append("viurlwidth").append("=").append(String.valueOf(viurlwidth));
        }
        if ((viurlheight!= null)&&(!StringUtils.isEmpty(String.valueOf(viurlheight)))) {
            queryString.append("&").append("viurlheight").append("=").append(String.valueOf(viurlheight));
        }
        if ((viurlparam!= null)&&(!StringUtils.isEmpty(String.valueOf(viurlparam)))) {
            queryString.append("&").append("viurlparam").append("=").append(String.valueOf(viurlparam));
        }
        if ((vicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(vicontinue)))) {
            queryString.append("&").append("vicontinue").append("=").append(String.valueOf(vicontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryPropVideoInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryPropVideoInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAbuseFilters(String format, String prop, String meta, String abfstartid, String abfendid, String abfdir, String abfshow, String abflimit, String abfprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=abusefilters";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((abfstartid!= null)&&(!StringUtils.isEmpty(String.valueOf(abfstartid)))) {
            queryString.append("&").append("abfstartid").append("=").append(String.valueOf(abfstartid));
        }
        if ((abfendid!= null)&&(!StringUtils.isEmpty(String.valueOf(abfendid)))) {
            queryString.append("&").append("abfendid").append("=").append(String.valueOf(abfendid));
        }
        if ((abfdir!= null)&&(!StringUtils.isEmpty(String.valueOf(abfdir)))) {
            queryString.append("&").append("abfdir").append("=").append(String.valueOf(abfdir));
        }
        if ((abfshow!= null)&&(!StringUtils.isEmpty(String.valueOf(abfshow)))) {
            queryString.append("&").append("abfshow").append("=").append(String.valueOf(abfshow));
        }
        if ((abflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(abflimit)))) {
            queryString.append("&").append("abflimit").append("=").append(String.valueOf(abflimit));
        }
        if ((abfprop!= null)&&(!StringUtils.isEmpty(String.valueOf(abfprop)))) {
            queryString.append("&").append("abfprop").append("=").append(String.valueOf(abfprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAbuseFilters", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAbuseFilters", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAbuseLog(String format, String prop, String meta, String aflstart, String aflend, String afldir, String afluser, String afltitle, String aflfilter, String afllimit, String aflprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=abuselog";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((aflstart!= null)&&(!StringUtils.isEmpty(String.valueOf(aflstart)))) {
            queryString.append("&").append("aflstart").append("=").append(String.valueOf(aflstart));
        }
        if ((aflend!= null)&&(!StringUtils.isEmpty(String.valueOf(aflend)))) {
            queryString.append("&").append("aflend").append("=").append(String.valueOf(aflend));
        }
        if ((afldir!= null)&&(!StringUtils.isEmpty(String.valueOf(afldir)))) {
            queryString.append("&").append("afldir").append("=").append(String.valueOf(afldir));
        }
        if ((afluser!= null)&&(!StringUtils.isEmpty(String.valueOf(afluser)))) {
            queryString.append("&").append("afluser").append("=").append(String.valueOf(afluser));
        }
        if ((afltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(afltitle)))) {
            queryString.append("&").append("afltitle").append("=").append(String.valueOf(afltitle));
        }
        if ((aflfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(aflfilter)))) {
            queryString.append("&").append("aflfilter").append("=").append(String.valueOf(aflfilter));
        }
        if ((afllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(afllimit)))) {
            queryString.append("&").append("afllimit").append("=").append(String.valueOf(afllimit));
        }
        if ((aflprop!= null)&&(!StringUtils.isEmpty(String.valueOf(aflprop)))) {
            queryString.append("&").append("aflprop").append("=").append(String.valueOf(aflprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAbuseLog", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAbuseLog", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllCategories(String format, String prop, String meta, String acfrom, String accontinue, String acto, String acprefix, String acdir, String acmin, String acmax, String aclimit, String acprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allcategories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((acfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(acfrom)))) {
            queryString.append("&").append("acfrom").append("=").append(String.valueOf(acfrom));
        }
        if ((accontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(accontinue)))) {
            queryString.append("&").append("accontinue").append("=").append(String.valueOf(accontinue));
        }
        if ((acto!= null)&&(!StringUtils.isEmpty(String.valueOf(acto)))) {
            queryString.append("&").append("acto").append("=").append(String.valueOf(acto));
        }
        if ((acprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(acprefix)))) {
            queryString.append("&").append("acprefix").append("=").append(String.valueOf(acprefix));
        }
        if ((acdir!= null)&&(!StringUtils.isEmpty(String.valueOf(acdir)))) {
            queryString.append("&").append("acdir").append("=").append(String.valueOf(acdir));
        }
        if ((acmin!= null)&&(!StringUtils.isEmpty(String.valueOf(acmin)))) {
            queryString.append("&").append("acmin").append("=").append(String.valueOf(acmin));
        }
        if ((acmax!= null)&&(!StringUtils.isEmpty(String.valueOf(acmax)))) {
            queryString.append("&").append("acmax").append("=").append(String.valueOf(acmax));
        }
        if ((aclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(aclimit)))) {
            queryString.append("&").append("aclimit").append("=").append(String.valueOf(aclimit));
        }
        if ((acprop!= null)&&(!StringUtils.isEmpty(String.valueOf(acprop)))) {
            queryString.append("&").append("acprop").append("=").append(String.valueOf(acprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllDeletedRevisions(String format, String prop, String meta, String adrprop, String adrlimit, String adrexpandtemplates, String adrgeneratexml, String adrparse, String adrsection, String adrdiffto, String adrdifftotext, String adrcontentformat, String adruser, String adrnamespace, String adrstart, String adrend, String adrdir, String adrfrom, String adrto, String adrprefix, String adrexcludeuser, String adrtag, String adrcontinue, String adrgeneratetitles, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=alldeletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((adrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(adrprop)))) {
            queryString.append("&").append("adrprop").append("=").append(String.valueOf(adrprop));
        }
        if ((adrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(adrlimit)))) {
            queryString.append("&").append("adrlimit").append("=").append(String.valueOf(adrlimit));
        }
        if ((adrexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(adrexpandtemplates)))) {
            queryString.append("&").append("adrexpandtemplates").append("=").append(String.valueOf(adrexpandtemplates));
        }
        if ((adrgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(adrgeneratexml)))) {
            queryString.append("&").append("adrgeneratexml").append("=").append(String.valueOf(adrgeneratexml));
        }
        if ((adrparse!= null)&&(!StringUtils.isEmpty(String.valueOf(adrparse)))) {
            queryString.append("&").append("adrparse").append("=").append(String.valueOf(adrparse));
        }
        if ((adrsection!= null)&&(!StringUtils.isEmpty(String.valueOf(adrsection)))) {
            queryString.append("&").append("adrsection").append("=").append(String.valueOf(adrsection));
        }
        if ((adrdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(adrdiffto)))) {
            queryString.append("&").append("adrdiffto").append("=").append(String.valueOf(adrdiffto));
        }
        if ((adrdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(adrdifftotext)))) {
            queryString.append("&").append("adrdifftotext").append("=").append(String.valueOf(adrdifftotext));
        }
        if ((adrcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(adrcontentformat)))) {
            queryString.append("&").append("adrcontentformat").append("=").append(String.valueOf(adrcontentformat));
        }
        if ((adruser!= null)&&(!StringUtils.isEmpty(String.valueOf(adruser)))) {
            queryString.append("&").append("adruser").append("=").append(String.valueOf(adruser));
        }
        if ((adrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(adrnamespace)))) {
            queryString.append("&").append("adrnamespace").append("=").append(String.valueOf(adrnamespace));
        }
        if ((adrstart!= null)&&(!StringUtils.isEmpty(String.valueOf(adrstart)))) {
            queryString.append("&").append("adrstart").append("=").append(String.valueOf(adrstart));
        }
        if ((adrend!= null)&&(!StringUtils.isEmpty(String.valueOf(adrend)))) {
            queryString.append("&").append("adrend").append("=").append(String.valueOf(adrend));
        }
        if ((adrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(adrdir)))) {
            queryString.append("&").append("adrdir").append("=").append(String.valueOf(adrdir));
        }
        if ((adrfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(adrfrom)))) {
            queryString.append("&").append("adrfrom").append("=").append(String.valueOf(adrfrom));
        }
        if ((adrto!= null)&&(!StringUtils.isEmpty(String.valueOf(adrto)))) {
            queryString.append("&").append("adrto").append("=").append(String.valueOf(adrto));
        }
        if ((adrprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(adrprefix)))) {
            queryString.append("&").append("adrprefix").append("=").append(String.valueOf(adrprefix));
        }
        if ((adrexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(adrexcludeuser)))) {
            queryString.append("&").append("adrexcludeuser").append("=").append(String.valueOf(adrexcludeuser));
        }
        if ((adrtag!= null)&&(!StringUtils.isEmpty(String.valueOf(adrtag)))) {
            queryString.append("&").append("adrtag").append("=").append(String.valueOf(adrtag));
        }
        if ((adrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(adrcontinue)))) {
            queryString.append("&").append("adrcontinue").append("=").append(String.valueOf(adrcontinue));
        }
        if ((adrgeneratetitles!= null)&&(!StringUtils.isEmpty(String.valueOf(adrgeneratetitles)))) {
            queryString.append("&").append("adrgeneratetitles").append("=").append(String.valueOf(adrgeneratetitles));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllFileuUsages(String format, String prop, String meta, String afcontinue, String affrom, String afto, String afprefix, String afunique, String afprop, String aflimit, String afdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allfileusages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((afcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(afcontinue)))) {
            queryString.append("&").append("afcontinue").append("=").append(String.valueOf(afcontinue));
        }
        if ((affrom!= null)&&(!StringUtils.isEmpty(String.valueOf(affrom)))) {
            queryString.append("&").append("affrom").append("=").append(String.valueOf(affrom));
        }
        if ((afto!= null)&&(!StringUtils.isEmpty(String.valueOf(afto)))) {
            queryString.append("&").append("afto").append("=").append(String.valueOf(afto));
        }
        if ((afprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(afprefix)))) {
            queryString.append("&").append("afprefix").append("=").append(String.valueOf(afprefix));
        }
        if ((afunique!= null)&&(!StringUtils.isEmpty(String.valueOf(afunique)))) {
            queryString.append("&").append("afunique").append("=").append(String.valueOf(afunique));
        }
        if ((afprop!= null)&&(!StringUtils.isEmpty(String.valueOf(afprop)))) {
            queryString.append("&").append("afprop").append("=").append(String.valueOf(afprop));
        }
        if ((aflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(aflimit)))) {
            queryString.append("&").append("aflimit").append("=").append(String.valueOf(aflimit));
        }
        if ((afdir!= null)&&(!StringUtils.isEmpty(String.valueOf(afdir)))) {
            queryString.append("&").append("afdir").append("=").append(String.valueOf(afdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllFileuUsages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllFileuUsages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllImages(String format, String prop, String meta, String aisort, String aidir, String aifrom, String aito, String aicontinue, String aistart, String aiend, String aiprop, String aiprefix, String aiminsize, String aimaxsize, String aisha1, String aisha1base36, String aiuser, String aifilterbots, String aimime, String ailimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allimages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((aisort!= null)&&(!StringUtils.isEmpty(String.valueOf(aisort)))) {
            queryString.append("&").append("aisort").append("=").append(String.valueOf(aisort));
        }
        if ((aidir!= null)&&(!StringUtils.isEmpty(String.valueOf(aidir)))) {
            queryString.append("&").append("aidir").append("=").append(String.valueOf(aidir));
        }
        if ((aifrom!= null)&&(!StringUtils.isEmpty(String.valueOf(aifrom)))) {
            queryString.append("&").append("aifrom").append("=").append(String.valueOf(aifrom));
        }
        if ((aito!= null)&&(!StringUtils.isEmpty(String.valueOf(aito)))) {
            queryString.append("&").append("aito").append("=").append(String.valueOf(aito));
        }
        if ((aicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(aicontinue)))) {
            queryString.append("&").append("aicontinue").append("=").append(String.valueOf(aicontinue));
        }
        if ((aistart!= null)&&(!StringUtils.isEmpty(String.valueOf(aistart)))) {
            queryString.append("&").append("aistart").append("=").append(String.valueOf(aistart));
        }
        if ((aiend!= null)&&(!StringUtils.isEmpty(String.valueOf(aiend)))) {
            queryString.append("&").append("aiend").append("=").append(String.valueOf(aiend));
        }
        if ((aiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(aiprop)))) {
            queryString.append("&").append("aiprop").append("=").append(String.valueOf(aiprop));
        }
        if ((aiprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(aiprefix)))) {
            queryString.append("&").append("aiprefix").append("=").append(String.valueOf(aiprefix));
        }
        if ((aiminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(aiminsize)))) {
            queryString.append("&").append("aiminsize").append("=").append(String.valueOf(aiminsize));
        }
        if ((aimaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(aimaxsize)))) {
            queryString.append("&").append("aimaxsize").append("=").append(String.valueOf(aimaxsize));
        }
        if ((aisha1 != null)&&(!StringUtils.isEmpty(String.valueOf(aisha1)))) {
            queryString.append("&").append("aisha1").append("=").append(String.valueOf(aisha1));
        }
        if ((aisha1base36 != null)&&(!StringUtils.isEmpty(String.valueOf(aisha1base36)))) {
            queryString.append("&").append("aisha1base36").append("=").append(String.valueOf(aisha1base36));
        }
        if ((aiuser!= null)&&(!StringUtils.isEmpty(String.valueOf(aiuser)))) {
            queryString.append("&").append("aiuser").append("=").append(String.valueOf(aiuser));
        }
        if ((aifilterbots!= null)&&(!StringUtils.isEmpty(String.valueOf(aifilterbots)))) {
            queryString.append("&").append("aifilterbots").append("=").append(String.valueOf(aifilterbots));
        }
        if ((aimime!= null)&&(!StringUtils.isEmpty(String.valueOf(aimime)))) {
            queryString.append("&").append("aimime").append("=").append(String.valueOf(aimime));
        }
        if ((ailimit!= null)&&(!StringUtils.isEmpty(String.valueOf(ailimit)))) {
            queryString.append("&").append("ailimit").append("=").append(String.valueOf(ailimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllLinks(String format, String prop, String meta, String alcontinue, String alfrom, String alto, String alprefix, String alunique, String alprop, String alnamespace, String allimit, String aldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=alllinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((alcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(alcontinue)))) {
            queryString.append("&").append("alcontinue").append("=").append(String.valueOf(alcontinue));
        }
        if ((alfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(alfrom)))) {
            queryString.append("&").append("alfrom").append("=").append(String.valueOf(alfrom));
        }
        if ((alto!= null)&&(!StringUtils.isEmpty(String.valueOf(alto)))) {
            queryString.append("&").append("alto").append("=").append(String.valueOf(alto));
        }
        if ((alprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(alprefix)))) {
            queryString.append("&").append("alprefix").append("=").append(String.valueOf(alprefix));
        }
        if ((alunique!= null)&&(!StringUtils.isEmpty(String.valueOf(alunique)))) {
            queryString.append("&").append("alunique").append("=").append(String.valueOf(alunique));
        }
        if ((alprop!= null)&&(!StringUtils.isEmpty(String.valueOf(alprop)))) {
            queryString.append("&").append("alprop").append("=").append(String.valueOf(alprop));
        }
        if ((alnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(alnamespace)))) {
            queryString.append("&").append("alnamespace").append("=").append(String.valueOf(alnamespace));
        }
        if ((allimit!= null)&&(!StringUtils.isEmpty(String.valueOf(allimit)))) {
            queryString.append("&").append("allimit").append("=").append(String.valueOf(allimit));
        }
        if ((aldir!= null)&&(!StringUtils.isEmpty(String.valueOf(aldir)))) {
            queryString.append("&").append("aldir").append("=").append(String.valueOf(aldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllPages(String format, String prop, String meta, String apcontinue, String apfrom, String apto, String apprefix, String apnamespace, String apfilterredir, String apminsize, String apmaxsize, String apprtype, String apprlevel, String apprfiltercascade, String aplimit, String apdir, String apfilterlanglinks, String apprexpiry, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allpages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((apcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(apcontinue)))) {
            queryString.append("&").append("apcontinue").append("=").append(String.valueOf(apcontinue));
        }
        if ((apfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(apfrom)))) {
            queryString.append("&").append("apfrom").append("=").append(String.valueOf(apfrom));
        }
        if ((apto!= null)&&(!StringUtils.isEmpty(String.valueOf(apto)))) {
            queryString.append("&").append("apto").append("=").append(String.valueOf(apto));
        }
        if ((apprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(apprefix)))) {
            queryString.append("&").append("apprefix").append("=").append(String.valueOf(apprefix));
        }
        if ((apnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(apnamespace)))) {
            queryString.append("&").append("apnamespace").append("=").append(String.valueOf(apnamespace));
        }
        if ((apfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(apfilterredir)))) {
            queryString.append("&").append("apfilterredir").append("=").append(String.valueOf(apfilterredir));
        }
        if ((apminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(apminsize)))) {
            queryString.append("&").append("apminsize").append("=").append(String.valueOf(apminsize));
        }
        if ((apmaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(apmaxsize)))) {
            queryString.append("&").append("apmaxsize").append("=").append(String.valueOf(apmaxsize));
        }
        if ((apprtype!= null)&&(!StringUtils.isEmpty(String.valueOf(apprtype)))) {
            queryString.append("&").append("apprtype").append("=").append(String.valueOf(apprtype));
        }
        if ((apprlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(apprlevel)))) {
            queryString.append("&").append("apprlevel").append("=").append(String.valueOf(apprlevel));
        }
        if ((apprfiltercascade!= null)&&(!StringUtils.isEmpty(String.valueOf(apprfiltercascade)))) {
            queryString.append("&").append("apprfiltercascade").append("=").append(String.valueOf(apprfiltercascade));
        }
        if ((aplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(aplimit)))) {
            queryString.append("&").append("aplimit").append("=").append(String.valueOf(aplimit));
        }
        if ((apdir!= null)&&(!StringUtils.isEmpty(String.valueOf(apdir)))) {
            queryString.append("&").append("apdir").append("=").append(String.valueOf(apdir));
        }
        if ((apfilterlanglinks!= null)&&(!StringUtils.isEmpty(String.valueOf(apfilterlanglinks)))) {
            queryString.append("&").append("apfilterlanglinks").append("=").append(String.valueOf(apfilterlanglinks));
        }
        if ((apprexpiry!= null)&&(!StringUtils.isEmpty(String.valueOf(apprexpiry)))) {
            queryString.append("&").append("apprexpiry").append("=").append(String.valueOf(apprexpiry));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllPages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllPages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllRedirects(String format, String prop, String meta, String arcontinue, String arfrom, String arto, String arprefix, String arunique, String arprop, String arnamespace, String arlimit, String ardir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allredirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((arcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(arcontinue)))) {
            queryString.append("&").append("arcontinue").append("=").append(String.valueOf(arcontinue));
        }
        if ((arfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(arfrom)))) {
            queryString.append("&").append("arfrom").append("=").append(String.valueOf(arfrom));
        }
        if ((arto!= null)&&(!StringUtils.isEmpty(String.valueOf(arto)))) {
            queryString.append("&").append("arto").append("=").append(String.valueOf(arto));
        }
        if ((arprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(arprefix)))) {
            queryString.append("&").append("arprefix").append("=").append(String.valueOf(arprefix));
        }
        if ((arunique!= null)&&(!StringUtils.isEmpty(String.valueOf(arunique)))) {
            queryString.append("&").append("arunique").append("=").append(String.valueOf(arunique));
        }
        if ((arprop!= null)&&(!StringUtils.isEmpty(String.valueOf(arprop)))) {
            queryString.append("&").append("arprop").append("=").append(String.valueOf(arprop));
        }
        if ((arnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(arnamespace)))) {
            queryString.append("&").append("arnamespace").append("=").append(String.valueOf(arnamespace));
        }
        if ((arlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(arlimit)))) {
            queryString.append("&").append("arlimit").append("=").append(String.valueOf(arlimit));
        }
        if ((ardir!= null)&&(!StringUtils.isEmpty(String.valueOf(ardir)))) {
            queryString.append("&").append("ardir").append("=").append(String.valueOf(ardir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllTransclusions(String format, String prop, String meta, String atcontinue, String atfrom, String atto, String atprefix, String atunique, String atprop, String atnamespace, String atlimit, String atdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=alltransclusions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((atcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(atcontinue)))) {
            queryString.append("&").append("atcontinue").append("=").append(String.valueOf(atcontinue));
        }
        if ((atfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(atfrom)))) {
            queryString.append("&").append("atfrom").append("=").append(String.valueOf(atfrom));
        }
        if ((atto!= null)&&(!StringUtils.isEmpty(String.valueOf(atto)))) {
            queryString.append("&").append("atto").append("=").append(String.valueOf(atto));
        }
        if ((atprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(atprefix)))) {
            queryString.append("&").append("atprefix").append("=").append(String.valueOf(atprefix));
        }
        if ((atunique!= null)&&(!StringUtils.isEmpty(String.valueOf(atunique)))) {
            queryString.append("&").append("atunique").append("=").append(String.valueOf(atunique));
        }
        if ((atprop!= null)&&(!StringUtils.isEmpty(String.valueOf(atprop)))) {
            queryString.append("&").append("atprop").append("=").append(String.valueOf(atprop));
        }
        if ((atnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(atnamespace)))) {
            queryString.append("&").append("atnamespace").append("=").append(String.valueOf(atnamespace));
        }
        if ((atlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(atlimit)))) {
            queryString.append("&").append("atlimit").append("=").append(String.valueOf(atlimit));
        }
        if ((atdir!= null)&&(!StringUtils.isEmpty(String.valueOf(atdir)))) {
            queryString.append("&").append("atdir").append("=").append(String.valueOf(atdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllTransclusions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllTransclusions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListAllUsers(String format, String prop, String meta, String aufrom, String auto, String auprefix, String audir, String augroup, String auexcludegroup, String aurights, String auprop, String aulimit, String auwitheditsonly, String auactiveusers, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=allusers";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((aufrom!= null)&&(!StringUtils.isEmpty(String.valueOf(aufrom)))) {
            queryString.append("&").append("aufrom").append("=").append(String.valueOf(aufrom));
        }
        if ((auto!= null)&&(!StringUtils.isEmpty(String.valueOf(auto)))) {
            queryString.append("&").append("auto").append("=").append(String.valueOf(auto));
        }
        if ((auprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(auprefix)))) {
            queryString.append("&").append("auprefix").append("=").append(String.valueOf(auprefix));
        }
        if ((audir!= null)&&(!StringUtils.isEmpty(String.valueOf(audir)))) {
            queryString.append("&").append("audir").append("=").append(String.valueOf(audir));
        }
        if ((augroup!= null)&&(!StringUtils.isEmpty(String.valueOf(augroup)))) {
            queryString.append("&").append("augroup").append("=").append(String.valueOf(augroup));
        }
        if ((auexcludegroup!= null)&&(!StringUtils.isEmpty(String.valueOf(auexcludegroup)))) {
            queryString.append("&").append("auexcludegroup").append("=").append(String.valueOf(auexcludegroup));
        }
        if ((aurights!= null)&&(!StringUtils.isEmpty(String.valueOf(aurights)))) {
            queryString.append("&").append("aurights").append("=").append(String.valueOf(aurights));
        }
        if ((auprop!= null)&&(!StringUtils.isEmpty(String.valueOf(auprop)))) {
            queryString.append("&").append("auprop").append("=").append(String.valueOf(auprop));
        }
        if ((aulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(aulimit)))) {
            queryString.append("&").append("aulimit").append("=").append(String.valueOf(aulimit));
        }
        if ((auwitheditsonly!= null)&&(!StringUtils.isEmpty(String.valueOf(auwitheditsonly)))) {
            queryString.append("&").append("auwitheditsonly").append("=").append(String.valueOf(auwitheditsonly));
        }
        if ((auactiveusers!= null)&&(!StringUtils.isEmpty(String.valueOf(auactiveusers)))) {
            queryString.append("&").append("auactiveusers").append("=").append(String.valueOf(auactiveusers));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListAllUsers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListAllUsers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListBackLinks(String format, String prop, String meta, String bltitle, String blpageid, String blcontinue, String blnamespace, String bldir, String blfilterredir, String bllimit, String blredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=backlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((bltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(bltitle)))) {
            queryString.append("&").append("bltitle").append("=").append(String.valueOf(bltitle));
        }
        if ((blpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(blpageid)))) {
            queryString.append("&").append("blpageid").append("=").append(String.valueOf(blpageid));
        }
        if ((blcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(blcontinue)))) {
            queryString.append("&").append("blcontinue").append("=").append(String.valueOf(blcontinue));
        }
        if ((blnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(blnamespace)))) {
            queryString.append("&").append("blnamespace").append("=").append(String.valueOf(blnamespace));
        }
        if ((bldir!= null)&&(!StringUtils.isEmpty(String.valueOf(bldir)))) {
            queryString.append("&").append("bldir").append("=").append(String.valueOf(bldir));
        }
        if ((blfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(blfilterredir)))) {
            queryString.append("&").append("blfilterredir").append("=").append(String.valueOf(blfilterredir));
        }
        if ((bllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(bllimit)))) {
            queryString.append("&").append("bllimit").append("=").append(String.valueOf(bllimit));
        }
        if ((blredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(blredirect)))) {
            queryString.append("&").append("blredirect").append("=").append(String.valueOf(blredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListBetaFeatures(String format, String prop, String meta, String bfcounts, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=betafeatures";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((bfcounts!= null)&&(!StringUtils.isEmpty(String.valueOf(bfcounts)))) {
            queryString.append("&").append("bfcounts").append("=").append(String.valueOf(bfcounts));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListBetaFeatures", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListBetaFeatures", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListblocks(String format, String prop, String meta, String bkstart, String bkend, String bkdir, String bkids, String bkusers, String bkip, String bklimit, String bklbkpropimit, String bkshow, String bkcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=blocks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((bkstart!= null)&&(!StringUtils.isEmpty(String.valueOf(bkstart)))) {
            queryString.append("&").append("bkstart").append("=").append(String.valueOf(bkstart));
        }
        if ((bkend!= null)&&(!StringUtils.isEmpty(String.valueOf(bkend)))) {
            queryString.append("&").append("bkend").append("=").append(String.valueOf(bkend));
        }
        if ((bkdir!= null)&&(!StringUtils.isEmpty(String.valueOf(bkdir)))) {
            queryString.append("&").append("bkdir").append("=").append(String.valueOf(bkdir));
        }
        if ((bkids!= null)&&(!StringUtils.isEmpty(String.valueOf(bkids)))) {
            queryString.append("&").append("bkids").append("=").append(String.valueOf(bkids));
        }
        if ((bkusers!= null)&&(!StringUtils.isEmpty(String.valueOf(bkusers)))) {
            queryString.append("&").append("bkusers").append("=").append(String.valueOf(bkusers));
        }
        if ((bkip!= null)&&(!StringUtils.isEmpty(String.valueOf(bkip)))) {
            queryString.append("&").append("bkip").append("=").append(String.valueOf(bkip));
        }
        if ((bklimit!= null)&&(!StringUtils.isEmpty(String.valueOf(bklimit)))) {
            queryString.append("&").append("bklimit").append("=").append(String.valueOf(bklimit));
        }
        if ((bklbkpropimit!= null)&&(!StringUtils.isEmpty(String.valueOf(bklbkpropimit)))) {
            queryString.append("&").append("bkprop").append("=").append(String.valueOf(bklbkpropimit));
        }
        if ((bkshow!= null)&&(!StringUtils.isEmpty(String.valueOf(bkshow)))) {
            queryString.append("&").append("bkshow").append("=").append(String.valueOf(bkshow));
        }
        if ((bkcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(bkcontinue)))) {
            queryString.append("&").append("bkcontinue").append("=").append(String.valueOf(bkcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListblocks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListblocks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListCategoryMembers(String format, String prop, String meta, String cmtitle, String cmpageid, String cmprop, String cmnamespace, String cmtype, String cmcontinue, String cmlimit, String cmsort, String cmdir, String cmstart, String cmend, String cmstarthexsortkey, String cmendhexsortkey, String cmstartsortkeyprefix, String cmendsortkeyprefix, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=categorymembers";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((cmtitle!= null)&&(!StringUtils.isEmpty(String.valueOf(cmtitle)))) {
            queryString.append("&").append("cmtitle").append("=").append(String.valueOf(cmtitle));
        }
        if ((cmpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(cmpageid)))) {
            queryString.append("&").append("cmpageid").append("=").append(String.valueOf(cmpageid));
        }
        if ((cmprop!= null)&&(!StringUtils.isEmpty(String.valueOf(cmprop)))) {
            queryString.append("&").append("cmprop").append("=").append(String.valueOf(cmprop));
        }
        if ((cmnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(cmnamespace)))) {
            queryString.append("&").append("cmnamespace").append("=").append(String.valueOf(cmnamespace));
        }
        if ((cmtype!= null)&&(!StringUtils.isEmpty(String.valueOf(cmtype)))) {
            queryString.append("&").append("cmtype").append("=").append(String.valueOf(cmtype));
        }
        if ((cmcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(cmcontinue)))) {
            queryString.append("&").append("cmcontinue").append("=").append(String.valueOf(cmcontinue));
        }
        if ((cmlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(cmlimit)))) {
            queryString.append("&").append("cmlimit").append("=").append(String.valueOf(cmlimit));
        }
        if ((cmsort!= null)&&(!StringUtils.isEmpty(String.valueOf(cmsort)))) {
            queryString.append("&").append("cmsort").append("=").append(String.valueOf(cmsort));
        }
        if ((cmdir!= null)&&(!StringUtils.isEmpty(String.valueOf(cmdir)))) {
            queryString.append("&").append("cmdir").append("=").append(String.valueOf(cmdir));
        }
        if ((cmstart!= null)&&(!StringUtils.isEmpty(String.valueOf(cmstart)))) {
            queryString.append("&").append("cmstart").append("=").append(String.valueOf(cmstart));
        }
        if ((cmend!= null)&&(!StringUtils.isEmpty(String.valueOf(cmend)))) {
            queryString.append("&").append("cmend").append("=").append(String.valueOf(cmend));
        }
        if ((cmstarthexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(cmstarthexsortkey)))) {
            queryString.append("&").append("cmstarthexsortkey").append("=").append(String.valueOf(cmstarthexsortkey));
        }
        if ((cmendhexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(cmendhexsortkey)))) {
            queryString.append("&").append("cmendhexsortkey").append("=").append(String.valueOf(cmendhexsortkey));
        }
        if ((cmstartsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(cmstartsortkeyprefix)))) {
            queryString.append("&").append("cmstartsortkeyprefix").append("=").append(String.valueOf(cmstartsortkeyprefix));
        }
        if ((cmendsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(cmendsortkeyprefix)))) {
            queryString.append("&").append("cmendsortkeyprefix").append("=").append(String.valueOf(cmendsortkeyprefix));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListCategoryMembers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListCategoryMembers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListCentralNoticeLogs(String format, String prop, String meta, String campaign, String user, String limit, String offset, String start, String end, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=centralnoticelogs";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((campaign!= null)&&(!StringUtils.isEmpty(String.valueOf(campaign)))) {
            queryString.append("&").append("campaign").append("=").append(String.valueOf(campaign));
        }
        if ((user!= null)&&(!StringUtils.isEmpty(String.valueOf(user)))) {
            queryString.append("&").append("user").append("=").append(String.valueOf(user));
        }
        if ((limit!= null)&&(!StringUtils.isEmpty(String.valueOf(limit)))) {
            queryString.append("&").append("limit").append("=").append(String.valueOf(limit));
        }
        if ((offset!= null)&&(!StringUtils.isEmpty(String.valueOf(offset)))) {
            queryString.append("&").append("offset").append("=").append(String.valueOf(offset));
        }
        if ((start!= null)&&(!StringUtils.isEmpty(String.valueOf(start)))) {
            queryString.append("&").append("start").append("=").append(String.valueOf(start));
        }
        if ((end!= null)&&(!StringUtils.isEmpty(String.valueOf(end)))) {
            queryString.append("&").append("end").append("=").append(String.valueOf(end));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListCentralNoticeLogs", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListCentralNoticeLogs", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListCheckUser(String format, String prop, String meta, String curequest, String cutarget, String cureason, String culimit, String cutimecond, String cuxff, String cutoken, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=checkuser";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((curequest!= null)&&(!StringUtils.isEmpty(String.valueOf(curequest)))) {
            queryString.append("&").append("curequest").append("=").append(String.valueOf(curequest));
        }
        if ((cutarget!= null)&&(!StringUtils.isEmpty(String.valueOf(cutarget)))) {
            queryString.append("&").append("cutarget").append("=").append(String.valueOf(cutarget));
        }
        if ((cureason!= null)&&(!StringUtils.isEmpty(String.valueOf(cureason)))) {
            queryString.append("&").append("cureason").append("=").append(String.valueOf(cureason));
        }
        if ((culimit!= null)&&(!StringUtils.isEmpty(String.valueOf(culimit)))) {
            queryString.append("&").append("culimit").append("=").append(String.valueOf(culimit));
        }
        if ((cutimecond!= null)&&(!StringUtils.isEmpty(String.valueOf(cutimecond)))) {
            queryString.append("&").append("cutimecond").append("=").append(String.valueOf(cutimecond));
        }
        if ((cuxff!= null)&&(!StringUtils.isEmpty(String.valueOf(cuxff)))) {
            queryString.append("&").append("cuxff").append("=").append(String.valueOf(cuxff));
        }
        if ((cutoken!= null)&&(!StringUtils.isEmpty(String.valueOf(cutoken)))) {
            queryString.append("&").append("cutoken").append("=").append(String.valueOf(cutoken));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListCheckUser", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListCheckUser", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListCheckUserLog(String format, String prop, String meta, String culuser, String cultarget, String cullimit, String culdir, String culfrom, String culto, String culcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=checkuserlog";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((culuser!= null)&&(!StringUtils.isEmpty(String.valueOf(culuser)))) {
            queryString.append("&").append("culuser").append("=").append(String.valueOf(culuser));
        }
        if ((cultarget!= null)&&(!StringUtils.isEmpty(String.valueOf(cultarget)))) {
            queryString.append("&").append("cultarget").append("=").append(String.valueOf(cultarget));
        }
        if ((cullimit!= null)&&(!StringUtils.isEmpty(String.valueOf(cullimit)))) {
            queryString.append("&").append("cullimit").append("=").append(String.valueOf(cullimit));
        }
        if ((culdir!= null)&&(!StringUtils.isEmpty(String.valueOf(culdir)))) {
            queryString.append("&").append("culdir").append("=").append(String.valueOf(culdir));
        }
        if ((culfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(culfrom)))) {
            queryString.append("&").append("culfrom").append("=").append(String.valueOf(culfrom));
        }
        if ((culto!= null)&&(!StringUtils.isEmpty(String.valueOf(culto)))) {
            queryString.append("&").append("culto").append("=").append(String.valueOf(culto));
        }
        if ((culcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(culcontinue)))) {
            queryString.append("&").append("culcontinue").append("=").append(String.valueOf(culcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListCheckUserLog", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListCheckUserLog", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListdeletedrevs(String format, String prop, String meta, String drstart, String drend, String drdir, String drfrom, String drto, String drprefix, String drunique, String drnamespace, String drtag, String druser, String drexcludeuser, String drprop, String drlimit, String drcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=deletedrevs";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((drstart!= null)&&(!StringUtils.isEmpty(String.valueOf(drstart)))) {
            queryString.append("&").append("drstart").append("=").append(String.valueOf(drstart));
        }
        if ((drend!= null)&&(!StringUtils.isEmpty(String.valueOf(drend)))) {
            queryString.append("&").append("drend").append("=").append(String.valueOf(drend));
        }
        if ((drdir!= null)&&(!StringUtils.isEmpty(String.valueOf(drdir)))) {
            queryString.append("&").append("drdir").append("=").append(String.valueOf(drdir));
        }
        if ((drfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(drfrom)))) {
            queryString.append("&").append("drfrom").append("=").append(String.valueOf(drfrom));
        }
        if ((drto!= null)&&(!StringUtils.isEmpty(String.valueOf(drto)))) {
            queryString.append("&").append("drto").append("=").append(String.valueOf(drto));
        }
        if ((drprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(drprefix)))) {
            queryString.append("&").append("drprefix").append("=").append(String.valueOf(drprefix));
        }
        if ((drunique!= null)&&(!StringUtils.isEmpty(String.valueOf(drunique)))) {
            queryString.append("&").append("drunique").append("=").append(String.valueOf(drunique));
        }
        if ((drnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(drnamespace)))) {
            queryString.append("&").append("drnamespace").append("=").append(String.valueOf(drnamespace));
        }
        if ((drtag!= null)&&(!StringUtils.isEmpty(String.valueOf(drtag)))) {
            queryString.append("&").append("drtag").append("=").append(String.valueOf(drtag));
        }
        if ((druser!= null)&&(!StringUtils.isEmpty(String.valueOf(druser)))) {
            queryString.append("&").append("druser").append("=").append(String.valueOf(druser));
        }
        if ((drexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(drexcludeuser)))) {
            queryString.append("&").append("drexcludeuser").append("=").append(String.valueOf(drexcludeuser));
        }
        if ((drprop!= null)&&(!StringUtils.isEmpty(String.valueOf(drprop)))) {
            queryString.append("&").append("drprop").append("=").append(String.valueOf(drprop));
        }
        if ((drlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(drlimit)))) {
            queryString.append("&").append("drlimit").append("=").append(String.valueOf(drlimit));
        }
        if ((drcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(drcontinue)))) {
            queryString.append("&").append("drcontinue").append("=").append(String.valueOf(drcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListdeletedrevs", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListdeletedrevs", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListEmbeddedIn(String format, String prop, String meta, String eititle, String eipageid, String eicontinue, String einamespace, String eidir, String eifilterredir, String eilimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=embeddedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((eititle!= null)&&(!StringUtils.isEmpty(String.valueOf(eititle)))) {
            queryString.append("&").append("eititle").append("=").append(String.valueOf(eititle));
        }
        if ((eipageid!= null)&&(!StringUtils.isEmpty(String.valueOf(eipageid)))) {
            queryString.append("&").append("eipageid").append("=").append(String.valueOf(eipageid));
        }
        if ((eicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(eicontinue)))) {
            queryString.append("&").append("eicontinue").append("=").append(String.valueOf(eicontinue));
        }
        if ((einamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(einamespace)))) {
            queryString.append("&").append("einamespace").append("=").append(String.valueOf(einamespace));
        }
        if ((eidir!= null)&&(!StringUtils.isEmpty(String.valueOf(eidir)))) {
            queryString.append("&").append("eidir").append("=").append(String.valueOf(eidir));
        }
        if ((eifilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(eifilterredir)))) {
            queryString.append("&").append("eifilterredir").append("=").append(String.valueOf(eifilterredir));
        }
        if ((eilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(eilimit)))) {
            queryString.append("&").append("eilimit").append("=").append(String.valueOf(eilimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListEmbeddedIn", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListEmbeddedIn", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListExturlusage(String format, String prop, String meta, String euprop, String euoffset, String euprotocol, String euquery, String eunamespace, String eulimit, String euexpandurl, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=exturlusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((euprop!= null)&&(!StringUtils.isEmpty(String.valueOf(euprop)))) {
            queryString.append("&").append("euprop").append("=").append(String.valueOf(euprop));
        }
        if ((euoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(euoffset)))) {
            queryString.append("&").append("euoffset").append("=").append(String.valueOf(euoffset));
        }
        if ((euprotocol!= null)&&(!StringUtils.isEmpty(String.valueOf(euprotocol)))) {
            queryString.append("&").append("euprotocol").append("=").append(String.valueOf(euprotocol));
        }
        if ((euquery!= null)&&(!StringUtils.isEmpty(String.valueOf(euquery)))) {
            queryString.append("&").append("euquery").append("=").append(String.valueOf(euquery));
        }
        if ((eunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(eunamespace)))) {
            queryString.append("&").append("eunamespace").append("=").append(String.valueOf(eunamespace));
        }
        if ((eulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(eulimit)))) {
            queryString.append("&").append("eulimit").append("=").append(String.valueOf(eulimit));
        }
        if ((euexpandurl!= null)&&(!StringUtils.isEmpty(String.valueOf(euexpandurl)))) {
            queryString.append("&").append("euexpandurl").append("=").append(String.valueOf(euexpandurl));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListExturlusage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListExturlusage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListFileArchive(String format, String prop, String meta, String fafrom, String fato, String faprefix, String fadir, String fasha1, String fasha1base36, String faprop, String falimit, String facontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=filearchive";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((fafrom!= null)&&(!StringUtils.isEmpty(String.valueOf(fafrom)))) {
            queryString.append("&").append("fafrom").append("=").append(String.valueOf(fafrom));
        }
        if ((fato!= null)&&(!StringUtils.isEmpty(String.valueOf(fato)))) {
            queryString.append("&").append("fato").append("=").append(String.valueOf(fato));
        }
        if ((faprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(faprefix)))) {
            queryString.append("&").append("faprefix").append("=").append(String.valueOf(faprefix));
        }
        if ((fadir!= null)&&(!StringUtils.isEmpty(String.valueOf(fadir)))) {
            queryString.append("&").append("fadir").append("=").append(String.valueOf(fadir));
        }
        if ((fasha1 != null)&&(!StringUtils.isEmpty(String.valueOf(fasha1)))) {
            queryString.append("&").append("fasha1").append("=").append(String.valueOf(fasha1));
        }
        if ((fasha1base36 != null)&&(!StringUtils.isEmpty(String.valueOf(fasha1base36)))) {
            queryString.append("&").append("fasha1base36").append("=").append(String.valueOf(fasha1base36));
        }
        if ((faprop!= null)&&(!StringUtils.isEmpty(String.valueOf(faprop)))) {
            queryString.append("&").append("faprop").append("=").append(String.valueOf(faprop));
        }
        if ((falimit!= null)&&(!StringUtils.isEmpty(String.valueOf(falimit)))) {
            queryString.append("&").append("falimit").append("=").append(String.valueOf(falimit));
        }
        if ((facontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(facontinue)))) {
            queryString.append("&").append("facontinue").append("=").append(String.valueOf(facontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListFileArchive", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListFileArchive", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListGadgetCategories(String format, String prop, String meta, String gcprop, String gcnames, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=gadgetcategories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((gcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gcprop)))) {
            queryString.append("&").append("gcprop").append("=").append(String.valueOf(gcprop));
        }
        if ((gcnames!= null)&&(!StringUtils.isEmpty(String.valueOf(gcnames)))) {
            queryString.append("&").append("gcnames").append("=").append(String.valueOf(gcnames));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListGadgetCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListGadgetCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListGadgets(String format, String prop, String meta, String gaprop, String gacategories, String gaids, String gaallowedonly, String gaenabledonly, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=gadgets";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((gaprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gaprop)))) {
            queryString.append("&").append("gaprop").append("=").append(String.valueOf(gaprop));
        }
        if ((gacategories!= null)&&(!StringUtils.isEmpty(String.valueOf(gacategories)))) {
            queryString.append("&").append("gacategories").append("=").append(String.valueOf(gacategories));
        }
        if ((gaids!= null)&&(!StringUtils.isEmpty(String.valueOf(gaids)))) {
            queryString.append("&").append("gaids").append("=").append(String.valueOf(gaids));
        }
        if ((gaallowedonly!= null)&&(!StringUtils.isEmpty(String.valueOf(gaallowedonly)))) {
            queryString.append("&").append("gaallowedonly").append("=").append(String.valueOf(gaallowedonly));
        }
        if ((gaenabledonly!= null)&&(!StringUtils.isEmpty(String.valueOf(gaenabledonly)))) {
            queryString.append("&").append("gaenabledonly").append("=").append(String.valueOf(gaenabledonly));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListGadgets", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListGadgets", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListGlobalAllUsers(String format, String prop, String meta, String agufrom, String aguto, String aguprefix, String agudir, String agugroup, String aguexcludegroup, String aguprop, String agulimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=globalallusers";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((agufrom!= null)&&(!StringUtils.isEmpty(String.valueOf(agufrom)))) {
            queryString.append("&").append("agufrom").append("=").append(String.valueOf(agufrom));
        }
        if ((aguto!= null)&&(!StringUtils.isEmpty(String.valueOf(aguto)))) {
            queryString.append("&").append("aguto").append("=").append(String.valueOf(aguto));
        }
        if ((aguprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(aguprefix)))) {
            queryString.append("&").append("aguprefix").append("=").append(String.valueOf(aguprefix));
        }
        if ((agudir!= null)&&(!StringUtils.isEmpty(String.valueOf(agudir)))) {
            queryString.append("&").append("agudir").append("=").append(String.valueOf(agudir));
        }
        if ((agugroup!= null)&&(!StringUtils.isEmpty(String.valueOf(agugroup)))) {
            queryString.append("&").append("agugroup").append("=").append(String.valueOf(agugroup));
        }
        if ((aguexcludegroup!= null)&&(!StringUtils.isEmpty(String.valueOf(aguexcludegroup)))) {
            queryString.append("&").append("aguexcludegroup").append("=").append(String.valueOf(aguexcludegroup));
        }
        if ((aguprop!= null)&&(!StringUtils.isEmpty(String.valueOf(aguprop)))) {
            queryString.append("&").append("aguprop").append("=").append(String.valueOf(aguprop));
        }
        if ((agulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(agulimit)))) {
            queryString.append("&").append("agulimit").append("=").append(String.valueOf(agulimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListGlobalAllUsers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListGlobalAllUsers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListGlobalBlocks(String format, String prop, String meta, String bgstart, String bgend, String bgdir, String bgids, String bgaddresses, String bgip, String bglimit, String bgprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=globalblocks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((bgstart!= null)&&(!StringUtils.isEmpty(String.valueOf(bgstart)))) {
            queryString.append("&").append("bgstart").append("=").append(String.valueOf(bgstart));
        }
        if ((bgend!= null)&&(!StringUtils.isEmpty(String.valueOf(bgend)))) {
            queryString.append("&").append("bgend").append("=").append(String.valueOf(bgend));
        }
        if ((bgdir!= null)&&(!StringUtils.isEmpty(String.valueOf(bgdir)))) {
            queryString.append("&").append("bgdir").append("=").append(String.valueOf(bgdir));
        }
        if ((bgids!= null)&&(!StringUtils.isEmpty(String.valueOf(bgids)))) {
            queryString.append("&").append("bgids").append("=").append(String.valueOf(bgids));
        }
        if ((bgaddresses!= null)&&(!StringUtils.isEmpty(String.valueOf(bgaddresses)))) {
            queryString.append("&").append("bgaddresses").append("=").append(String.valueOf(bgaddresses));
        }
        if ((bgip!= null)&&(!StringUtils.isEmpty(String.valueOf(bgip)))) {
            queryString.append("&").append("bgip").append("=").append(String.valueOf(bgip));
        }
        if ((bglimit!= null)&&(!StringUtils.isEmpty(String.valueOf(bglimit)))) {
            queryString.append("&").append("bglimit").append("=").append(String.valueOf(bglimit));
        }
        if ((bgprop!= null)&&(!StringUtils.isEmpty(String.valueOf(bgprop)))) {
            queryString.append("&").append("bgprop").append("=").append(String.valueOf(bgprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListGlobalBlocks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListGlobalBlocks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListGlobalGroups(String format, String prop, String meta, String ggpprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=globalgroups";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((ggpprop!= null)&&(!StringUtils.isEmpty(String.valueOf(ggpprop)))) {
            queryString.append("&").append("ggpprop").append("=").append(String.valueOf(ggpprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListGlobalGroups", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListGlobalGroups", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListImageUsage(String format, String prop, String meta, String iutitle, String iupageid, String iucontinue, String iunamespace, String iudir, String iufilterredir, String iulimit, String iuredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=imageusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((iutitle!= null)&&(!StringUtils.isEmpty(String.valueOf(iutitle)))) {
            queryString.append("&").append("iutitle").append("=").append(String.valueOf(iutitle));
        }
        if ((iupageid!= null)&&(!StringUtils.isEmpty(String.valueOf(iupageid)))) {
            queryString.append("&").append("iupageid").append("=").append(String.valueOf(iupageid));
        }
        if ((iucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(iucontinue)))) {
            queryString.append("&").append("iucontinue").append("=").append(String.valueOf(iucontinue));
        }
        if ((iunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(iunamespace)))) {
            queryString.append("&").append("iunamespace").append("=").append(String.valueOf(iunamespace));
        }
        if ((iudir!= null)&&(!StringUtils.isEmpty(String.valueOf(iudir)))) {
            queryString.append("&").append("iudir").append("=").append(String.valueOf(iudir));
        }
        if ((iufilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(iufilterredir)))) {
            queryString.append("&").append("iufilterredir").append("=").append(String.valueOf(iufilterredir));
        }
        if ((iulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(iulimit)))) {
            queryString.append("&").append("iulimit").append("=").append(String.valueOf(iulimit));
        }
        if ((iuredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(iuredirect)))) {
            queryString.append("&").append("iuredirect").append("=").append(String.valueOf(iuredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListImageUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListImageUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListIwBackLinks(String format, String prop, String meta, String iwblprefix, String iwbltitle, String iwblcontinue, String iwbllimit, String iwblprop, String iwbldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=iwbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((iwblprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(iwblprefix)))) {
            queryString.append("&").append("iwblprefix").append("=").append(String.valueOf(iwblprefix));
        }
        if ((iwbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(iwbltitle)))) {
            queryString.append("&").append("iwbltitle").append("=").append(String.valueOf(iwbltitle));
        }
        if ((iwblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(iwblcontinue)))) {
            queryString.append("&").append("iwblcontinue").append("=").append(String.valueOf(iwblcontinue));
        }
        if ((iwbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(iwbllimit)))) {
            queryString.append("&").append("iwbllimit").append("=").append(String.valueOf(iwbllimit));
        }
        if ((iwblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(iwblprop)))) {
            queryString.append("&").append("iwblprop").append("=").append(String.valueOf(iwblprop));
        }
        if ((iwbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(iwbldir)))) {
            queryString.append("&").append("iwbldir").append("=").append(String.valueOf(iwbldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListIwBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListIwBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListlangbacklinks(String format, String prop, String meta, String lbllang, String lbltitle, String lblcontinue, String lbllimit, String lblprop, String lbldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=langbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((lbllang!= null)&&(!StringUtils.isEmpty(String.valueOf(lbllang)))) {
            queryString.append("&").append("lbllang").append("=").append(String.valueOf(lbllang));
        }
        if ((lbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(lbltitle)))) {
            queryString.append("&").append("lbltitle").append("=").append(String.valueOf(lbltitle));
        }
        if ((lblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(lblcontinue)))) {
            queryString.append("&").append("lblcontinue").append("=").append(String.valueOf(lblcontinue));
        }
        if ((lbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(lbllimit)))) {
            queryString.append("&").append("lbllimit").append("=").append(String.valueOf(lbllimit));
        }
        if ((lblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(lblprop)))) {
            queryString.append("&").append("lblprop").append("=").append(String.valueOf(lblprop));
        }
        if ((lbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(lbldir)))) {
            queryString.append("&").append("lbldir").append("=").append(String.valueOf(lbldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListlangbacklinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListlangbacklinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListLogEvents(String format, String prop, String meta, String leprop, String letype, String leaction, String lestart, String leend, String ledir, String leuser, String letitle, String lenamespace, String leprefix, String letag, String lelimit, String lecontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=logevents";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((leprop!= null)&&(!StringUtils.isEmpty(String.valueOf(leprop)))) {
            queryString.append("&").append("leprop").append("=").append(String.valueOf(leprop));
        }
        if ((letype!= null)&&(!StringUtils.isEmpty(String.valueOf(letype)))) {
            queryString.append("&").append("letype").append("=").append(String.valueOf(letype));
        }
        if ((leaction!= null)&&(!StringUtils.isEmpty(String.valueOf(leaction)))) {
            queryString.append("&").append("leaction").append("=").append(String.valueOf(leaction));
        }
        if ((lestart!= null)&&(!StringUtils.isEmpty(String.valueOf(lestart)))) {
            queryString.append("&").append("lestart").append("=").append(String.valueOf(lestart));
        }
        if ((leend!= null)&&(!StringUtils.isEmpty(String.valueOf(leend)))) {
            queryString.append("&").append("leend").append("=").append(String.valueOf(leend));
        }
        if ((ledir!= null)&&(!StringUtils.isEmpty(String.valueOf(ledir)))) {
            queryString.append("&").append("ledir").append("=").append(String.valueOf(ledir));
        }
        if ((leuser!= null)&&(!StringUtils.isEmpty(String.valueOf(leuser)))) {
            queryString.append("&").append("leuser").append("=").append(String.valueOf(leuser));
        }
        if ((letitle!= null)&&(!StringUtils.isEmpty(String.valueOf(letitle)))) {
            queryString.append("&").append("letitle").append("=").append(String.valueOf(letitle));
        }
        if ((lenamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(lenamespace)))) {
            queryString.append("&").append("lenamespace").append("=").append(String.valueOf(lenamespace));
        }
        if ((leprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(leprefix)))) {
            queryString.append("&").append("leprefix").append("=").append(String.valueOf(leprefix));
        }
        if ((letag!= null)&&(!StringUtils.isEmpty(String.valueOf(letag)))) {
            queryString.append("&").append("letag").append("=").append(String.valueOf(letag));
        }
        if ((lelimit!= null)&&(!StringUtils.isEmpty(String.valueOf(lelimit)))) {
            queryString.append("&").append("lelimit").append("=").append(String.valueOf(lelimit));
        }
        if ((lecontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(lecontinue)))) {
            queryString.append("&").append("lecontinue").append("=").append(String.valueOf(lecontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListLogEvents", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListLogEvents", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListMessageCollection(String format, String prop, String meta, String mcgroup, String mclanguage, String mclimit, String mcoffset, String mcfilter, String mcprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=messagecollection";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((mcgroup!= null)&&(!StringUtils.isEmpty(String.valueOf(mcgroup)))) {
            queryString.append("&").append("mcgroup").append("=").append(String.valueOf(mcgroup));
        }
        if ((mclanguage!= null)&&(!StringUtils.isEmpty(String.valueOf(mclanguage)))) {
            queryString.append("&").append("mclanguage").append("=").append(String.valueOf(mclanguage));
        }
        if ((mclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(mclimit)))) {
            queryString.append("&").append("mclimit").append("=").append(String.valueOf(mclimit));
        }
        if ((mcoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(mcoffset)))) {
            queryString.append("&").append("mcoffset").append("=").append(String.valueOf(mcoffset));
        }
        if ((mcfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(mcfilter)))) {
            queryString.append("&").append("mcfilter").append("=").append(String.valueOf(mcfilter));
        }
        if ((mcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(mcprop)))) {
            queryString.append("&").append("mcprop").append("=").append(String.valueOf(mcprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListMessageCollection", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListMessageCollection", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListmmsites(String format, String prop, String meta, String term, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=mmsites";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((term!= null)&&(!StringUtils.isEmpty(String.valueOf(term)))) {
            queryString.append("&").append("term").append("=").append(String.valueOf(term));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListmmsites", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListmmsites", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListPagePropNames(String format, String prop, String meta, String ppncontinue, String ppnlimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=pagepropnames";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((ppncontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ppncontinue)))) {
            queryString.append("&").append("ppncontinue").append("=").append(String.valueOf(ppncontinue));
        }
        if ((ppnlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(ppnlimit)))) {
            queryString.append("&").append("ppnlimit").append("=").append(String.valueOf(ppnlimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListPagePropNames", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListPagePropNames", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListPageswithprop(String format, String prop, String meta, String pwppropname, String pwpprop, String pwpcontinue, String pwplimit, String pwpdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=pageswithprop";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((pwppropname!= null)&&(!StringUtils.isEmpty(String.valueOf(pwppropname)))) {
            queryString.append("&").append("pwppropname").append("=").append(String.valueOf(pwppropname));
        }
        if ((pwpprop!= null)&&(!StringUtils.isEmpty(String.valueOf(pwpprop)))) {
            queryString.append("&").append("pwpprop").append("=").append(String.valueOf(pwpprop));
        }
        if ((pwpcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(pwpcontinue)))) {
            queryString.append("&").append("pwpcontinue").append("=").append(String.valueOf(pwpcontinue));
        }
        if ((pwplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(pwplimit)))) {
            queryString.append("&").append("pwplimit").append("=").append(String.valueOf(pwplimit));
        }
        if ((pwpdir!= null)&&(!StringUtils.isEmpty(String.valueOf(pwpdir)))) {
            queryString.append("&").append("pwpdir").append("=").append(String.valueOf(pwpdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListPageswithprop", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListPageswithprop", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListPrefixSearch(String format, String prop, String meta, String pssearch, String psnamespace, String pslimit, String psoffset, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=prefixsearch";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((pssearch!= null)&&(!StringUtils.isEmpty(String.valueOf(pssearch)))) {
            queryString.append("&").append("pssearch").append("=").append(String.valueOf(pssearch));
        }
        if ((psnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(psnamespace)))) {
            queryString.append("&").append("psnamespace").append("=").append(String.valueOf(psnamespace));
        }
        if ((pslimit!= null)&&(!StringUtils.isEmpty(String.valueOf(pslimit)))) {
            queryString.append("&").append("pslimit").append("=").append(String.valueOf(pslimit));
        }
        if ((psoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(psoffset)))) {
            queryString.append("&").append("psoffset").append("=").append(String.valueOf(psoffset));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListPrefixSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListPrefixSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListProtectedTitles(String format, String prop, String meta, String ptnamespace, String ptlevel, String gptlimit, String ptdir, String ptstart, String ptend, String ptprop, String ptcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=protectedtitles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((ptnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(ptnamespace)))) {
            queryString.append("&").append("ptnamespace").append("=").append(String.valueOf(ptnamespace));
        }
        if ((ptlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(ptlevel)))) {
            queryString.append("&").append("ptlevel").append("=").append(String.valueOf(ptlevel));
        }
        if ((gptlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gptlimit)))) {
            queryString.append("&").append("ptlimit").append("=").append(String.valueOf(gptlimit));
        }
        if ((ptdir!= null)&&(!StringUtils.isEmpty(String.valueOf(ptdir)))) {
            queryString.append("&").append("ptdir").append("=").append(String.valueOf(ptdir));
        }
        if ((ptstart!= null)&&(!StringUtils.isEmpty(String.valueOf(ptstart)))) {
            queryString.append("&").append("ptstart").append("=").append(String.valueOf(ptstart));
        }
        if ((ptend!= null)&&(!StringUtils.isEmpty(String.valueOf(ptend)))) {
            queryString.append("&").append("ptend").append("=").append(String.valueOf(ptend));
        }
        if ((ptprop!= null)&&(!StringUtils.isEmpty(String.valueOf(ptprop)))) {
            queryString.append("&").append("ptprop").append("=").append(String.valueOf(ptprop));
        }
        if ((ptcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ptcontinue)))) {
            queryString.append("&").append("ptcontinue").append("=").append(String.valueOf(ptcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListProtectedTitles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListProtectedTitles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListQueryPage(String format, String prop, String meta, String qppage, String qpoffset, String qplimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=querypage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((qppage!= null)&&(!StringUtils.isEmpty(String.valueOf(qppage)))) {
            queryString.append("&").append("qppage").append("=").append(String.valueOf(qppage));
        }
        if ((qpoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(qpoffset)))) {
            queryString.append("&").append("qpoffset").append("=").append(String.valueOf(qpoffset));
        }
        if ((qplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(qplimit)))) {
            queryString.append("&").append("qplimit").append("=").append(String.valueOf(qplimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListQueryPage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListQueryPage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListRandom(String format, String prop, String meta, String rnnamespace, String rnlimit, String rnredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=random";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((rnnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(rnnamespace)))) {
            queryString.append("&").append("rnnamespace").append("=").append(String.valueOf(rnnamespace));
        }
        if ((rnlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(rnlimit)))) {
            queryString.append("&").append("rnlimit").append("=").append(String.valueOf(rnlimit));
        }
        if ((rnredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(rnredirect)))) {
            queryString.append("&").append("rnredirect").append("=").append(String.valueOf(rnredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListRandom", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListRandom", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListRecentChanges(String format, String prop, String meta, String rcstart, String rcend, String rcdir, String rcnamespace, String rcuser, String rcexcludeuser, String rctag, String rcprop, String rcshow, String rclimit, String rctype, String rctoponly, String rccontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=recentchanges";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((rcstart!= null)&&(!StringUtils.isEmpty(String.valueOf(rcstart)))) {
            queryString.append("&").append("rcstart").append("=").append(String.valueOf(rcstart));
        }
        if ((rcend!= null)&&(!StringUtils.isEmpty(String.valueOf(rcend)))) {
            queryString.append("&").append("rcend").append("=").append(String.valueOf(rcend));
        }
        if ((rcdir!= null)&&(!StringUtils.isEmpty(String.valueOf(rcdir)))) {
            queryString.append("&").append("rcdir").append("=").append(String.valueOf(rcdir));
        }
        if ((rcnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(rcnamespace)))) {
            queryString.append("&").append("rcnamespace").append("=").append(String.valueOf(rcnamespace));
        }
        if ((rcuser!= null)&&(!StringUtils.isEmpty(String.valueOf(rcuser)))) {
            queryString.append("&").append("rcuser").append("=").append(String.valueOf(rcuser));
        }
        if ((rcexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(rcexcludeuser)))) {
            queryString.append("&").append("rcexcludeuser").append("=").append(String.valueOf(rcexcludeuser));
        }
        if ((rctag!= null)&&(!StringUtils.isEmpty(String.valueOf(rctag)))) {
            queryString.append("&").append("rctag").append("=").append(String.valueOf(rctag));
        }
        if ((rcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(rcprop)))) {
            queryString.append("&").append("rcprop").append("=").append(String.valueOf(rcprop));
        }
        if ((rcshow!= null)&&(!StringUtils.isEmpty(String.valueOf(rcshow)))) {
            queryString.append("&").append("rcshow").append("=").append(String.valueOf(rcshow));
        }
        if ((rclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(rclimit)))) {
            queryString.append("&").append("rclimit").append("=").append(String.valueOf(rclimit));
        }
        if ((rctype!= null)&&(!StringUtils.isEmpty(String.valueOf(rctype)))) {
            queryString.append("&").append("rctype").append("=").append(String.valueOf(rctype));
        }
        if ((rctoponly!= null)&&(!StringUtils.isEmpty(String.valueOf(rctoponly)))) {
            queryString.append("&").append("rctoponly").append("=").append(String.valueOf(rctoponly));
        }
        if ((rccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(rccontinue)))) {
            queryString.append("&").append("rccontinue").append("=").append(String.valueOf(rccontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListRecentChanges", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListRecentChanges", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListSearch(String format, String prop, String meta, String srsearch, String srnamespace, String srwhat, String srinfo, String srprop, String sroffset, String srlimit, String srinterwiki, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=search";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((srsearch!= null)&&(!StringUtils.isEmpty(String.valueOf(srsearch)))) {
            queryString.append("&").append("srsearch").append("=").append(String.valueOf(srsearch));
        }
        if ((srnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(srnamespace)))) {
            queryString.append("&").append("srnamespace").append("=").append(String.valueOf(srnamespace));
        }
        if ((srwhat!= null)&&(!StringUtils.isEmpty(String.valueOf(srwhat)))) {
            queryString.append("&").append("srwhat").append("=").append(String.valueOf(srwhat));
        }
        if ((srinfo!= null)&&(!StringUtils.isEmpty(String.valueOf(srinfo)))) {
            queryString.append("&").append("srinfo").append("=").append(String.valueOf(srinfo));
        }
        if ((srprop!= null)&&(!StringUtils.isEmpty(String.valueOf(srprop)))) {
            queryString.append("&").append("srprop").append("=").append(String.valueOf(srprop));
        }
        if ((sroffset!= null)&&(!StringUtils.isEmpty(String.valueOf(sroffset)))) {
            queryString.append("&").append("sroffset").append("=").append(String.valueOf(sroffset));
        }
        if ((srlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(srlimit)))) {
            queryString.append("&").append("srlimit").append("=").append(String.valueOf(srlimit));
        }
        if ((srinterwiki!= null)&&(!StringUtils.isEmpty(String.valueOf(srinterwiki)))) {
            queryString.append("&").append("srinterwiki").append("=").append(String.valueOf(srinterwiki));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListTags(String format, String prop, String meta, String tgcontinue, String tglimit, String tgprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=tags";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((tgcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(tgcontinue)))) {
            queryString.append("&").append("tgcontinue").append("=").append(String.valueOf(tgcontinue));
        }
        if ((tglimit!= null)&&(!StringUtils.isEmpty(String.valueOf(tglimit)))) {
            queryString.append("&").append("tglimit").append("=").append(String.valueOf(tglimit));
        }
        if ((tgprop!= null)&&(!StringUtils.isEmpty(String.valueOf(tgprop)))) {
            queryString.append("&").append("tgprop").append("=").append(String.valueOf(tgprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListTags", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListTags", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListUserContribs(String format, String prop, String meta, String uclimit, String ucstart, String ucend, String uccontinue, String ucuser, String ucuserprefix, String ucdir, String ucnamespace, String ucprop, String ucshow, String uctag, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=usercontribs";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((uclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(uclimit)))) {
            queryString.append("&").append("uclimit").append("=").append(String.valueOf(uclimit));
        }
        if ((ucstart!= null)&&(!StringUtils.isEmpty(String.valueOf(ucstart)))) {
            queryString.append("&").append("ucstart").append("=").append(String.valueOf(ucstart));
        }
        if ((ucend!= null)&&(!StringUtils.isEmpty(String.valueOf(ucend)))) {
            queryString.append("&").append("ucend").append("=").append(String.valueOf(ucend));
        }
        if ((uccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(uccontinue)))) {
            queryString.append("&").append("uccontinue").append("=").append(String.valueOf(uccontinue));
        }
        if ((ucuser!= null)&&(!StringUtils.isEmpty(String.valueOf(ucuser)))) {
            queryString.append("&").append("ucuser").append("=").append(String.valueOf(ucuser));
        }
        if ((ucuserprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(ucuserprefix)))) {
            queryString.append("&").append("ucuserprefix").append("=").append(String.valueOf(ucuserprefix));
        }
        if ((ucdir!= null)&&(!StringUtils.isEmpty(String.valueOf(ucdir)))) {
            queryString.append("&").append("ucdir").append("=").append(String.valueOf(ucdir));
        }
        if ((ucnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(ucnamespace)))) {
            queryString.append("&").append("ucnamespace").append("=").append(String.valueOf(ucnamespace));
        }
        if ((ucprop!= null)&&(!StringUtils.isEmpty(String.valueOf(ucprop)))) {
            queryString.append("&").append("ucprop").append("=").append(String.valueOf(ucprop));
        }
        if ((ucshow!= null)&&(!StringUtils.isEmpty(String.valueOf(ucshow)))) {
            queryString.append("&").append("ucshow").append("=").append(String.valueOf(ucshow));
        }
        if ((uctag!= null)&&(!StringUtils.isEmpty(String.valueOf(uctag)))) {
            queryString.append("&").append("uctag").append("=").append(String.valueOf(uctag));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListUserContribs", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListUserContribs", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListUsers(String format, String prop, String meta, String usprop, String ususers, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=users";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((usprop!= null)&&(!StringUtils.isEmpty(String.valueOf(usprop)))) {
            queryString.append("&").append("usprop").append("=").append(String.valueOf(usprop));
        }
        if ((ususers!= null)&&(!StringUtils.isEmpty(String.valueOf(ususers)))) {
            queryString.append("&").append("ususers").append("=").append(String.valueOf(ususers));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListUsers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListUsers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListWatchList(String format, String prop, String meta, String wlallrev, String wlstart, String wlend, String wlnamespace, String wluser, String wlexcludeuser, String wldir, String wllimit, String wlprop, String wlshow, String wltype, String wlowner, String wltoken, String wlcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=watchlist";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((wlallrev!= null)&&(!StringUtils.isEmpty(String.valueOf(wlallrev)))) {
            queryString.append("&").append("wlallrev").append("=").append(String.valueOf(wlallrev));
        }
        if ((wlstart!= null)&&(!StringUtils.isEmpty(String.valueOf(wlstart)))) {
            queryString.append("&").append("wlstart").append("=").append(String.valueOf(wlstart));
        }
        if ((wlend!= null)&&(!StringUtils.isEmpty(String.valueOf(wlend)))) {
            queryString.append("&").append("wlend").append("=").append(String.valueOf(wlend));
        }
        if ((wlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(wlnamespace)))) {
            queryString.append("&").append("wlnamespace").append("=").append(String.valueOf(wlnamespace));
        }
        if ((wluser!= null)&&(!StringUtils.isEmpty(String.valueOf(wluser)))) {
            queryString.append("&").append("wluser").append("=").append(String.valueOf(wluser));
        }
        if ((wlexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(wlexcludeuser)))) {
            queryString.append("&").append("wlexcludeuser").append("=").append(String.valueOf(wlexcludeuser));
        }
        if ((wldir!= null)&&(!StringUtils.isEmpty(String.valueOf(wldir)))) {
            queryString.append("&").append("wldir").append("=").append(String.valueOf(wldir));
        }
        if ((wllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(wllimit)))) {
            queryString.append("&").append("wllimit").append("=").append(String.valueOf(wllimit));
        }
        if ((wlprop!= null)&&(!StringUtils.isEmpty(String.valueOf(wlprop)))) {
            queryString.append("&").append("wlprop").append("=").append(String.valueOf(wlprop));
        }
        if ((wlshow!= null)&&(!StringUtils.isEmpty(String.valueOf(wlshow)))) {
            queryString.append("&").append("wlshow").append("=").append(String.valueOf(wlshow));
        }
        if ((wltype!= null)&&(!StringUtils.isEmpty(String.valueOf(wltype)))) {
            queryString.append("&").append("wltype").append("=").append(String.valueOf(wltype));
        }
        if ((wlowner!= null)&&(!StringUtils.isEmpty(String.valueOf(wlowner)))) {
            queryString.append("&").append("wlowner").append("=").append(String.valueOf(wlowner));
        }
        if ((wltoken!= null)&&(!StringUtils.isEmpty(String.valueOf(wltoken)))) {
            queryString.append("&").append("wltoken").append("=").append(String.valueOf(wltoken));
        }
        if ((wlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(wlcontinue)))) {
            queryString.append("&").append("wlcontinue").append("=").append(String.valueOf(wlcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListWatchList", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListWatchList", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListWatchListRaw(String format, String prop, String meta, String wrcontinue, String wrnamespace, String wrlimit, String wrprop, String wrshow, String wrowner, String wrtoken, String wrdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=watchlistraw";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((wrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(wrcontinue)))) {
            queryString.append("&").append("wrcontinue").append("=").append(String.valueOf(wrcontinue));
        }
        if ((wrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(wrnamespace)))) {
            queryString.append("&").append("wrnamespace").append("=").append(String.valueOf(wrnamespace));
        }
        if ((wrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(wrlimit)))) {
            queryString.append("&").append("wrlimit").append("=").append(String.valueOf(wrlimit));
        }
        if ((wrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(wrprop)))) {
            queryString.append("&").append("wrprop").append("=").append(String.valueOf(wrprop));
        }
        if ((wrshow!= null)&&(!StringUtils.isEmpty(String.valueOf(wrshow)))) {
            queryString.append("&").append("wrshow").append("=").append(String.valueOf(wrshow));
        }
        if ((wrowner!= null)&&(!StringUtils.isEmpty(String.valueOf(wrowner)))) {
            queryString.append("&").append("wrowner").append("=").append(String.valueOf(wrowner));
        }
        if ((wrtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(wrtoken)))) {
            queryString.append("&").append("wrtoken").append("=").append(String.valueOf(wrtoken));
        }
        if ((wrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(wrdir)))) {
            queryString.append("&").append("wrdir").append("=").append(String.valueOf(wrdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListWatchListRaw", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListWatchListRaw", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryListWikiSets(String format, String prop, String meta, String wsfrom, String wsprop, String wslimit, String wsorderbyname, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&list=wikisets";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((meta!= null)&&(!StringUtils.isEmpty(String.valueOf(meta)))) {
            queryString.append("&").append("meta").append("=").append(String.valueOf(meta));
        }
        if ((wsfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(wsfrom)))) {
            queryString.append("&").append("wsfrom").append("=").append(String.valueOf(wsfrom));
        }
        if ((wsprop!= null)&&(!StringUtils.isEmpty(String.valueOf(wsprop)))) {
            queryString.append("&").append("wsprop").append("=").append(String.valueOf(wsprop));
        }
        if ((wslimit!= null)&&(!StringUtils.isEmpty(String.valueOf(wslimit)))) {
            queryString.append("&").append("wslimit").append("=").append(String.valueOf(wslimit));
        }
        if ((wsorderbyname!= null)&&(!StringUtils.isEmpty(String.valueOf(wsorderbyname)))) {
            queryString.append("&").append("wsorderbyname").append("=").append(String.valueOf(wsorderbyname));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryListWikiSets", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryListWikiSets", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaAllMessages(String format, String prop, String list, String ammessages, String amprop, String amenableparser, String amnocontent, String amincludelocal, String amargs, String amfilter, String amcustomised, String amlang, String amfrom, String amto, String amtitle, String amprefix, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=allmessages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((ammessages!= null)&&(!StringUtils.isEmpty(String.valueOf(ammessages)))) {
            queryString.append("&").append("ammessages").append("=").append(String.valueOf(ammessages));
        }
        if ((amprop!= null)&&(!StringUtils.isEmpty(String.valueOf(amprop)))) {
            queryString.append("&").append("amprop").append("=").append(String.valueOf(amprop));
        }
        if ((amenableparser!= null)&&(!StringUtils.isEmpty(String.valueOf(amenableparser)))) {
            queryString.append("&").append("amenableparser").append("=").append(String.valueOf(amenableparser));
        }
        if ((amnocontent!= null)&&(!StringUtils.isEmpty(String.valueOf(amnocontent)))) {
            queryString.append("&").append("amnocontent").append("=").append(String.valueOf(amnocontent));
        }
        if ((amincludelocal!= null)&&(!StringUtils.isEmpty(String.valueOf(amincludelocal)))) {
            queryString.append("&").append("amincludelocal").append("=").append(String.valueOf(amincludelocal));
        }
        if ((amargs!= null)&&(!StringUtils.isEmpty(String.valueOf(amargs)))) {
            queryString.append("&").append("amargs").append("=").append(String.valueOf(amargs));
        }
        if ((amfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(amfilter)))) {
            queryString.append("&").append("amfilter").append("=").append(String.valueOf(amfilter));
        }
        if ((amcustomised!= null)&&(!StringUtils.isEmpty(String.valueOf(amcustomised)))) {
            queryString.append("&").append("amcustomised").append("=").append(String.valueOf(amcustomised));
        }
        if ((amlang!= null)&&(!StringUtils.isEmpty(String.valueOf(amlang)))) {
            queryString.append("&").append("amlang").append("=").append(String.valueOf(amlang));
        }
        if ((amfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(amfrom)))) {
            queryString.append("&").append("amfrom").append("=").append(String.valueOf(amfrom));
        }
        if ((amto!= null)&&(!StringUtils.isEmpty(String.valueOf(amto)))) {
            queryString.append("&").append("amto").append("=").append(String.valueOf(amto));
        }
        if ((amtitle!= null)&&(!StringUtils.isEmpty(String.valueOf(amtitle)))) {
            queryString.append("&").append("amtitle").append("=").append(String.valueOf(amtitle));
        }
        if ((amprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(amprefix)))) {
            queryString.append("&").append("amprefix").append("=").append(String.valueOf(amprefix));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaAllMessages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaAllMessages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaFileRepoInfo(String format, String prop, String list, String friprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=filerepoinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((friprop!= null)&&(!StringUtils.isEmpty(String.valueOf(friprop)))) {
            queryString.append("&").append("friprop").append("=").append(String.valueOf(friprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaFileRepoInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaFileRepoInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaGlobalUserInfo(String format, String prop, String list, String guiuser, String guiprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=globaluserinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((guiuser!= null)&&(!StringUtils.isEmpty(String.valueOf(guiuser)))) {
            queryString.append("&").append("guiuser").append("=").append(String.valueOf(guiuser));
        }
        if ((guiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(guiprop)))) {
            queryString.append("&").append("guiprop").append("=").append(String.valueOf(guiprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaGlobalUserInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaGlobalUserInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaLanguageStats(String format, String prop, String list, String lsoffset, String lstimelimit, String lslanguage, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=languagestats";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((lsoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(lsoffset)))) {
            queryString.append("&").append("lsoffset").append("=").append(String.valueOf(lsoffset));
        }
        if ((lstimelimit!= null)&&(!StringUtils.isEmpty(String.valueOf(lstimelimit)))) {
            queryString.append("&").append("lstimelimit").append("=").append(String.valueOf(lstimelimit));
        }
        if ((lslanguage!= null)&&(!StringUtils.isEmpty(String.valueOf(lslanguage)))) {
            queryString.append("&").append("lslanguage").append("=").append(String.valueOf(lslanguage));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaLanguageStats", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaLanguageStats", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaMessageGroups(String format, String prop, String list, String mgdepth, String mgfilter, String mgformat, String mgiconsize, String mgprop, String mgroot, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=messagegroups";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((mgdepth!= null)&&(!StringUtils.isEmpty(String.valueOf(mgdepth)))) {
            queryString.append("&").append("mgdepth").append("=").append(String.valueOf(mgdepth));
        }
        if ((mgfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(mgfilter)))) {
            queryString.append("&").append("mgfilter").append("=").append(String.valueOf(mgfilter));
        }
        if ((mgformat!= null)&&(!StringUtils.isEmpty(String.valueOf(mgformat)))) {
            queryString.append("&").append("mgformat").append("=").append(String.valueOf(mgformat));
        }
        if ((mgiconsize!= null)&&(!StringUtils.isEmpty(String.valueOf(mgiconsize)))) {
            queryString.append("&").append("mgiconsize").append("=").append(String.valueOf(mgiconsize));
        }
        if ((mgprop!= null)&&(!StringUtils.isEmpty(String.valueOf(mgprop)))) {
            queryString.append("&").append("mgprop").append("=").append(String.valueOf(mgprop));
        }
        if ((mgroot!= null)&&(!StringUtils.isEmpty(String.valueOf(mgroot)))) {
            queryString.append("&").append("mgroot").append("=").append(String.valueOf(mgroot));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaMessageGroups", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaMessageGroups", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaMessageGroupStats(String format, String prop, String list, String mgsoffset, String mgstimelimit, String mgsgroup, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=messagegroupstats";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((mgsoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(mgsoffset)))) {
            queryString.append("&").append("mgsoffset").append("=").append(String.valueOf(mgsoffset));
        }
        if ((mgstimelimit!= null)&&(!StringUtils.isEmpty(String.valueOf(mgstimelimit)))) {
            queryString.append("&").append("mgstimelimit").append("=").append(String.valueOf(mgstimelimit));
        }
        if ((mgsgroup!= null)&&(!StringUtils.isEmpty(String.valueOf(mgsgroup)))) {
            queryString.append("&").append("mgsgroup").append("=").append(String.valueOf(mgsgroup));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaMessageGroupStats", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaMessageGroupStats", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaNotifications(String format, String prop, String list, String notprop, String notsections, String notgroupbysection, String notformat, String notlimit, String notindex, String notcontinue, String notalertcontinue, String notalertunreadfirst, String notmessagecontinue, String notmessageunreadfirst, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=notifications";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((notprop!= null)&&(!StringUtils.isEmpty(String.valueOf(notprop)))) {
            queryString.append("&").append("notprop").append("=").append(String.valueOf(notprop));
        }
        if ((notsections!= null)&&(!StringUtils.isEmpty(String.valueOf(notsections)))) {
            queryString.append("&").append("notsections").append("=").append(String.valueOf(notsections));
        }
        if ((notgroupbysection!= null)&&(!StringUtils.isEmpty(String.valueOf(notgroupbysection)))) {
            queryString.append("&").append("notgroupbysection").append("=").append(String.valueOf(notgroupbysection));
        }
        if ((notformat!= null)&&(!StringUtils.isEmpty(String.valueOf(notformat)))) {
            queryString.append("&").append("notformat").append("=").append(String.valueOf(notformat));
        }
        if ((notlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(notlimit)))) {
            queryString.append("&").append("notlimit").append("=").append(String.valueOf(notlimit));
        }
        if ((notindex!= null)&&(!StringUtils.isEmpty(String.valueOf(notindex)))) {
            queryString.append("&").append("notindex").append("=").append(String.valueOf(notindex));
        }
        if ((notcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(notcontinue)))) {
            queryString.append("&").append("notcontinue").append("=").append(String.valueOf(notcontinue));
        }
        if ((notalertcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(notalertcontinue)))) {
            queryString.append("&").append("notalertcontinue").append("=").append(String.valueOf(notalertcontinue));
        }
        if ((notalertunreadfirst!= null)&&(!StringUtils.isEmpty(String.valueOf(notalertunreadfirst)))) {
            queryString.append("&").append("notalertunreadfirst").append("=").append(String.valueOf(notalertunreadfirst));
        }
        if ((notmessagecontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(notmessagecontinue)))) {
            queryString.append("&").append("notmessagecontinue").append("=").append(String.valueOf(notmessagecontinue));
        }
        if ((notmessageunreadfirst!= null)&&(!StringUtils.isEmpty(String.valueOf(notmessageunreadfirst)))) {
            queryString.append("&").append("notmessageunreadfirst").append("=").append(String.valueOf(notmessageunreadfirst));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaNotifications", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaNotifications", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaMessageranslations(String format, String prop, String list, String mttitle, String mtoffset, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=messagetranslations";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((mttitle!= null)&&(!StringUtils.isEmpty(String.valueOf(mttitle)))) {
            queryString.append("&").append("mttitle").append("=").append(String.valueOf(mttitle));
        }
        if ((mtoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(mtoffset)))) {
            queryString.append("&").append("mtoffset").append("=").append(String.valueOf(mtoffset));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaMessageranslations", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaMessageranslations", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetasSiteInfo(String format, String prop, String list, String siprop, String sifilteriw, String sishowalldb, String sinumberingroup, String siinlanguagecode, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=siteinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((siprop!= null)&&(!StringUtils.isEmpty(String.valueOf(siprop)))) {
            queryString.append("&").append("siprop").append("=").append(String.valueOf(siprop));
        }
        if ((sifilteriw!= null)&&(!StringUtils.isEmpty(String.valueOf(sifilteriw)))) {
            queryString.append("&").append("sifilteriw").append("=").append(String.valueOf(sifilteriw));
        }
        if ((sishowalldb!= null)&&(!StringUtils.isEmpty(String.valueOf(sishowalldb)))) {
            queryString.append("&").append("sishowalldb").append("=").append(String.valueOf(sishowalldb));
        }
        if ((sinumberingroup!= null)&&(!StringUtils.isEmpty(String.valueOf(sinumberingroup)))) {
            queryString.append("&").append("sinumberingroup").append("=").append(String.valueOf(sinumberingroup));
        }
        if ((siinlanguagecode!= null)&&(!StringUtils.isEmpty(String.valueOf(siinlanguagecode)))) {
            queryString.append("&").append("siinlanguagecode").append("=").append(String.valueOf(siinlanguagecode));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetasSiteInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetasSiteInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetatokens(String format, String prop, String list, String type, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=tokens";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((type!= null)&&(!StringUtils.isEmpty(String.valueOf(type)))) {
            queryString.append("&").append("type").append("=").append(String.valueOf(type));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetatokens", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetatokens", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaUserInfo(String format, String prop, String list, String uiprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=userinfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((uiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(uiprop)))) {
            queryString.append("&").append("uiprop").append("=").append(String.valueOf(uiprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaUserInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaUserInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryMetaWikiBase(String format, String prop, String list, String uiprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&meta=wikibase";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((uiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(uiprop)))) {
            queryString.append("&").append("wbprop").append("=").append(String.valueOf(uiprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryMetaWikiBase", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryMetaWikiBase", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllcategories(String format, String prop, String list, String gacfrom, String gaccontinue, String gacto, String gacprefix, String gacdir, String gacmin, String gacmax, String gaclimit, String gacprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=allcategories ";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gacfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gacfrom)))) {
            queryString.append("&").append("gacfrom").append("=").append(String.valueOf(gacfrom));
        }
        if ((gaccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gaccontinue)))) {
            queryString.append("&").append("gaccontinue").append("=").append(String.valueOf(gaccontinue));
        }
        if ((gacto!= null)&&(!StringUtils.isEmpty(String.valueOf(gacto)))) {
            queryString.append("&").append("gacto").append("=").append(String.valueOf(gacto));
        }
        if ((gacprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gacprefix)))) {
            queryString.append("&").append("gacprefix").append("=").append(String.valueOf(gacprefix));
        }
        if ((gacdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gacdir)))) {
            queryString.append("&").append("gacdir").append("=").append(String.valueOf(gacdir));
        }
        if ((gacmin!= null)&&(!StringUtils.isEmpty(String.valueOf(gacmin)))) {
            queryString.append("&").append("gacmin").append("=").append(String.valueOf(gacmin));
        }
        if ((gacmax!= null)&&(!StringUtils.isEmpty(String.valueOf(gacmax)))) {
            queryString.append("&").append("gacmax").append("=").append(String.valueOf(gacmax));
        }
        if ((gaclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaclimit)))) {
            queryString.append("&").append("gaclimit").append("=").append(String.valueOf(gaclimit));
        }
        if ((gacprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gacprop)))) {
            queryString.append("&").append("gacprop").append("=").append(String.valueOf(gacprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllcategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllcategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllDeletedRevisions(String format, String prop, String list, String gadrprop, String gadrlimit, String gadrexpandtemplates, String gadrgeneratexml, String gadrparse, String gadrsection, String gadrdiffto, String gadrdifftotext, String gadrcontentformat, String gadruser, String gadrnamespace, String gadrstart, String gadrend, String gadrdir, String gadrfrom, String gadrto, String gadrprefix, String gadrexcludeuser, String gadrtag, String gadrcontinue, String gadrgeneratetitles, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=alldeletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gadrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrprop)))) {
            queryString.append("&").append("gadrprop").append("=").append(String.valueOf(gadrprop));
        }
        if ((gadrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrlimit)))) {
            queryString.append("&").append("gadrlimit").append("=").append(String.valueOf(gadrlimit));
        }
        if ((gadrexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrexpandtemplates)))) {
            queryString.append("&").append("gadrexpandtemplates").append("=").append(String.valueOf(gadrexpandtemplates));
        }
        if ((gadrgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrgeneratexml)))) {
            queryString.append("&").append("gadrgeneratexml").append("=").append(String.valueOf(gadrgeneratexml));
        }
        if ((gadrparse!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrparse)))) {
            queryString.append("&").append("gadrparse").append("=").append(String.valueOf(gadrparse));
        }
        if ((gadrsection!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrsection)))) {
            queryString.append("&").append("gadrsection").append("=").append(String.valueOf(gadrsection));
        }
        if ((gadrdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdiffto)))) {
            queryString.append("&").append("gadrdiffto").append("=").append(String.valueOf(gadrdiffto));
        }
        if ((gadrdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdifftotext)))) {
            queryString.append("&").append("gadrdifftotext").append("=").append(String.valueOf(gadrdifftotext));
        }
        if ((gadrcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrcontentformat)))) {
            queryString.append("&").append("gadrcontentformat").append("=").append(String.valueOf(gadrcontentformat));
        }
        if ((gadruser!= null)&&(!StringUtils.isEmpty(String.valueOf(gadruser)))) {
            queryString.append("&").append("gadruser").append("=").append(String.valueOf(gadruser));
        }
        if ((gadrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrnamespace)))) {
            queryString.append("&").append("gadrnamespace").append("=").append(String.valueOf(gadrnamespace));
        }
        if ((gadrstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrstart)))) {
            queryString.append("&").append("gadrstart").append("=").append(String.valueOf(gadrstart));
        }
        if ((gadrend!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrend)))) {
            queryString.append("&").append("gadrend").append("=").append(String.valueOf(gadrend));
        }
        if ((gadrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdir)))) {
            queryString.append("&").append("gadrdir").append("=").append(String.valueOf(gadrdir));
        }
        if ((gadrfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrfrom)))) {
            queryString.append("&").append("gadrfrom").append("=").append(String.valueOf(gadrfrom));
        }
        if ((gadrto!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrto)))) {
            queryString.append("&").append("gadrto").append("=").append(String.valueOf(gadrto));
        }
        if ((gadrprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrprefix)))) {
            queryString.append("&").append("gadrprefix").append("=").append(String.valueOf(gadrprefix));
        }
        if ((gadrexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrexcludeuser)))) {
            queryString.append("&").append("gadrexcludeuser").append("=").append(String.valueOf(gadrexcludeuser));
        }
        if ((gadrtag!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrtag)))) {
            queryString.append("&").append("gadrtag").append("=").append(String.valueOf(gadrtag));
        }
        if ((gadrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrcontinue)))) {
            queryString.append("&").append("gadrcontinue").append("=").append(String.valueOf(gadrcontinue));
        }
        if ((gadrgeneratetitles!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrgeneratetitles)))) {
            queryString.append("&").append("gadrgeneratetitles").append("=").append(String.valueOf(gadrgeneratetitles));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllFileUsages(String format, String prop, String list, String gafcontinue, String gaffrom, String gafto, String gafprefix, String gafunique, String gafprop, String gaflimit, String gafdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=allfileusages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gafcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gafcontinue)))) {
            queryString.append("&").append("gafcontinue").append("=").append(String.valueOf(gafcontinue));
        }
        if ((gaffrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gaffrom)))) {
            queryString.append("&").append("gaffrom").append("=").append(String.valueOf(gaffrom));
        }
        if ((gafto!= null)&&(!StringUtils.isEmpty(String.valueOf(gafto)))) {
            queryString.append("&").append("gafto").append("=").append(String.valueOf(gafto));
        }
        if ((gafprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gafprefix)))) {
            queryString.append("&").append("gafprefix").append("=").append(String.valueOf(gafprefix));
        }
        if ((gafunique!= null)&&(!StringUtils.isEmpty(String.valueOf(gafunique)))) {
            queryString.append("&").append("gafunique").append("=").append(String.valueOf(gafunique));
        }
        if ((gafprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gafprop)))) {
            queryString.append("&").append("gafprop").append("=").append(String.valueOf(gafprop));
        }
        if ((gaflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaflimit)))) {
            queryString.append("&").append("gaflimit").append("=").append(String.valueOf(gaflimit));
        }
        if ((gafdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gafdir)))) {
            queryString.append("&").append("gafdir").append("=").append(String.valueOf(gafdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllFileUsages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllFileUsages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllImages(String format, String prop, String list, String gaisort, String gaidir, String gaifrom, String gaito, String gaicontinue, String gaistart, String gaiend, String gaiprop, String gaiprefix, String gaiminsize, String gaimaxsize, String gaisha1, String gaisha1base36, String gaiuser, String gaifilterbots, String gaimime, String gailimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=allimages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gaisort!= null)&&(!StringUtils.isEmpty(String.valueOf(gaisort)))) {
            queryString.append("&").append("gaisort").append("=").append(String.valueOf(gaisort));
        }
        if ((gaidir!= null)&&(!StringUtils.isEmpty(String.valueOf(gaidir)))) {
            queryString.append("&").append("gaidir").append("=").append(String.valueOf(gaidir));
        }
        if ((gaifrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gaifrom)))) {
            queryString.append("&").append("gaifrom").append("=").append(String.valueOf(gaifrom));
        }
        if ((gaito!= null)&&(!StringUtils.isEmpty(String.valueOf(gaito)))) {
            queryString.append("&").append("gaito").append("=").append(String.valueOf(gaito));
        }
        if ((gaicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gaicontinue)))) {
            queryString.append("&").append("gaicontinue").append("=").append(String.valueOf(gaicontinue));
        }
        if ((gaistart!= null)&&(!StringUtils.isEmpty(String.valueOf(gaistart)))) {
            queryString.append("&").append("gaistart").append("=").append(String.valueOf(gaistart));
        }
        if ((gaiend!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiend)))) {
            queryString.append("&").append("gaiend").append("=").append(String.valueOf(gaiend));
        }
        if ((gaiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiprop)))) {
            queryString.append("&").append("gaiprop").append("=").append(String.valueOf(gaiprop));
        }
        if ((gaiprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiprefix)))) {
            queryString.append("&").append("gaiprefix").append("=").append(String.valueOf(gaiprefix));
        }
        if ((gaiminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiminsize)))) {
            queryString.append("&").append("gaiminsize").append("=").append(String.valueOf(gaiminsize));
        }
        if ((gaimaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gaimaxsize)))) {
            queryString.append("&").append("gaimaxsize").append("=").append(String.valueOf(gaimaxsize));
        }
        if ((gaisha1 != null)&&(!StringUtils.isEmpty(String.valueOf(gaisha1)))) {
            queryString.append("&").append("gaisha1").append("=").append(String.valueOf(gaisha1));
        }
        if ((gaisha1base36 != null)&&(!StringUtils.isEmpty(String.valueOf(gaisha1base36)))) {
            queryString.append("&").append("gaisha1base36").append("=").append(String.valueOf(gaisha1base36));
        }
        if ((gaiuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiuser)))) {
            queryString.append("&").append("gaiuser").append("=").append(String.valueOf(gaiuser));
        }
        if ((gaifilterbots!= null)&&(!StringUtils.isEmpty(String.valueOf(gaifilterbots)))) {
            queryString.append("&").append("gaifilterbots").append("=").append(String.valueOf(gaifilterbots));
        }
        if ((gaimime!= null)&&(!StringUtils.isEmpty(String.valueOf(gaimime)))) {
            queryString.append("&").append("gaimime").append("=").append(String.valueOf(gaimime));
        }
        if ((gailimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gailimit)))) {
            queryString.append("&").append("gailimit").append("=").append(String.valueOf(gailimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllRedirects(String format, String prop, String list, String gaisort, String gaidir, String garcontinue, String garfrom, String garto, String garprefix, String garunique, String garprop, String garnamespace, String garlimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=allredirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gaisort!= null)&&(!StringUtils.isEmpty(String.valueOf(gaisort)))) {
            queryString.append("&").append("gaisort").append("=").append(String.valueOf(gaisort));
        }
        if ((gaidir!= null)&&(!StringUtils.isEmpty(String.valueOf(gaidir)))) {
            queryString.append("&").append("gaidir").append("=").append(String.valueOf(gaidir));
        }
        if ((garcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(garcontinue)))) {
            queryString.append("&").append("garcontinue").append("=").append(String.valueOf(garcontinue));
        }
        if ((garfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(garfrom)))) {
            queryString.append("&").append("garfrom").append("=").append(String.valueOf(garfrom));
        }
        if ((garto!= null)&&(!StringUtils.isEmpty(String.valueOf(garto)))) {
            queryString.append("&").append("garto").append("=").append(String.valueOf(garto));
        }
        if ((garprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(garprefix)))) {
            queryString.append("&").append("garprefix").append("=").append(String.valueOf(garprefix));
        }
        if ((garunique!= null)&&(!StringUtils.isEmpty(String.valueOf(garunique)))) {
            queryString.append("&").append("garunique").append("=").append(String.valueOf(garunique));
        }
        if ((garprop!= null)&&(!StringUtils.isEmpty(String.valueOf(garprop)))) {
            queryString.append("&").append("garprop").append("=").append(String.valueOf(garprop));
        }
        if ((garnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(garnamespace)))) {
            queryString.append("&").append("garnamespace").append("=").append(String.valueOf(garnamespace));
        }
        if ((garlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(garlimit)))) {
            queryString.append("&").append("garlimit").append("=").append(String.valueOf(garlimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllTransclusions(String format, String prop, String list, String gatcontinue, String gatfrom, String gatto, String gatprefix, String gatunique, String gatprop, String gatnamespace, String gatlimit, String gatdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=alltransclusions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gatcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gatcontinue)))) {
            queryString.append("&").append("gatcontinue").append("=").append(String.valueOf(gatcontinue));
        }
        if ((gatfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gatfrom)))) {
            queryString.append("&").append("gatfrom").append("=").append(String.valueOf(gatfrom));
        }
        if ((gatto!= null)&&(!StringUtils.isEmpty(String.valueOf(gatto)))) {
            queryString.append("&").append("gatto").append("=").append(String.valueOf(gatto));
        }
        if ((gatprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gatprefix)))) {
            queryString.append("&").append("gatprefix").append("=").append(String.valueOf(gatprefix));
        }
        if ((gatunique!= null)&&(!StringUtils.isEmpty(String.valueOf(gatunique)))) {
            queryString.append("&").append("gatunique").append("=").append(String.valueOf(gatunique));
        }
        if ((gatprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gatprop)))) {
            queryString.append("&").append("gatprop").append("=").append(String.valueOf(gatprop));
        }
        if ((gatnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gatnamespace)))) {
            queryString.append("&").append("gatnamespace").append("=").append(String.valueOf(gatnamespace));
        }
        if ((gatlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gatlimit)))) {
            queryString.append("&").append("gatlimit").append("=").append(String.valueOf(gatlimit));
        }
        if ((gatdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gatdir)))) {
            queryString.append("&").append("gatdir").append("=").append(String.valueOf(gatdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllTransclusions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllTransclusions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllPages(String format, String prop, String list, String gapcontinue, String gapfrom, String gapto, String gapprefix, String gapnamespace, String gapfilterredir, String gapminsize, String gapmaxsize, String gapprtype, String gapprlevel, String gapprfiltercascade, String gaplimit, String gapdir, String gapfilterlanglinks, String gapprexpiry, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=allpages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gapcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gapcontinue)))) {
            queryString.append("&").append("gapcontinue").append("=").append(String.valueOf(gapcontinue));
        }
        if ((gapfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfrom)))) {
            queryString.append("&").append("gapfrom").append("=").append(String.valueOf(gapfrom));
        }
        if ((gapto!= null)&&(!StringUtils.isEmpty(String.valueOf(gapto)))) {
            queryString.append("&").append("gapto").append("=").append(String.valueOf(gapto));
        }
        if ((gapprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprefix)))) {
            queryString.append("&").append("gapprefix").append("=").append(String.valueOf(gapprefix));
        }
        if ((gapnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gapnamespace)))) {
            queryString.append("&").append("gapnamespace").append("=").append(String.valueOf(gapnamespace));
        }
        if ((gapfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfilterredir)))) {
            queryString.append("&").append("gapfilterredir").append("=").append(String.valueOf(gapfilterredir));
        }
        if ((gapminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gapminsize)))) {
            queryString.append("&").append("gapminsize").append("=").append(String.valueOf(gapminsize));
        }
        if ((gapmaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gapmaxsize)))) {
            queryString.append("&").append("gapmaxsize").append("=").append(String.valueOf(gapmaxsize));
        }
        if ((gapprtype!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprtype)))) {
            queryString.append("&").append("gapprtype").append("=").append(String.valueOf(gapprtype));
        }
        if ((gapprlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprlevel)))) {
            queryString.append("&").append("gapprlevel").append("=").append(String.valueOf(gapprlevel));
        }
        if ((gapprfiltercascade!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprfiltercascade)))) {
            queryString.append("&").append("gapprfiltercascade").append("=").append(String.valueOf(gapprfiltercascade));
        }
        if ((gaplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaplimit)))) {
            queryString.append("&").append("gaplimit").append("=").append(String.valueOf(gaplimit));
        }
        if ((gapdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gapdir)))) {
            queryString.append("&").append("gapdir").append("=").append(String.valueOf(gapdir));
        }
        if ((gapfilterlanglinks!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfilterlanglinks)))) {
            queryString.append("&").append("gapfilterlanglinks").append("=").append(String.valueOf(gapfilterlanglinks));
        }
        if ((gapprexpiry!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprexpiry)))) {
            queryString.append("&").append("gapprexpiry").append("=").append(String.valueOf(gapprexpiry));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllPages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllPages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenAllLinks(String format, String prop, String list, String galcontinue, String galfrom, String galto, String galprefix, String galunique, String galprop, String galnamespace, String gallimit, String galdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=alllinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((galcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(galcontinue)))) {
            queryString.append("&").append("galcontinue").append("=").append(String.valueOf(galcontinue));
        }
        if ((galfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(galfrom)))) {
            queryString.append("&").append("galfrom").append("=").append(String.valueOf(galfrom));
        }
        if ((galto!= null)&&(!StringUtils.isEmpty(String.valueOf(galto)))) {
            queryString.append("&").append("galto").append("=").append(String.valueOf(galto));
        }
        if ((galprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(galprefix)))) {
            queryString.append("&").append("galprefix").append("=").append(String.valueOf(galprefix));
        }
        if ((galunique!= null)&&(!StringUtils.isEmpty(String.valueOf(galunique)))) {
            queryString.append("&").append("galunique").append("=").append(String.valueOf(galunique));
        }
        if ((galprop!= null)&&(!StringUtils.isEmpty(String.valueOf(galprop)))) {
            queryString.append("&").append("galprop").append("=").append(String.valueOf(galprop));
        }
        if ((galnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(galnamespace)))) {
            queryString.append("&").append("galnamespace").append("=").append(String.valueOf(galnamespace));
        }
        if ((gallimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gallimit)))) {
            queryString.append("&").append("gallimit").append("=").append(String.valueOf(gallimit));
        }
        if ((galdir!= null)&&(!StringUtils.isEmpty(String.valueOf(galdir)))) {
            queryString.append("&").append("galdir").append("=").append(String.valueOf(galdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenAllLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenAllLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenBackLinks(String format, String prop, String list, String gbltitle, String gblpageid, String gblcontinue, String gblnamespace, String gbldir, String gblfilterredir, String gbllimit, String gblredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=backlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(gbltitle)))) {
            queryString.append("&").append("gbltitle").append("=").append(String.valueOf(gbltitle));
        }
        if ((gblpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(gblpageid)))) {
            queryString.append("&").append("gblpageid").append("=").append(String.valueOf(gblpageid));
        }
        if ((gblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gblcontinue)))) {
            queryString.append("&").append("gblcontinue").append("=").append(String.valueOf(gblcontinue));
        }
        if ((gblnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gblnamespace)))) {
            queryString.append("&").append("gblnamespace").append("=").append(String.valueOf(gblnamespace));
        }
        if ((gbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gbldir)))) {
            queryString.append("&").append("gbldir").append("=").append(String.valueOf(gbldir));
        }
        if ((gblfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(gblfilterredir)))) {
            queryString.append("&").append("gblfilterredir").append("=").append(String.valueOf(gblfilterredir));
        }
        if ((gbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gbllimit)))) {
            queryString.append("&").append("gbllimit").append("=").append(String.valueOf(gbllimit));
        }
        if ((gblredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(gblredirect)))) {
            queryString.append("&").append("gblredirect").append("=").append(String.valueOf(gblredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenCategories(String format, String prop, String list, String gclprop, String gclshow, String gcllimit, String gclcontinue, String gclcategories, String gcldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=categories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gclprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gclprop)))) {
            queryString.append("&").append("gclprop").append("=").append(String.valueOf(gclprop));
        }
        if ((gclshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gclshow)))) {
            queryString.append("&").append("gclshow").append("=").append(String.valueOf(gclshow));
        }
        if ((gcllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gcllimit)))) {
            queryString.append("&").append("gcllimit").append("=").append(String.valueOf(gcllimit));
        }
        if ((gclcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gclcontinue)))) {
            queryString.append("&").append("gclcontinue").append("=").append(String.valueOf(gclcontinue));
        }
        if ((gclcategories!= null)&&(!StringUtils.isEmpty(String.valueOf(gclcategories)))) {
            queryString.append("&").append("gclcategories").append("=").append(String.valueOf(gclcategories));
        }
        if ((gcldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gcldir)))) {
            queryString.append("&").append("gcldir").append("=").append(String.valueOf(gcldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenCategoryMembers(String format, String prop, String list, String gcmtitle, String gcmpageid, String gcmprop, String gcmnamespace, String gcmtype, String gcmcontinue, String gcmlimit, String gcmsort, String gcmdir, String gcmstart, String gcmend, String gcmstarthexsortkey, String gcmendhexsortkey, String gcmstartsortkeyprefix, String gcmendsortkeyprefix, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=categorymembers";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gcmtitle!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmtitle)))) {
            queryString.append("&").append("gcmtitle").append("=").append(String.valueOf(gcmtitle));
        }
        if ((gcmpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmpageid)))) {
            queryString.append("&").append("gcmpageid").append("=").append(String.valueOf(gcmpageid));
        }
        if ((gcmprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmprop)))) {
            queryString.append("&").append("gcmprop").append("=").append(String.valueOf(gcmprop));
        }
        if ((gcmnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmnamespace)))) {
            queryString.append("&").append("gcmnamespace").append("=").append(String.valueOf(gcmnamespace));
        }
        if ((gcmtype!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmtype)))) {
            queryString.append("&").append("gcmtype").append("=").append(String.valueOf(gcmtype));
        }
        if ((gcmcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmcontinue)))) {
            queryString.append("&").append("gcmcontinue").append("=").append(String.valueOf(gcmcontinue));
        }
        if ((gcmlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmlimit)))) {
            queryString.append("&").append("gcmlimit").append("=").append(String.valueOf(gcmlimit));
        }
        if ((gcmsort!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmsort)))) {
            queryString.append("&").append("gcmsort").append("=").append(String.valueOf(gcmsort));
        }
        if ((gcmdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmdir)))) {
            queryString.append("&").append("gcmdir").append("=").append(String.valueOf(gcmdir));
        }
        if ((gcmstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstart)))) {
            queryString.append("&").append("gcmstart").append("=").append(String.valueOf(gcmstart));
        }
        if ((gcmend!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmend)))) {
            queryString.append("&").append("gcmend").append("=").append(String.valueOf(gcmend));
        }
        if ((gcmstarthexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstarthexsortkey)))) {
            queryString.append("&").append("gcmstarthexsortkey").append("=").append(String.valueOf(gcmstarthexsortkey));
        }
        if ((gcmendhexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmendhexsortkey)))) {
            queryString.append("&").append("gcmendhexsortkey").append("=").append(String.valueOf(gcmendhexsortkey));
        }
        if ((gcmstartsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstartsortkeyprefix)))) {
            queryString.append("&").append("gcmstartsortkeyprefix").append("=").append(String.valueOf(gcmstartsortkeyprefix));
        }
        if ((gcmendsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmendsortkeyprefix)))) {
            queryString.append("&").append("gcmendsortkeyprefix").append("=").append(String.valueOf(gcmendsortkeyprefix));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenCategoryMembers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenCategoryMembers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenDeletedRevisions(String format, String prop, String list, String gdrvprop, String gdrvlimit, String gdrvexpandtemplates, String gdrvgeneratexml, String gdrvparse, String gdrvsection, String gdrvdiffto, String gdrvdifftotext, String gdrvcontentformat, String gdrvstart, String gdrvend, String gdrvdir, String gdrvtag, String gdrvuser, String gdrvexcludeuser, String gdrvcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=deletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gdrvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvprop)))) {
            queryString.append("&").append("gdrvprop").append("=").append(String.valueOf(gdrvprop));
        }
        if ((gdrvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvlimit)))) {
            queryString.append("&").append("gdrvlimit").append("=").append(String.valueOf(gdrvlimit));
        }
        if ((gdrvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvexpandtemplates)))) {
            queryString.append("&").append("gdrvexpandtemplates").append("=").append(String.valueOf(gdrvexpandtemplates));
        }
        if ((gdrvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvgeneratexml)))) {
            queryString.append("&").append("gdrvgeneratexml").append("=").append(String.valueOf(gdrvgeneratexml));
        }
        if ((gdrvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvparse)))) {
            queryString.append("&").append("gdrvparse").append("=").append(String.valueOf(gdrvparse));
        }
        if ((gdrvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvsection)))) {
            queryString.append("&").append("gdrvsection").append("=").append(String.valueOf(gdrvsection));
        }
        if ((gdrvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdiffto)))) {
            queryString.append("&").append("gdrvdiffto").append("=").append(String.valueOf(gdrvdiffto));
        }
        if ((gdrvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdifftotext)))) {
            queryString.append("&").append("gdrvdifftotext").append("=").append(String.valueOf(gdrvdifftotext));
        }
        if ((gdrvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvcontentformat)))) {
            queryString.append("&").append("gdrvcontentformat").append("=").append(String.valueOf(gdrvcontentformat));
        }
        if ((gdrvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvstart)))) {
            queryString.append("&").append("gdrvstart").append("=").append(String.valueOf(gdrvstart));
        }
        if ((gdrvend!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvend)))) {
            queryString.append("&").append("gdrvend").append("=").append(String.valueOf(gdrvend));
        }
        if ((gdrvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdir)))) {
            queryString.append("&").append("gdrvdir").append("=").append(String.valueOf(gdrvdir));
        }
        if ((gdrvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvtag)))) {
            queryString.append("&").append("gdrvtag").append("=").append(String.valueOf(gdrvtag));
        }
        if ((gdrvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvuser)))) {
            queryString.append("&").append("gdrvuser").append("=").append(String.valueOf(gdrvuser));
        }
        if ((gdrvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvexcludeuser)))) {
            queryString.append("&").append("gdrvexcludeuser").append("=").append(String.valueOf(gdrvexcludeuser));
        }
        if ((gdrvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvcontinue)))) {
            queryString.append("&").append("gdrvcontinue").append("=").append(String.valueOf(gdrvcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenDuplicateFiles(String format, String prop, String list, String gdflimit, String gdfcontinue, String gdfdir, String gdflocalonly, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=duplicatefiles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gdflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gdflimit)))) {
            queryString.append("&").append("gdflimit").append("=").append(String.valueOf(gdflimit));
        }
        if ((gdfcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gdfcontinue)))) {
            queryString.append("&").append("gdfcontinue").append("=").append(String.valueOf(gdfcontinue));
        }
        if ((gdfdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gdfdir)))) {
            queryString.append("&").append("gdfdir").append("=").append(String.valueOf(gdfdir));
        }
        if ((gdflocalonly!= null)&&(!StringUtils.isEmpty(String.valueOf(gdflocalonly)))) {
            queryString.append("&").append("gdflocalonly").append("=").append(String.valueOf(gdflocalonly));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenDuplicateFiles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenDuplicateFiles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenEmbeddedIn(String format, String prop, String list, String geititle, String geipageid, String geicontinue, String geinamespace, String geidir, String geifilterredir, String geilimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=embeddedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((geititle!= null)&&(!StringUtils.isEmpty(String.valueOf(geititle)))) {
            queryString.append("&").append("geititle").append("=").append(String.valueOf(geititle));
        }
        if ((geipageid!= null)&&(!StringUtils.isEmpty(String.valueOf(geipageid)))) {
            queryString.append("&").append("geipageid").append("=").append(String.valueOf(geipageid));
        }
        if ((geicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(geicontinue)))) {
            queryString.append("&").append("geicontinue").append("=").append(String.valueOf(geicontinue));
        }
        if ((geinamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(geinamespace)))) {
            queryString.append("&").append("geinamespace").append("=").append(String.valueOf(geinamespace));
        }
        if ((geidir!= null)&&(!StringUtils.isEmpty(String.valueOf(geidir)))) {
            queryString.append("&").append("geidir").append("=").append(String.valueOf(geidir));
        }
        if ((geifilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(geifilterredir)))) {
            queryString.append("&").append("geifilterredir").append("=").append(String.valueOf(geifilterredir));
        }
        if ((geilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(geilimit)))) {
            queryString.append("&").append("geilimit").append("=").append(String.valueOf(geilimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenEmbeddedIn", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenEmbeddedIn", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenExtUrlUsage(String format, String prop, String list, String geuprop, String geuoffset, String geuprotocol, String geuquery, String geunamespace, String geulimit, String geuexpandurl, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=exturlusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((geuprop!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprop)))) {
            queryString.append("&").append("geuprop").append("=").append(String.valueOf(geuprop));
        }
        if ((geuoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(geuoffset)))) {
            queryString.append("&").append("geuoffset").append("=").append(String.valueOf(geuoffset));
        }
        if ((geuprotocol!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprotocol)))) {
            queryString.append("&").append("geuprotocol").append("=").append(String.valueOf(geuprotocol));
        }
        if ((geuquery!= null)&&(!StringUtils.isEmpty(String.valueOf(geuquery)))) {
            queryString.append("&").append("geuquery").append("=").append(String.valueOf(geuquery));
        }
        if ((geunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(geunamespace)))) {
            queryString.append("&").append("geunamespace").append("=").append(String.valueOf(geunamespace));
        }
        if ((geulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(geulimit)))) {
            queryString.append("&").append("geulimit").append("=").append(String.valueOf(geulimit));
        }
        if ((geuexpandurl!= null)&&(!StringUtils.isEmpty(String.valueOf(geuexpandurl)))) {
            queryString.append("&").append("geuexpandurl").append("=").append(String.valueOf(geuexpandurl));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenExtUrlUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenExtUrlUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenFileUsage(String format, String prop, String list, String geuprop, String geuoffset, String geuprotocol, String geuquery, String geunamespace, String geulimit, String geuexpandurl, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=fileusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((geuprop!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprop)))) {
            queryString.append("&").append("geuprop").append("=").append(String.valueOf(geuprop));
        }
        if ((geuoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(geuoffset)))) {
            queryString.append("&").append("geuoffset").append("=").append(String.valueOf(geuoffset));
        }
        if ((geuprotocol!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprotocol)))) {
            queryString.append("&").append("geuprotocol").append("=").append(String.valueOf(geuprotocol));
        }
        if ((geuquery!= null)&&(!StringUtils.isEmpty(String.valueOf(geuquery)))) {
            queryString.append("&").append("geuquery").append("=").append(String.valueOf(geuquery));
        }
        if ((geunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(geunamespace)))) {
            queryString.append("&").append("geunamespace").append("=").append(String.valueOf(geunamespace));
        }
        if ((geulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(geulimit)))) {
            queryString.append("&").append("geulimit").append("=").append(String.valueOf(geulimit));
        }
        if ((geuexpandurl!= null)&&(!StringUtils.isEmpty(String.valueOf(geuexpandurl)))) {
            queryString.append("&").append("geuexpandurl").append("=").append(String.valueOf(geuexpandurl));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenFileUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenFileUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenImages(String format, String prop, String list, String gimlimit, String gimcontinue, String gimimages, String gimdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=images";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gimlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gimlimit)))) {
            queryString.append("&").append("gimlimit").append("=").append(String.valueOf(gimlimit));
        }
        if ((gimcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gimcontinue)))) {
            queryString.append("&").append("gimcontinue").append("=").append(String.valueOf(gimcontinue));
        }
        if ((gimimages!= null)&&(!StringUtils.isEmpty(String.valueOf(gimimages)))) {
            queryString.append("&").append("gimimages").append("=").append(String.valueOf(gimimages));
        }
        if ((gimdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gimdir)))) {
            queryString.append("&").append("gimdir").append("=").append(String.valueOf(gimdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenImageUsage(String format, String prop, String list, String giutitle, String giupageid, String giucontinue, String giunamespace, String giudir, String giufilterredir, String giulimit, String giuredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=imageusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((giutitle!= null)&&(!StringUtils.isEmpty(String.valueOf(giutitle)))) {
            queryString.append("&").append("giutitle").append("=").append(String.valueOf(giutitle));
        }
        if ((giupageid!= null)&&(!StringUtils.isEmpty(String.valueOf(giupageid)))) {
            queryString.append("&").append("giupageid").append("=").append(String.valueOf(giupageid));
        }
        if ((giucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(giucontinue)))) {
            queryString.append("&").append("giucontinue").append("=").append(String.valueOf(giucontinue));
        }
        if ((giunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(giunamespace)))) {
            queryString.append("&").append("giunamespace").append("=").append(String.valueOf(giunamespace));
        }
        if ((giudir!= null)&&(!StringUtils.isEmpty(String.valueOf(giudir)))) {
            queryString.append("&").append("giudir").append("=").append(String.valueOf(giudir));
        }
        if ((giufilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(giufilterredir)))) {
            queryString.append("&").append("giufilterredir").append("=").append(String.valueOf(giufilterredir));
        }
        if ((giulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(giulimit)))) {
            queryString.append("&").append("giulimit").append("=").append(String.valueOf(giulimit));
        }
        if ((giuredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(giuredirect)))) {
            queryString.append("&").append("giuredirect").append("=").append(String.valueOf(giuredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenImageUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenImageUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenIwBackLinks(String format, String prop, String list, String giwblprefix, String giwbltitle, String giwblcontinue, String giwbllimit, String giwblprop, String giwbldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=iwbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((giwblprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblprefix)))) {
            queryString.append("&").append("giwblprefix").append("=").append(String.valueOf(giwblprefix));
        }
        if ((giwbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbltitle)))) {
            queryString.append("&").append("giwbltitle").append("=").append(String.valueOf(giwbltitle));
        }
        if ((giwblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblcontinue)))) {
            queryString.append("&").append("giwblcontinue").append("=").append(String.valueOf(giwblcontinue));
        }
        if ((giwbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbllimit)))) {
            queryString.append("&").append("giwbllimit").append("=").append(String.valueOf(giwbllimit));
        }
        if ((giwblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblprop)))) {
            queryString.append("&").append("giwblprop").append("=").append(String.valueOf(giwblprop));
        }
        if ((giwbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbldir)))) {
            queryString.append("&").append("giwbldir").append("=").append(String.valueOf(giwbldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenIwBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenIwBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenLangBackLinks(String format, String prop, String list, String glbllang, String glbltitle, String glblcontinue, String glbllimit, String glblprop, String glbldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=langbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((glbllang!= null)&&(!StringUtils.isEmpty(String.valueOf(glbllang)))) {
            queryString.append("&").append("glbllang").append("=").append(String.valueOf(glbllang));
        }
        if ((glbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(glbltitle)))) {
            queryString.append("&").append("glbltitle").append("=").append(String.valueOf(glbltitle));
        }
        if ((glblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(glblcontinue)))) {
            queryString.append("&").append("glblcontinue").append("=").append(String.valueOf(glblcontinue));
        }
        if ((glbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(glbllimit)))) {
            queryString.append("&").append("glbllimit").append("=").append(String.valueOf(glbllimit));
        }
        if ((glblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(glblprop)))) {
            queryString.append("&").append("glblprop").append("=").append(String.valueOf(glblprop));
        }
        if ((glbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(glbldir)))) {
            queryString.append("&").append("glbldir").append("=").append(String.valueOf(glbldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenLangBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenLangBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenLinks(String format, String prop, String list, String gplnamespace, String gpllimit, String gplcontinue, String gpltitles, String gpldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=links";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gplnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gplnamespace)))) {
            queryString.append("&").append("gplnamespace").append("=").append(String.valueOf(gplnamespace));
        }
        if ((gpllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpllimit)))) {
            queryString.append("&").append("gpllimit").append("=").append(String.valueOf(gpllimit));
        }
        if ((gplcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gplcontinue)))) {
            queryString.append("&").append("gplcontinue").append("=").append(String.valueOf(gplcontinue));
        }
        if ((gpltitles!= null)&&(!StringUtils.isEmpty(String.valueOf(gpltitles)))) {
            queryString.append("&").append("gpltitles").append("=").append(String.valueOf(gpltitles));
        }
        if ((gpldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gpldir)))) {
            queryString.append("&").append("gpldir").append("=").append(String.valueOf(gpldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenLinkShere(String format, String prop, String list, String glhprop, String glhnamespace, String glhshow, String glhlimit, String glhcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=linkshere";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((glhprop!= null)&&(!StringUtils.isEmpty(String.valueOf(glhprop)))) {
            queryString.append("&").append("glhprop").append("=").append(String.valueOf(glhprop));
        }
        if ((glhnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(glhnamespace)))) {
            queryString.append("&").append("glhnamespace").append("=").append(String.valueOf(glhnamespace));
        }
        if ((glhshow!= null)&&(!StringUtils.isEmpty(String.valueOf(glhshow)))) {
            queryString.append("&").append("glhshow").append("=").append(String.valueOf(glhshow));
        }
        if ((glhlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(glhlimit)))) {
            queryString.append("&").append("glhlimit").append("=").append(String.valueOf(glhlimit));
        }
        if ((glhcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(glhcontinue)))) {
            queryString.append("&").append("glhcontinue").append("=").append(String.valueOf(glhcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenLinkShere", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenLinkShere", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenMessageCollection(String format, String prop, String list, String gmcgroup, String gmclanguage, String gmclimit, String gmcoffset, String gmcfilter, String gmcprop, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=messagecollection";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gmcgroup!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcgroup)))) {
            queryString.append("&").append("gmcgroup").append("=").append(String.valueOf(gmcgroup));
        }
        if ((gmclanguage!= null)&&(!StringUtils.isEmpty(String.valueOf(gmclanguage)))) {
            queryString.append("&").append("gmclanguage").append("=").append(String.valueOf(gmclanguage));
        }
        if ((gmclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gmclimit)))) {
            queryString.append("&").append("gmclimit").append("=").append(String.valueOf(gmclimit));
        }
        if ((gmcoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcoffset)))) {
            queryString.append("&").append("gmcoffset").append("=").append(String.valueOf(gmcoffset));
        }
        if ((gmcfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcfilter)))) {
            queryString.append("&").append("gmcfilter").append("=").append(String.valueOf(gmcfilter));
        }
        if ((gmcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcprop)))) {
            queryString.append("&").append("gmcprop").append("=").append(String.valueOf(gmcprop));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenMessageCollection", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenMessageCollection", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenPagesWithProp(String format, String prop, String list, String gpwppropname, String gpwpprop, String gpwpcontinue, String gpwplimit, String gpwpdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=pageswithprop";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gpwppropname!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwppropname)))) {
            queryString.append("&").append("gpwppropname").append("=").append(String.valueOf(gpwppropname));
        }
        if ((gpwpprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpprop)))) {
            queryString.append("&").append("gpwpprop").append("=").append(String.valueOf(gpwpprop));
        }
        if ((gpwpcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpcontinue)))) {
            queryString.append("&").append("gpwpcontinue").append("=").append(String.valueOf(gpwpcontinue));
        }
        if ((gpwplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwplimit)))) {
            queryString.append("&").append("gpwplimit").append("=").append(String.valueOf(gpwplimit));
        }
        if ((gpwpdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpdir)))) {
            queryString.append("&").append("gpwpdir").append("=").append(String.valueOf(gpwpdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenPagesWithProp", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenPagesWithProp", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenPrefixSearch(String format, String prop, String list, String gpssearch, String gpsnamespace, String gpslimit, String gpsoffset, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=prefixsearch";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gpssearch!= null)&&(!StringUtils.isEmpty(String.valueOf(gpssearch)))) {
            queryString.append("&").append("gpssearch").append("=").append(String.valueOf(gpssearch));
        }
        if ((gpsnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gpsnamespace)))) {
            queryString.append("&").append("gpsnamespace").append("=").append(String.valueOf(gpsnamespace));
        }
        if ((gpslimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpslimit)))) {
            queryString.append("&").append("gpslimit").append("=").append(String.valueOf(gpslimit));
        }
        if ((gpsoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gpsoffset)))) {
            queryString.append("&").append("gpsoffset").append("=").append(String.valueOf(gpsoffset));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenPrefixSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenPrefixSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenProtectedTitles(String format, String prop, String list, String gptnamespace, String gptlevel, String gptlimit, String gptdir, String gptstart, String gptend, String gptprop, String ptcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=protectedtitles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gptnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gptnamespace)))) {
            queryString.append("&").append("gptnamespace").append("=").append(String.valueOf(gptnamespace));
        }
        if ((gptlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(gptlevel)))) {
            queryString.append("&").append("gptlevel").append("=").append(String.valueOf(gptlevel));
        }
        if ((gptlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gptlimit)))) {
            queryString.append("&").append("gptlimit").append("=").append(String.valueOf(gptlimit));
        }
        if ((gptdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gptdir)))) {
            queryString.append("&").append("gptdir").append("=").append(String.valueOf(gptdir));
        }
        if ((gptstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gptstart)))) {
            queryString.append("&").append("gptstart").append("=").append(String.valueOf(gptstart));
        }
        if ((gptend!= null)&&(!StringUtils.isEmpty(String.valueOf(gptend)))) {
            queryString.append("&").append("gptend").append("=").append(String.valueOf(gptend));
        }
        if ((gptprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gptprop)))) {
            queryString.append("&").append("gptprop").append("=").append(String.valueOf(gptprop));
        }
        if ((ptcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ptcontinue)))) {
            queryString.append("&").append("gptcontinue").append("=").append(String.valueOf(ptcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenProtectedTitles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenProtectedTitles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenQueryPage(String format, String prop, String list, String gqppage, String gqpoffset, String gqplimit, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=querypage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gqppage!= null)&&(!StringUtils.isEmpty(String.valueOf(gqppage)))) {
            queryString.append("&").append("gqppage").append("=").append(String.valueOf(gqppage));
        }
        if ((gqpoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gqpoffset)))) {
            queryString.append("&").append("gqpoffset").append("=").append(String.valueOf(gqpoffset));
        }
        if ((gqplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gqplimit)))) {
            queryString.append("&").append("gqplimit").append("=").append(String.valueOf(gqplimit));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenQueryPage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenQueryPage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenRandom(String format, String prop, String list, String grnnamespace, String grnlimit, String grnredirect, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=random";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((grnnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grnnamespace)))) {
            queryString.append("&").append("grnnamespace").append("=").append(String.valueOf(grnnamespace));
        }
        if ((grnlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grnlimit)))) {
            queryString.append("&").append("grnlimit").append("=").append(String.valueOf(grnlimit));
        }
        if ((grnredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(grnredirect)))) {
            queryString.append("&").append("grnredirect").append("=").append(String.valueOf(grnredirect));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenRandom", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenRandom", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenRecentChanges(String format, String prop, String list, String grcstart, String grcend, String grcdir, String grcnamespace, String grcuser, String grcexcludeuser, String grctag, String grcprop, String grcshow, String grclimit, String grctype, String grctoponly, String grccontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=recentchanges";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((grcstart!= null)&&(!StringUtils.isEmpty(String.valueOf(grcstart)))) {
            queryString.append("&").append("grcstart").append("=").append(String.valueOf(grcstart));
        }
        if ((grcend!= null)&&(!StringUtils.isEmpty(String.valueOf(grcend)))) {
            queryString.append("&").append("grcend").append("=").append(String.valueOf(grcend));
        }
        if ((grcdir!= null)&&(!StringUtils.isEmpty(String.valueOf(grcdir)))) {
            queryString.append("&").append("grcdir").append("=").append(String.valueOf(grcdir));
        }
        if ((grcnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grcnamespace)))) {
            queryString.append("&").append("grcnamespace").append("=").append(String.valueOf(grcnamespace));
        }
        if ((grcuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grcuser)))) {
            queryString.append("&").append("grcuser").append("=").append(String.valueOf(grcuser));
        }
        if ((grcexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grcexcludeuser)))) {
            queryString.append("&").append("grcexcludeuser").append("=").append(String.valueOf(grcexcludeuser));
        }
        if ((grctag!= null)&&(!StringUtils.isEmpty(String.valueOf(grctag)))) {
            queryString.append("&").append("grctag").append("=").append(String.valueOf(grctag));
        }
        if ((grcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grcprop)))) {
            queryString.append("&").append("grcprop").append("=").append(String.valueOf(grcprop));
        }
        if ((grcshow!= null)&&(!StringUtils.isEmpty(String.valueOf(grcshow)))) {
            queryString.append("&").append("grcshow").append("=").append(String.valueOf(grcshow));
        }
        if ((grclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grclimit)))) {
            queryString.append("&").append("grclimit").append("=").append(String.valueOf(grclimit));
        }
        if ((grctype!= null)&&(!StringUtils.isEmpty(String.valueOf(grctype)))) {
            queryString.append("&").append("grctype").append("=").append(String.valueOf(grctype));
        }
        if ((grctoponly!= null)&&(!StringUtils.isEmpty(String.valueOf(grctoponly)))) {
            queryString.append("&").append("grctoponly").append("=").append(String.valueOf(grctoponly));
        }
        if ((grccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grccontinue)))) {
            queryString.append("&").append("grccontinue").append("=").append(String.valueOf(grccontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenRecentChanges", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenRecentChanges", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenRedirects(String format, String prop, String list, String grdprop, String grdnamespace, String grdshow, String grdlimit, String grdcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=redirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((grdprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grdprop)))) {
            queryString.append("&").append("grdprop").append("=").append(String.valueOf(grdprop));
        }
        if ((grdnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grdnamespace)))) {
            queryString.append("&").append("grdnamespace").append("=").append(String.valueOf(grdnamespace));
        }
        if ((grdshow!= null)&&(!StringUtils.isEmpty(String.valueOf(grdshow)))) {
            queryString.append("&").append("grdshow").append("=").append(String.valueOf(grdshow));
        }
        if ((grdlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grdlimit)))) {
            queryString.append("&").append("grdlimit").append("=").append(String.valueOf(grdlimit));
        }
        if ((grdcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grdcontinue)))) {
            queryString.append("&").append("grdcontinue").append("=").append(String.valueOf(grdcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenRevisions(String format, String prop, String list, String grvprop, String grvlimit, String grvexpandtemplates, String grvgeneratexml, String grvparse, String grvsection, String grvdiffto, String grvdifftotext, String grvcontentformat, String grvstartid, String grvendid, String grvstart, String grvend, String grvdir, String grvuser, String grvexcludeuser, String grvtag, String grvcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=revisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((grvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grvprop)))) {
            queryString.append("&").append("grvprop").append("=").append(String.valueOf(grvprop));
        }
        if ((grvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grvlimit)))) {
            queryString.append("&").append("grvlimit").append("=").append(String.valueOf(grvlimit));
        }
        if ((grvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(grvexpandtemplates)))) {
            queryString.append("&").append("grvexpandtemplates").append("=").append(String.valueOf(grvexpandtemplates));
        }
        if ((grvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(grvgeneratexml)))) {
            queryString.append("&").append("grvgeneratexml").append("=").append(String.valueOf(grvgeneratexml));
        }
        if ((grvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(grvparse)))) {
            queryString.append("&").append("grvparse").append("=").append(String.valueOf(grvparse));
        }
        if ((grvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(grvsection)))) {
            queryString.append("&").append("grvsection").append("=").append(String.valueOf(grvsection));
        }
        if ((grvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdiffto)))) {
            queryString.append("&").append("grvdiffto").append("=").append(String.valueOf(grvdiffto));
        }
        if ((grvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdifftotext)))) {
            queryString.append("&").append("grvdifftotext").append("=").append(String.valueOf(grvdifftotext));
        }
        if ((grvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(grvcontentformat)))) {
            queryString.append("&").append("grvcontentformat").append("=").append(String.valueOf(grvcontentformat));
        }
        if ((grvstartid!= null)&&(!StringUtils.isEmpty(String.valueOf(grvstartid)))) {
            queryString.append("&").append("grvstartid").append("=").append(String.valueOf(grvstartid));
        }
        if ((grvendid!= null)&&(!StringUtils.isEmpty(String.valueOf(grvendid)))) {
            queryString.append("&").append("grvendid").append("=").append(String.valueOf(grvendid));
        }
        if ((grvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(grvstart)))) {
            queryString.append("&").append("grvstart").append("=").append(String.valueOf(grvstart));
        }
        if ((grvend!= null)&&(!StringUtils.isEmpty(String.valueOf(grvend)))) {
            queryString.append("&").append("grvend").append("=").append(String.valueOf(grvend));
        }
        if ((grvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdir)))) {
            queryString.append("&").append("grvdir").append("=").append(String.valueOf(grvdir));
        }
        if ((grvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grvuser)))) {
            queryString.append("&").append("grvuser").append("=").append(String.valueOf(grvuser));
        }
        if ((grvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grvexcludeuser)))) {
            queryString.append("&").append("grvexcludeuser").append("=").append(String.valueOf(grvexcludeuser));
        }
        if ((grvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(grvtag)))) {
            queryString.append("&").append("grvtag").append("=").append(String.valueOf(grvtag));
        }
        if ((grvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grvcontinue)))) {
            queryString.append("&").append("grvcontinue").append("=").append(String.valueOf(grvcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenSearch(String format, String prop, String list, String gsrsearch, String gsrnamespace, String gsrwhat, String gsrinfo, String gsrprop, String gsroffset, String gsrlimit, String gsrinterwiki, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=search";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gsrsearch!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrsearch)))) {
            queryString.append("&").append("gsrsearch").append("=").append(String.valueOf(gsrsearch));
        }
        if ((gsrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrnamespace)))) {
            queryString.append("&").append("gsrnamespace").append("=").append(String.valueOf(gsrnamespace));
        }
        if ((gsrwhat!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrwhat)))) {
            queryString.append("&").append("gsrwhat").append("=").append(String.valueOf(gsrwhat));
        }
        if ((gsrinfo!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrinfo)))) {
            queryString.append("&").append("gsrinfo").append("=").append(String.valueOf(gsrinfo));
        }
        if ((gsrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrprop)))) {
            queryString.append("&").append("gsrprop").append("=").append(String.valueOf(gsrprop));
        }
        if ((gsroffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gsroffset)))) {
            queryString.append("&").append("gsroffset").append("=").append(String.valueOf(gsroffset));
        }
        if ((gsrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrlimit)))) {
            queryString.append("&").append("gsrlimit").append("=").append(String.valueOf(gsrlimit));
        }
        if ((gsrinterwiki!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrinterwiki)))) {
            queryString.append("&").append("gsrinterwiki").append("=").append(String.valueOf(gsrinterwiki));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenTemplates(String format, String prop, String list, String gtlnamespace, String gtllimit, String gtlcontinue, String gtltemplates, String gtldir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=templates";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gtlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gtlnamespace)))) {
            queryString.append("&").append("gtlnamespace").append("=").append(String.valueOf(gtlnamespace));
        }
        if ((gtllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gtllimit)))) {
            queryString.append("&").append("gtllimit").append("=").append(String.valueOf(gtllimit));
        }
        if ((gtlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gtlcontinue)))) {
            queryString.append("&").append("gtlcontinue").append("=").append(String.valueOf(gtlcontinue));
        }
        if ((gtltemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gtltemplates)))) {
            queryString.append("&").append("gtltemplates").append("=").append(String.valueOf(gtltemplates));
        }
        if ((gtldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gtldir)))) {
            queryString.append("&").append("gtldir").append("=").append(String.valueOf(gtldir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenTemplates", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenTemplates", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenTranscludedIn(String format, String prop, String list, String gtiprop, String gtinamespace, String gtishow, String gtilimit, String gticontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=transcludedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gtiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gtiprop)))) {
            queryString.append("&").append("gtiprop").append("=").append(String.valueOf(gtiprop));
        }
        if ((gtinamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gtinamespace)))) {
            queryString.append("&").append("gtinamespace").append("=").append(String.valueOf(gtinamespace));
        }
        if ((gtishow!= null)&&(!StringUtils.isEmpty(String.valueOf(gtishow)))) {
            queryString.append("&").append("gtishow").append("=").append(String.valueOf(gtishow));
        }
        if ((gtilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gtilimit)))) {
            queryString.append("&").append("gtilimit").append("=").append(String.valueOf(gtilimit));
        }
        if ((gticontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gticontinue)))) {
            queryString.append("&").append("gticontinue").append("=").append(String.valueOf(gticontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenTranscludedIn", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenTranscludedIn", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenWatchList(String format, String prop, String list, String gwlallrev, String gwlstart, String gwlend, String gwlnamespace, String gwluser, String gwlexcludeuser, String gwldir, String gwllimit, String gwlprop, String gwlshow, String gwltype, String gwlowner, String gwltoken, String gwlcontinue, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=watchlist";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gwlallrev!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlallrev)))) {
            queryString.append("&").append("gwlallrev").append("=").append(String.valueOf(gwlallrev));
        }
        if ((gwlstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlstart)))) {
            queryString.append("&").append("gwlstart").append("=").append(String.valueOf(gwlstart));
        }
        if ((gwlend!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlend)))) {
            queryString.append("&").append("gwlend").append("=").append(String.valueOf(gwlend));
        }
        if ((gwlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlnamespace)))) {
            queryString.append("&").append("gwlnamespace").append("=").append(String.valueOf(gwlnamespace));
        }
        if ((gwluser!= null)&&(!StringUtils.isEmpty(String.valueOf(gwluser)))) {
            queryString.append("&").append("gwluser").append("=").append(String.valueOf(gwluser));
        }
        if ((gwlexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlexcludeuser)))) {
            queryString.append("&").append("gwlexcludeuser").append("=").append(String.valueOf(gwlexcludeuser));
        }
        if ((gwldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gwldir)))) {
            queryString.append("&").append("gwldir").append("=").append(String.valueOf(gwldir));
        }
        if ((gwllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gwllimit)))) {
            queryString.append("&").append("gwllimit").append("=").append(String.valueOf(gwllimit));
        }
        if ((gwlprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlprop)))) {
            queryString.append("&").append("gwlprop").append("=").append(String.valueOf(gwlprop));
        }
        if ((gwlshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlshow)))) {
            queryString.append("&").append("gwlshow").append("=").append(String.valueOf(gwlshow));
        }
        if ((gwltype!= null)&&(!StringUtils.isEmpty(String.valueOf(gwltype)))) {
            queryString.append("&").append("gwltype").append("=").append(String.valueOf(gwltype));
        }
        if ((gwlowner!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlowner)))) {
            queryString.append("&").append("gwlowner").append("=").append(String.valueOf(gwlowner));
        }
        if ((gwltoken!= null)&&(!StringUtils.isEmpty(String.valueOf(gwltoken)))) {
            queryString.append("&").append("gwltoken").append("=").append(String.valueOf(gwltoken));
        }
        if ((gwlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlcontinue)))) {
            queryString.append("&").append("gwlcontinue").append("=").append(String.valueOf(gwlcontinue));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenWatchList", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenWatchList", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String queryGenWatchListRaw(String format, String prop, String list, String gwrcontinue, String gwrnamespace, String gwrlimit, String gwrprop, String gwrshow, String gwrowner, String gwrtoken, String gwrdir, String indexpageids, String export, String exportnowrap, String iwurl, String continueId, String titles, String pageids, String revids, String generator, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&generator=watchlistraw";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((list!= null)&&(!StringUtils.isEmpty(String.valueOf(list)))) {
            queryString.append("&").append("list").append("=").append(String.valueOf(list));
        }
        if ((gwrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrcontinue)))) {
            queryString.append("&").append("gwrcontinue").append("=").append(String.valueOf(gwrcontinue));
        }
        if ((gwrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrnamespace)))) {
            queryString.append("&").append("gwrnamespace").append("=").append(String.valueOf(gwrnamespace));
        }
        if ((gwrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrlimit)))) {
            queryString.append("&").append("gwrlimit").append("=").append(String.valueOf(gwrlimit));
        }
        if ((gwrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrprop)))) {
            queryString.append("&").append("gwrprop").append("=").append(String.valueOf(gwrprop));
        }
        if ((gwrshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrshow)))) {
            queryString.append("&").append("gwrshow").append("=").append(String.valueOf(gwrshow));
        }
        if ((gwrowner!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrowner)))) {
            queryString.append("&").append("gwrowner").append("=").append(String.valueOf(gwrowner));
        }
        if ((gwrtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrtoken)))) {
            queryString.append("&").append("gwrtoken").append("=").append(String.valueOf(gwrtoken));
        }
        if ((gwrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrdir)))) {
            queryString.append("&").append("gwrdir").append("=").append(String.valueOf(gwrdir));
        }
        if ((indexpageids!= null)&&(!StringUtils.isEmpty(String.valueOf(indexpageids)))) {
            queryString.append("&").append("indexpageids").append("=").append(String.valueOf(indexpageids));
        }
        if ((export!= null)&&(!StringUtils.isEmpty(String.valueOf(export)))) {
            queryString.append("&").append("export").append("=").append(String.valueOf(export));
        }
        if ((exportnowrap!= null)&&(!StringUtils.isEmpty(String.valueOf(exportnowrap)))) {
            queryString.append("&").append("exportnowrap").append("=").append(String.valueOf(exportnowrap));
        }
        if ((iwurl!= null)&&(!StringUtils.isEmpty(String.valueOf(iwurl)))) {
            queryString.append("&").append("iwurl").append("=").append(String.valueOf(iwurl));
        }
        if ((continueId!= null)&&(!StringUtils.isEmpty(String.valueOf(continueId)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueId));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((generator!= null)&&(!StringUtils.isEmpty(String.valueOf(generator)))) {
            queryString.append("&").append("generator").append("=").append(String.valueOf(generator));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("queryGenWatchListRaw", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named queryGenWatchListRaw", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String login(String lgname, String lgpassword, String lgdomain, String token)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=login";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((lgname!= null)&&(!StringUtils.isEmpty(String.valueOf(lgname)))) {
            queryString.append("&").append("lgname").append("=").append(String.valueOf(lgname));
        }
        if ((lgpassword!= null)&&(!StringUtils.isEmpty(String.valueOf(lgpassword)))) {
            queryString.append("&").append("lgpassword").append("=").append(String.valueOf(lgpassword));
        }
        if ((lgdomain!= null)&&(!StringUtils.isEmpty(String.valueOf(lgdomain)))) {
            queryString.append("&").append("lgdomain").append("=").append(String.valueOf(lgdomain));
        }
        if ((token!= null)&&(!StringUtils.isEmpty(String.valueOf(token)))) {
            queryString.append("&").append("token").append("=").append(String.valueOf(token));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("login", String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named login", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String getmainModule(String action, String format, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((action!= null)&&(!StringUtils.isEmpty(String.valueOf(action)))) {
            queryString.append("&").append("action").append("=").append(String.valueOf(action));
        }
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("getmainModule", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named getmainModule", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String logout()
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=logout";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("logout");
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named logout", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String openSearch(String format, String search, String limit, String namespace, String suggest, String redirects, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=opensearch";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((search!= null)&&(!StringUtils.isEmpty(String.valueOf(search)))) {
            queryString.append("&").append("search").append("=").append(String.valueOf(search));
        }
        if ((limit!= null)&&(!StringUtils.isEmpty(String.valueOf(limit)))) {
            queryString.append("&").append("limit").append("=").append(String.valueOf(limit));
        }
        if ((namespace!= null)&&(!StringUtils.isEmpty(String.valueOf(namespace)))) {
            queryString.append("&").append("namespace").append("=").append(String.valueOf(namespace));
        }
        if ((suggest!= null)&&(!StringUtils.isEmpty(String.valueOf(suggest)))) {
            queryString.append("&").append("suggest").append("=").append(String.valueOf(suggest));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("openSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named openSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String parseContent(String format, String title, String text, String summary, String page, String pageid, String redirects, String oldid, String prop, String pst, String onlypst, String effectivelanglinks, String section, String sectiontitle, String disablepp, String disableeditsection, String generatexml, String preview, String sectionpreview, String disabletoc, String contentformat, String contentmodel, String mobileformat, String noimages, String mainpage, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=parse";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((title!= null)&&(!StringUtils.isEmpty(String.valueOf(title)))) {
            queryString.append("&").append("title").append("=").append(String.valueOf(title));
        }
        if ((text!= null)&&(!StringUtils.isEmpty(String.valueOf(text)))) {
            queryString.append("&").append("text").append("=").append(String.valueOf(text));
        }
        if ((summary!= null)&&(!StringUtils.isEmpty(String.valueOf(summary)))) {
            queryString.append("&").append("summary").append("=").append(String.valueOf(summary));
        }
        if ((page!= null)&&(!StringUtils.isEmpty(String.valueOf(page)))) {
            queryString.append("&").append("page").append("=").append(String.valueOf(page));
        }
        if ((pageid!= null)&&(!StringUtils.isEmpty(String.valueOf(pageid)))) {
            queryString.append("&").append("pageid").append("=").append(String.valueOf(pageid));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((oldid!= null)&&(!StringUtils.isEmpty(String.valueOf(oldid)))) {
            queryString.append("&").append("oldid").append("=").append(String.valueOf(oldid));
        }
        if ((prop!= null)&&(!StringUtils.isEmpty(String.valueOf(prop)))) {
            queryString.append("&").append("prop").append("=").append(String.valueOf(prop));
        }
        if ((pst!= null)&&(!StringUtils.isEmpty(String.valueOf(pst)))) {
            queryString.append("&").append("pst").append("=").append(String.valueOf(pst));
        }
        if ((onlypst!= null)&&(!StringUtils.isEmpty(String.valueOf(onlypst)))) {
            queryString.append("&").append("onlypst").append("=").append(String.valueOf(onlypst));
        }
        if ((effectivelanglinks!= null)&&(!StringUtils.isEmpty(String.valueOf(effectivelanglinks)))) {
            queryString.append("&").append("effectivelanglinks").append("=").append(String.valueOf(effectivelanglinks));
        }
        if ((section!= null)&&(!StringUtils.isEmpty(String.valueOf(section)))) {
            queryString.append("&").append("section").append("=").append(String.valueOf(section));
        }
        if ((sectiontitle!= null)&&(!StringUtils.isEmpty(String.valueOf(sectiontitle)))) {
            queryString.append("&").append("sectiontitle").append("=").append(String.valueOf(sectiontitle));
        }
        if ((disablepp!= null)&&(!StringUtils.isEmpty(String.valueOf(disablepp)))) {
            queryString.append("&").append("disablepp").append("=").append(String.valueOf(disablepp));
        }
        if ((disableeditsection!= null)&&(!StringUtils.isEmpty(String.valueOf(disableeditsection)))) {
            queryString.append("&").append("disableeditsection").append("=").append(String.valueOf(disableeditsection));
        }
        if ((generatexml!= null)&&(!StringUtils.isEmpty(String.valueOf(generatexml)))) {
            queryString.append("&").append("generatexml").append("=").append(String.valueOf(generatexml));
        }
        if ((preview!= null)&&(!StringUtils.isEmpty(String.valueOf(preview)))) {
            queryString.append("&").append("preview").append("=").append(String.valueOf(preview));
        }
        if ((sectionpreview!= null)&&(!StringUtils.isEmpty(String.valueOf(sectionpreview)))) {
            queryString.append("&").append("sectionpreview").append("=").append(String.valueOf(sectionpreview));
        }
        if ((disabletoc!= null)&&(!StringUtils.isEmpty(String.valueOf(disabletoc)))) {
            queryString.append("&").append("disabletoc").append("=").append(String.valueOf(disabletoc));
        }
        if ((contentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(contentformat)))) {
            queryString.append("&").append("contentformat").append("=").append(String.valueOf(contentformat));
        }
        if ((contentmodel!= null)&&(!StringUtils.isEmpty(String.valueOf(contentmodel)))) {
            queryString.append("&").append("contentmodel").append("=").append(String.valueOf(contentmodel));
        }
        if ((mobileformat!= null)&&(!StringUtils.isEmpty(String.valueOf(mobileformat)))) {
            queryString.append("&").append("mobileformat").append("=").append(String.valueOf(mobileformat));
        }
        if ((noimages!= null)&&(!StringUtils.isEmpty(String.valueOf(noimages)))) {
            queryString.append("&").append("noimages").append("=").append(String.valueOf(noimages));
        }
        if ((mainpage!= null)&&(!StringUtils.isEmpty(String.valueOf(mainpage)))) {
            queryString.append("&").append("mainpage").append("=").append(String.valueOf(mainpage));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("parseContent", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named parseContent", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllCategories(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gacfrom, String gaccontinue, String gacto, String gacprefix, String gacdir, String gacmin, String gacmax, String gaclimit, String gacprop, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=allcategories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gacfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gacfrom)))) {
            queryString.append("&").append("gacfrom").append("=").append(String.valueOf(gacfrom));
        }
        if ((gaccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gaccontinue)))) {
            queryString.append("&").append("gaccontinue").append("=").append(String.valueOf(gaccontinue));
        }
        if ((gacto!= null)&&(!StringUtils.isEmpty(String.valueOf(gacto)))) {
            queryString.append("&").append("gacto").append("=").append(String.valueOf(gacto));
        }
        if ((gacprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gacprefix)))) {
            queryString.append("&").append("gacprefix").append("=").append(String.valueOf(gacprefix));
        }
        if ((gacdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gacdir)))) {
            queryString.append("&").append("gacdir").append("=").append(String.valueOf(gacdir));
        }
        if ((gacmin!= null)&&(!StringUtils.isEmpty(String.valueOf(gacmin)))) {
            queryString.append("&").append("gacmin").append("=").append(String.valueOf(gacmin));
        }
        if ((gacmax!= null)&&(!StringUtils.isEmpty(String.valueOf(gacmax)))) {
            queryString.append("&").append("gacmax").append("=").append(String.valueOf(gacmax));
        }
        if ((gaclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaclimit)))) {
            queryString.append("&").append("gaclimit").append("=").append(String.valueOf(gaclimit));
        }
        if ((gacprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gacprop)))) {
            queryString.append("&").append("gacprop").append("=").append(String.valueOf(gacprop));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllDeletedRevisions(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gadrprop, String gadrlimit, String gadrexpandtemplates, String gadrgeneratexml, String gadrparse, String gadrsection, String gadrdiffto, String gadrdifftotext, String gadrcontentformat, String gadruser, String gadrnamespace, String gadrstart, String gadrend, String gadrdir, String gadrfrom, String gadrto, String gadrprefix, String gadrexcludeuser, String gadrtag, String gadrcontinue, String gadrgeneratetitles, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=alldeletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gadrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrprop)))) {
            queryString.append("&").append("gadrprop").append("=").append(String.valueOf(gadrprop));
        }
        if ((gadrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrlimit)))) {
            queryString.append("&").append("gadrlimit").append("=").append(String.valueOf(gadrlimit));
        }
        if ((gadrexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrexpandtemplates)))) {
            queryString.append("&").append("gadrexpandtemplates").append("=").append(String.valueOf(gadrexpandtemplates));
        }
        if ((gadrgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrgeneratexml)))) {
            queryString.append("&").append("gadrgeneratexml").append("=").append(String.valueOf(gadrgeneratexml));
        }
        if ((gadrparse!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrparse)))) {
            queryString.append("&").append("gadrparse").append("=").append(String.valueOf(gadrparse));
        }
        if ((gadrsection!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrsection)))) {
            queryString.append("&").append("gadrsection").append("=").append(String.valueOf(gadrsection));
        }
        if ((gadrdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdiffto)))) {
            queryString.append("&").append("gadrdiffto").append("=").append(String.valueOf(gadrdiffto));
        }
        if ((gadrdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdifftotext)))) {
            queryString.append("&").append("gadrdifftotext").append("=").append(String.valueOf(gadrdifftotext));
        }
        if ((gadrcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrcontentformat)))) {
            queryString.append("&").append("gadrcontentformat").append("=").append(String.valueOf(gadrcontentformat));
        }
        if ((gadruser!= null)&&(!StringUtils.isEmpty(String.valueOf(gadruser)))) {
            queryString.append("&").append("gadruser").append("=").append(String.valueOf(gadruser));
        }
        if ((gadrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrnamespace)))) {
            queryString.append("&").append("gadrnamespace").append("=").append(String.valueOf(gadrnamespace));
        }
        if ((gadrstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrstart)))) {
            queryString.append("&").append("gadrstart").append("=").append(String.valueOf(gadrstart));
        }
        if ((gadrend!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrend)))) {
            queryString.append("&").append("gadrend").append("=").append(String.valueOf(gadrend));
        }
        if ((gadrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrdir)))) {
            queryString.append("&").append("gadrdir").append("=").append(String.valueOf(gadrdir));
        }
        if ((gadrfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrfrom)))) {
            queryString.append("&").append("gadrfrom").append("=").append(String.valueOf(gadrfrom));
        }
        if ((gadrto!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrto)))) {
            queryString.append("&").append("gadrto").append("=").append(String.valueOf(gadrto));
        }
        if ((gadrprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrprefix)))) {
            queryString.append("&").append("gadrprefix").append("=").append(String.valueOf(gadrprefix));
        }
        if ((gadrexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrexcludeuser)))) {
            queryString.append("&").append("gadrexcludeuser").append("=").append(String.valueOf(gadrexcludeuser));
        }
        if ((gadrtag!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrtag)))) {
            queryString.append("&").append("gadrtag").append("=").append(String.valueOf(gadrtag));
        }
        if ((gadrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrcontinue)))) {
            queryString.append("&").append("gadrcontinue").append("=").append(String.valueOf(gadrcontinue));
        }
        if ((gadrgeneratetitles!= null)&&(!StringUtils.isEmpty(String.valueOf(gadrgeneratetitles)))) {
            queryString.append("&").append("gadrgeneratetitles").append("=").append(String.valueOf(gadrgeneratetitles));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllFileUsages(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gafcontinue, String gaffrom, String gafto, String gafprefix, String gafunique, String gafprop, String gaflimit, String gafdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=allfileusages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gafcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gafcontinue)))) {
            queryString.append("&").append("gafcontinue").append("=").append(String.valueOf(gafcontinue));
        }
        if ((gaffrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gaffrom)))) {
            queryString.append("&").append("gaffrom").append("=").append(String.valueOf(gaffrom));
        }
        if ((gafto!= null)&&(!StringUtils.isEmpty(String.valueOf(gafto)))) {
            queryString.append("&").append("gafto").append("=").append(String.valueOf(gafto));
        }
        if ((gafprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gafprefix)))) {
            queryString.append("&").append("gafprefix").append("=").append(String.valueOf(gafprefix));
        }
        if ((gafunique!= null)&&(!StringUtils.isEmpty(String.valueOf(gafunique)))) {
            queryString.append("&").append("gafunique").append("=").append(String.valueOf(gafunique));
        }
        if ((gafprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gafprop)))) {
            queryString.append("&").append("gafprop").append("=").append(String.valueOf(gafprop));
        }
        if ((gaflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaflimit)))) {
            queryString.append("&").append("gaflimit").append("=").append(String.valueOf(gaflimit));
        }
        if ((gafdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gafdir)))) {
            queryString.append("&").append("gafdir").append("=").append(String.valueOf(gafdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllFileUsages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllFileUsages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllImages(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gaisort, String gaidir, String gaifrom, String gaito, String gaicontinue, String gaistart, String gaiend, String gaiprop, String gaiprefix, String gaiminsize, String gaimaxsize, String gaisha1, String gaisha1base36, String gaiuser, String gaifilterbots, String gaimime, String gailimit, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=allimages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gaisort!= null)&&(!StringUtils.isEmpty(String.valueOf(gaisort)))) {
            queryString.append("&").append("gaisort").append("=").append(String.valueOf(gaisort));
        }
        if ((gaidir!= null)&&(!StringUtils.isEmpty(String.valueOf(gaidir)))) {
            queryString.append("&").append("gaidir").append("=").append(String.valueOf(gaidir));
        }
        if ((gaifrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gaifrom)))) {
            queryString.append("&").append("gaifrom").append("=").append(String.valueOf(gaifrom));
        }
        if ((gaito!= null)&&(!StringUtils.isEmpty(String.valueOf(gaito)))) {
            queryString.append("&").append("gaito").append("=").append(String.valueOf(gaito));
        }
        if ((gaicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gaicontinue)))) {
            queryString.append("&").append("gaicontinue").append("=").append(String.valueOf(gaicontinue));
        }
        if ((gaistart!= null)&&(!StringUtils.isEmpty(String.valueOf(gaistart)))) {
            queryString.append("&").append("gaistart").append("=").append(String.valueOf(gaistart));
        }
        if ((gaiend!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiend)))) {
            queryString.append("&").append("gaiend").append("=").append(String.valueOf(gaiend));
        }
        if ((gaiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiprop)))) {
            queryString.append("&").append("gaiprop").append("=").append(String.valueOf(gaiprop));
        }
        if ((gaiprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiprefix)))) {
            queryString.append("&").append("gaiprefix").append("=").append(String.valueOf(gaiprefix));
        }
        if ((gaiminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiminsize)))) {
            queryString.append("&").append("gaiminsize").append("=").append(String.valueOf(gaiminsize));
        }
        if ((gaimaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gaimaxsize)))) {
            queryString.append("&").append("gaimaxsize").append("=").append(String.valueOf(gaimaxsize));
        }
        if ((gaisha1 != null)&&(!StringUtils.isEmpty(String.valueOf(gaisha1)))) {
            queryString.append("&").append("gaisha1").append("=").append(String.valueOf(gaisha1));
        }
        if ((gaisha1base36 != null)&&(!StringUtils.isEmpty(String.valueOf(gaisha1base36)))) {
            queryString.append("&").append("gaisha1base36").append("=").append(String.valueOf(gaisha1base36));
        }
        if ((gaiuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gaiuser)))) {
            queryString.append("&").append("gaiuser").append("=").append(String.valueOf(gaiuser));
        }
        if ((gaifilterbots!= null)&&(!StringUtils.isEmpty(String.valueOf(gaifilterbots)))) {
            queryString.append("&").append("gaifilterbots").append("=").append(String.valueOf(gaifilterbots));
        }
        if ((gaimime!= null)&&(!StringUtils.isEmpty(String.valueOf(gaimime)))) {
            queryString.append("&").append("gaimime").append("=").append(String.valueOf(gaimime));
        }
        if ((gailimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gailimit)))) {
            queryString.append("&").append("gailimit").append("=").append(String.valueOf(gailimit));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllLinks(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String galcontinue, String galfrom, String galto, String galprefix, String galunique, String galprop, String galnamespace, String gallimit, String galdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=alllinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((galcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(galcontinue)))) {
            queryString.append("&").append("galcontinue").append("=").append(String.valueOf(galcontinue));
        }
        if ((galfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(galfrom)))) {
            queryString.append("&").append("galfrom").append("=").append(String.valueOf(galfrom));
        }
        if ((galto!= null)&&(!StringUtils.isEmpty(String.valueOf(galto)))) {
            queryString.append("&").append("galto").append("=").append(String.valueOf(galto));
        }
        if ((galprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(galprefix)))) {
            queryString.append("&").append("galprefix").append("=").append(String.valueOf(galprefix));
        }
        if ((galunique!= null)&&(!StringUtils.isEmpty(String.valueOf(galunique)))) {
            queryString.append("&").append("galunique").append("=").append(String.valueOf(galunique));
        }
        if ((galprop!= null)&&(!StringUtils.isEmpty(String.valueOf(galprop)))) {
            queryString.append("&").append("galprop").append("=").append(String.valueOf(galprop));
        }
        if ((galnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(galnamespace)))) {
            queryString.append("&").append("galnamespace").append("=").append(String.valueOf(galnamespace));
        }
        if ((gallimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gallimit)))) {
            queryString.append("&").append("gallimit").append("=").append(String.valueOf(gallimit));
        }
        if ((galdir!= null)&&(!StringUtils.isEmpty(String.valueOf(galdir)))) {
            queryString.append("&").append("galdir").append("=").append(String.valueOf(galdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllPages(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gapcontinue, String gapfrom, String gapto, String gapprefix, String gapnamespace, String gapfilterredir, String gapminsize, String gapmaxsize, String gapprtype, String gapprlevel, String gapprfiltercascade, String gaplimit, String gapdir, String gapfilterlanglinks, String gapprexpiry, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=allpages";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gapcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gapcontinue)))) {
            queryString.append("&").append("gapcontinue").append("=").append(String.valueOf(gapcontinue));
        }
        if ((gapfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfrom)))) {
            queryString.append("&").append("gapfrom").append("=").append(String.valueOf(gapfrom));
        }
        if ((gapto!= null)&&(!StringUtils.isEmpty(String.valueOf(gapto)))) {
            queryString.append("&").append("gapto").append("=").append(String.valueOf(gapto));
        }
        if ((gapprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprefix)))) {
            queryString.append("&").append("gapprefix").append("=").append(String.valueOf(gapprefix));
        }
        if ((gapnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gapnamespace)))) {
            queryString.append("&").append("gapnamespace").append("=").append(String.valueOf(gapnamespace));
        }
        if ((gapfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfilterredir)))) {
            queryString.append("&").append("gapfilterredir").append("=").append(String.valueOf(gapfilterredir));
        }
        if ((gapminsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gapminsize)))) {
            queryString.append("&").append("gapminsize").append("=").append(String.valueOf(gapminsize));
        }
        if ((gapmaxsize!= null)&&(!StringUtils.isEmpty(String.valueOf(gapmaxsize)))) {
            queryString.append("&").append("gapmaxsize").append("=").append(String.valueOf(gapmaxsize));
        }
        if ((gapprtype!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprtype)))) {
            queryString.append("&").append("gapprtype").append("=").append(String.valueOf(gapprtype));
        }
        if ((gapprlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprlevel)))) {
            queryString.append("&").append("gapprlevel").append("=").append(String.valueOf(gapprlevel));
        }
        if ((gapprfiltercascade!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprfiltercascade)))) {
            queryString.append("&").append("gapprfiltercascade").append("=").append(String.valueOf(gapprfiltercascade));
        }
        if ((gaplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gaplimit)))) {
            queryString.append("&").append("gaplimit").append("=").append(String.valueOf(gaplimit));
        }
        if ((gapdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gapdir)))) {
            queryString.append("&").append("gapdir").append("=").append(String.valueOf(gapdir));
        }
        if ((gapfilterlanglinks!= null)&&(!StringUtils.isEmpty(String.valueOf(gapfilterlanglinks)))) {
            queryString.append("&").append("gapfilterlanglinks").append("=").append(String.valueOf(gapfilterlanglinks));
        }
        if ((gapprexpiry!= null)&&(!StringUtils.isEmpty(String.valueOf(gapprexpiry)))) {
            queryString.append("&").append("gapprexpiry").append("=").append(String.valueOf(gapprexpiry));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllPages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllPages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllRedirects(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String garcontinue, String garfrom, String garto, String garprefix, String garunique, String garprop, String garnamespace, String garlimit, String gardir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=allredirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((garcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(garcontinue)))) {
            queryString.append("&").append("garcontinue").append("=").append(String.valueOf(garcontinue));
        }
        if ((garfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(garfrom)))) {
            queryString.append("&").append("garfrom").append("=").append(String.valueOf(garfrom));
        }
        if ((garto!= null)&&(!StringUtils.isEmpty(String.valueOf(garto)))) {
            queryString.append("&").append("garto").append("=").append(String.valueOf(garto));
        }
        if ((garprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(garprefix)))) {
            queryString.append("&").append("garprefix").append("=").append(String.valueOf(garprefix));
        }
        if ((garunique!= null)&&(!StringUtils.isEmpty(String.valueOf(garunique)))) {
            queryString.append("&").append("garunique").append("=").append(String.valueOf(garunique));
        }
        if ((garprop!= null)&&(!StringUtils.isEmpty(String.valueOf(garprop)))) {
            queryString.append("&").append("garprop").append("=").append(String.valueOf(garprop));
        }
        if ((garnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(garnamespace)))) {
            queryString.append("&").append("garnamespace").append("=").append(String.valueOf(garnamespace));
        }
        if ((garlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(garlimit)))) {
            queryString.append("&").append("garlimit").append("=").append(String.valueOf(garlimit));
        }
        if ((gardir!= null)&&(!StringUtils.isEmpty(String.valueOf(gardir)))) {
            queryString.append("&").append("gardir").append("=").append(String.valueOf(gardir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeAllTransclusions(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gatcontinue, String gatfrom, String gatto, String gatprefix, String gatunique, String gatprop, String gatnamespace, String gatlimit, String gatdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=alltransclusions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gatcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gatcontinue)))) {
            queryString.append("&").append("gatcontinue").append("=").append(String.valueOf(gatcontinue));
        }
        if ((gatfrom!= null)&&(!StringUtils.isEmpty(String.valueOf(gatfrom)))) {
            queryString.append("&").append("gatfrom").append("=").append(String.valueOf(gatfrom));
        }
        if ((gatto!= null)&&(!StringUtils.isEmpty(String.valueOf(gatto)))) {
            queryString.append("&").append("gatto").append("=").append(String.valueOf(gatto));
        }
        if ((gatprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gatprefix)))) {
            queryString.append("&").append("gatprefix").append("=").append(String.valueOf(gatprefix));
        }
        if ((gatunique!= null)&&(!StringUtils.isEmpty(String.valueOf(gatunique)))) {
            queryString.append("&").append("gatunique").append("=").append(String.valueOf(gatunique));
        }
        if ((gatprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gatprop)))) {
            queryString.append("&").append("gatprop").append("=").append(String.valueOf(gatprop));
        }
        if ((gatnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gatnamespace)))) {
            queryString.append("&").append("gatnamespace").append("=").append(String.valueOf(gatnamespace));
        }
        if ((gatlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gatlimit)))) {
            queryString.append("&").append("gatlimit").append("=").append(String.valueOf(gatlimit));
        }
        if ((gatdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gatdir)))) {
            queryString.append("&").append("gatdir").append("=").append(String.valueOf(gatdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeAllTransclusions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeAllTransclusions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeBackLinks(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gbltitle, String gblpageid, String gblcontinue, String gblnamespace, String gbldir, String gblfilterredir, String gbllimit, String gblredirect, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=backlinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(gbltitle)))) {
            queryString.append("&").append("gbltitle").append("=").append(String.valueOf(gbltitle));
        }
        if ((gblpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(gblpageid)))) {
            queryString.append("&").append("gblpageid").append("=").append(String.valueOf(gblpageid));
        }
        if ((gblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gblcontinue)))) {
            queryString.append("&").append("gblcontinue").append("=").append(String.valueOf(gblcontinue));
        }
        if ((gblnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gblnamespace)))) {
            queryString.append("&").append("gblnamespace").append("=").append(String.valueOf(gblnamespace));
        }
        if ((gbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gbldir)))) {
            queryString.append("&").append("gbldir").append("=").append(String.valueOf(gbldir));
        }
        if ((gblfilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(gblfilterredir)))) {
            queryString.append("&").append("gblfilterredir").append("=").append(String.valueOf(gblfilterredir));
        }
        if ((gbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gbllimit)))) {
            queryString.append("&").append("gbllimit").append("=").append(String.valueOf(gbllimit));
        }
        if ((gblredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(gblredirect)))) {
            queryString.append("&").append("gblredirect").append("=").append(String.valueOf(gblredirect));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeCategories(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gclprop, String gclshow, String gcllimit, String gclcontinue, String gclcategories, String gcldir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=categories";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gclprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gclprop)))) {
            queryString.append("&").append("gclprop").append("=").append(String.valueOf(gclprop));
        }
        if ((gclshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gclshow)))) {
            queryString.append("&").append("gclshow").append("=").append(String.valueOf(gclshow));
        }
        if ((gcllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gcllimit)))) {
            queryString.append("&").append("gcllimit").append("=").append(String.valueOf(gcllimit));
        }
        if ((gclcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gclcontinue)))) {
            queryString.append("&").append("gclcontinue").append("=").append(String.valueOf(gclcontinue));
        }
        if ((gclcategories!= null)&&(!StringUtils.isEmpty(String.valueOf(gclcategories)))) {
            queryString.append("&").append("gclcategories").append("=").append(String.valueOf(gclcategories));
        }
        if ((gcldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gcldir)))) {
            queryString.append("&").append("gcldir").append("=").append(String.valueOf(gcldir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeCategories", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeCategories", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeCategoryMembers(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gcmtitle, String gcmpageid, String gcmprop, String gcmnamespace, String gcmtype, String gcmcontinue, String gcmlimit, String gcmsort, String gcmdir, String gcmstart, String gcmend, String gcmstarthexsortkey, String gcmendhexsortkey, String gcmstartsortkeyprefix, String gcmendsortkeyprefix, String redirects, String converttitles)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=categorymembers";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gcmtitle!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmtitle)))) {
            queryString.append("&").append("gcmtitle").append("=").append(String.valueOf(gcmtitle));
        }
        if ((gcmpageid!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmpageid)))) {
            queryString.append("&").append("gcmpageid").append("=").append(String.valueOf(gcmpageid));
        }
        if ((gcmprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmprop)))) {
            queryString.append("&").append("gcmprop").append("=").append(String.valueOf(gcmprop));
        }
        if ((gcmnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmnamespace)))) {
            queryString.append("&").append("gcmnamespace").append("=").append(String.valueOf(gcmnamespace));
        }
        if ((gcmtype!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmtype)))) {
            queryString.append("&").append("gcmtype").append("=").append(String.valueOf(gcmtype));
        }
        if ((gcmcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmcontinue)))) {
            queryString.append("&").append("gcmcontinue").append("=").append(String.valueOf(gcmcontinue));
        }
        if ((gcmlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmlimit)))) {
            queryString.append("&").append("gcmlimit").append("=").append(String.valueOf(gcmlimit));
        }
        if ((gcmsort!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmsort)))) {
            queryString.append("&").append("gcmsort").append("=").append(String.valueOf(gcmsort));
        }
        if ((gcmdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmdir)))) {
            queryString.append("&").append("gcmdir").append("=").append(String.valueOf(gcmdir));
        }
        if ((gcmstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstart)))) {
            queryString.append("&").append("gcmstart").append("=").append(String.valueOf(gcmstart));
        }
        if ((gcmend!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmend)))) {
            queryString.append("&").append("gcmend").append("=").append(String.valueOf(gcmend));
        }
        if ((gcmstarthexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstarthexsortkey)))) {
            queryString.append("&").append("gcmstarthexsortkey").append("=").append(String.valueOf(gcmstarthexsortkey));
        }
        if ((gcmendhexsortkey!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmendhexsortkey)))) {
            queryString.append("&").append("gcmendhexsortkey").append("=").append(String.valueOf(gcmendhexsortkey));
        }
        if ((gcmstartsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmstartsortkeyprefix)))) {
            queryString.append("&").append("gcmstartsortkeyprefix").append("=").append(String.valueOf(gcmstartsortkeyprefix));
        }
        if ((gcmendsortkeyprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(gcmendsortkeyprefix)))) {
            queryString.append("&").append("gcmendsortkeyprefix").append("=").append(String.valueOf(gcmendsortkeyprefix));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeCategoryMembers", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeCategoryMembers", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeDeletedRevisions(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gdrvprop, String gdrvlimit, String gdrvexpandtemplates, String gdrvgeneratexml, String gdrvparse, String gdrvsection, String gdrvdiffto, String gdrvdifftotext, String gdrvcontentformat, String gdrvstart, String gdrvend, String gdrvdir, String gdrvtag, String gdrvuser, String gdrvexcludeuser, String gdrvcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=deletedrevisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gdrvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvprop)))) {
            queryString.append("&").append("gdrvprop").append("=").append(String.valueOf(gdrvprop));
        }
        if ((gdrvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvlimit)))) {
            queryString.append("&").append("gdrvlimit").append("=").append(String.valueOf(gdrvlimit));
        }
        if ((gdrvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvexpandtemplates)))) {
            queryString.append("&").append("gdrvexpandtemplates").append("=").append(String.valueOf(gdrvexpandtemplates));
        }
        if ((gdrvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvgeneratexml)))) {
            queryString.append("&").append("gdrvgeneratexml").append("=").append(String.valueOf(gdrvgeneratexml));
        }
        if ((gdrvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvparse)))) {
            queryString.append("&").append("gdrvparse").append("=").append(String.valueOf(gdrvparse));
        }
        if ((gdrvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvsection)))) {
            queryString.append("&").append("gdrvsection").append("=").append(String.valueOf(gdrvsection));
        }
        if ((gdrvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdiffto)))) {
            queryString.append("&").append("gdrvdiffto").append("=").append(String.valueOf(gdrvdiffto));
        }
        if ((gdrvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdifftotext)))) {
            queryString.append("&").append("gdrvdifftotext").append("=").append(String.valueOf(gdrvdifftotext));
        }
        if ((gdrvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvcontentformat)))) {
            queryString.append("&").append("gdrvcontentformat").append("=").append(String.valueOf(gdrvcontentformat));
        }
        if ((gdrvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvstart)))) {
            queryString.append("&").append("gdrvstart").append("=").append(String.valueOf(gdrvstart));
        }
        if ((gdrvend!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvend)))) {
            queryString.append("&").append("gdrvend").append("=").append(String.valueOf(gdrvend));
        }
        if ((gdrvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvdir)))) {
            queryString.append("&").append("gdrvdir").append("=").append(String.valueOf(gdrvdir));
        }
        if ((gdrvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvtag)))) {
            queryString.append("&").append("gdrvtag").append("=").append(String.valueOf(gdrvtag));
        }
        if ((gdrvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvuser)))) {
            queryString.append("&").append("gdrvuser").append("=").append(String.valueOf(gdrvuser));
        }
        if ((gdrvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvexcludeuser)))) {
            queryString.append("&").append("gdrvexcludeuser").append("=").append(String.valueOf(gdrvexcludeuser));
        }
        if ((gdrvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gdrvcontinue)))) {
            queryString.append("&").append("gdrvcontinue").append("=").append(String.valueOf(gdrvcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeDeletedRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeDeletedRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeDuplicateFiles(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gdflimit, String gdfcontinue, String gdfdir, String gdflocalonly, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=duplicatefiles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gdflimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gdflimit)))) {
            queryString.append("&").append("gdflimit").append("=").append(String.valueOf(gdflimit));
        }
        if ((gdfcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gdfcontinue)))) {
            queryString.append("&").append("gdfcontinue").append("=").append(String.valueOf(gdfcontinue));
        }
        if ((gdfdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gdfdir)))) {
            queryString.append("&").append("gdfdir").append("=").append(String.valueOf(gdfdir));
        }
        if ((gdflocalonly!= null)&&(!StringUtils.isEmpty(String.valueOf(gdflocalonly)))) {
            queryString.append("&").append("gdflocalonly").append("=").append(String.valueOf(gdflocalonly));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeDuplicateFiles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeDuplicateFiles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeEmbeddedIn(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String geititle, String geipageid, String geicontinue, String geinamespace, String geidir, String geifilterredir, String geilimit, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=embeddedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((geititle!= null)&&(!StringUtils.isEmpty(String.valueOf(geititle)))) {
            queryString.append("&").append("geititle").append("=").append(String.valueOf(geititle));
        }
        if ((geipageid!= null)&&(!StringUtils.isEmpty(String.valueOf(geipageid)))) {
            queryString.append("&").append("geipageid").append("=").append(String.valueOf(geipageid));
        }
        if ((geicontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(geicontinue)))) {
            queryString.append("&").append("geicontinue").append("=").append(String.valueOf(geicontinue));
        }
        if ((geinamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(geinamespace)))) {
            queryString.append("&").append("geinamespace").append("=").append(String.valueOf(geinamespace));
        }
        if ((geidir!= null)&&(!StringUtils.isEmpty(String.valueOf(geidir)))) {
            queryString.append("&").append("geidir").append("=").append(String.valueOf(geidir));
        }
        if ((geifilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(geifilterredir)))) {
            queryString.append("&").append("geifilterredir").append("=").append(String.valueOf(geifilterredir));
        }
        if ((geilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(geilimit)))) {
            queryString.append("&").append("geilimit").append("=").append(String.valueOf(geilimit));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeEmbeddedIn", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeEmbeddedIn", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeExturlUsage(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String geuprop, String geuoffset, String geuprotocol, String geuquery, String geunamespace, String geulimit, String geuexpandurl, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=exturlusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((geuprop!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprop)))) {
            queryString.append("&").append("geuprop").append("=").append(String.valueOf(geuprop));
        }
        if ((geuoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(geuoffset)))) {
            queryString.append("&").append("geuoffset").append("=").append(String.valueOf(geuoffset));
        }
        if ((geuprotocol!= null)&&(!StringUtils.isEmpty(String.valueOf(geuprotocol)))) {
            queryString.append("&").append("geuprotocol").append("=").append(String.valueOf(geuprotocol));
        }
        if ((geuquery!= null)&&(!StringUtils.isEmpty(String.valueOf(geuquery)))) {
            queryString.append("&").append("geuquery").append("=").append(String.valueOf(geuquery));
        }
        if ((geunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(geunamespace)))) {
            queryString.append("&").append("geunamespace").append("=").append(String.valueOf(geunamespace));
        }
        if ((geulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(geulimit)))) {
            queryString.append("&").append("geulimit").append("=").append(String.valueOf(geulimit));
        }
        if ((geuexpandurl!= null)&&(!StringUtils.isEmpty(String.valueOf(geuexpandurl)))) {
            queryString.append("&").append("geuexpandurl").append("=").append(String.valueOf(geuexpandurl));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeExturlUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeExturlUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeFileUsage(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gfuprop, String gfunamespace, String gfushow, String gfulimit, String gfucontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=fileusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gfuprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gfuprop)))) {
            queryString.append("&").append("gfuprop").append("=").append(String.valueOf(gfuprop));
        }
        if ((gfunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gfunamespace)))) {
            queryString.append("&").append("gfunamespace").append("=").append(String.valueOf(gfunamespace));
        }
        if ((gfushow!= null)&&(!StringUtils.isEmpty(String.valueOf(gfushow)))) {
            queryString.append("&").append("gfushow").append("=").append(String.valueOf(gfushow));
        }
        if ((gfulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gfulimit)))) {
            queryString.append("&").append("gfulimit").append("=").append(String.valueOf(gfulimit));
        }
        if ((gfucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gfucontinue)))) {
            queryString.append("&").append("gfucontinue").append("=").append(String.valueOf(gfucontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeFileUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeFileUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeImages(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gimlimit, String gimcontinue, String gimimages, String gimdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=images";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gimlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gimlimit)))) {
            queryString.append("&").append("gimlimit").append("=").append(String.valueOf(gimlimit));
        }
        if ((gimcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gimcontinue)))) {
            queryString.append("&").append("gimcontinue").append("=").append(String.valueOf(gimcontinue));
        }
        if ((gimimages!= null)&&(!StringUtils.isEmpty(String.valueOf(gimimages)))) {
            queryString.append("&").append("gimimages").append("=").append(String.valueOf(gimimages));
        }
        if ((gimdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gimdir)))) {
            queryString.append("&").append("gimdir").append("=").append(String.valueOf(gimdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeImages", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeImages", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeImageUsage(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String giutitle, String giupageid, String giucontinue, String giunamespace, String giudir, String giufilterredir, String giulimit, String giuredirect, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=imageusage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((giutitle!= null)&&(!StringUtils.isEmpty(String.valueOf(giutitle)))) {
            queryString.append("&").append("giutitle").append("=").append(String.valueOf(giutitle));
        }
        if ((giupageid!= null)&&(!StringUtils.isEmpty(String.valueOf(giupageid)))) {
            queryString.append("&").append("giupageid").append("=").append(String.valueOf(giupageid));
        }
        if ((giucontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(giucontinue)))) {
            queryString.append("&").append("giucontinue").append("=").append(String.valueOf(giucontinue));
        }
        if ((giunamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(giunamespace)))) {
            queryString.append("&").append("giunamespace").append("=").append(String.valueOf(giunamespace));
        }
        if ((giudir!= null)&&(!StringUtils.isEmpty(String.valueOf(giudir)))) {
            queryString.append("&").append("giudir").append("=").append(String.valueOf(giudir));
        }
        if ((giufilterredir!= null)&&(!StringUtils.isEmpty(String.valueOf(giufilterredir)))) {
            queryString.append("&").append("giufilterredir").append("=").append(String.valueOf(giufilterredir));
        }
        if ((giulimit!= null)&&(!StringUtils.isEmpty(String.valueOf(giulimit)))) {
            queryString.append("&").append("giulimit").append("=").append(String.valueOf(giulimit));
        }
        if ((giuredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(giuredirect)))) {
            queryString.append("&").append("giuredirect").append("=").append(String.valueOf(giuredirect));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeImageUsage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeImageUsage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeInterwikiBackLinks(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String giwblprefix, String giwbltitle, String giwblcontinue, String giwbllimit, String giwblprop, String giwbldir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=iwbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((giwblprefix!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblprefix)))) {
            queryString.append("&").append("giwblprefix").append("=").append(String.valueOf(giwblprefix));
        }
        if ((giwbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbltitle)))) {
            queryString.append("&").append("giwbltitle").append("=").append(String.valueOf(giwbltitle));
        }
        if ((giwblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblcontinue)))) {
            queryString.append("&").append("giwblcontinue").append("=").append(String.valueOf(giwblcontinue));
        }
        if ((giwbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbllimit)))) {
            queryString.append("&").append("giwbllimit").append("=").append(String.valueOf(giwbllimit));
        }
        if ((giwblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(giwblprop)))) {
            queryString.append("&").append("giwblprop").append("=").append(String.valueOf(giwblprop));
        }
        if ((giwbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(giwbldir)))) {
            queryString.append("&").append("giwbldir").append("=").append(String.valueOf(giwbldir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeInterwikiBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeInterwikiBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeLangBackLinks(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String glbllang, String glbltitle, String glblcontinue, String glbllimit, String glblprop, String glbldir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=langbacklinks";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((glbllang!= null)&&(!StringUtils.isEmpty(String.valueOf(glbllang)))) {
            queryString.append("&").append("glbllang").append("=").append(String.valueOf(glbllang));
        }
        if ((glbltitle!= null)&&(!StringUtils.isEmpty(String.valueOf(glbltitle)))) {
            queryString.append("&").append("glbltitle").append("=").append(String.valueOf(glbltitle));
        }
        if ((glblcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(glblcontinue)))) {
            queryString.append("&").append("glblcontinue").append("=").append(String.valueOf(glblcontinue));
        }
        if ((glbllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(glbllimit)))) {
            queryString.append("&").append("glbllimit").append("=").append(String.valueOf(glbllimit));
        }
        if ((glblprop!= null)&&(!StringUtils.isEmpty(String.valueOf(glblprop)))) {
            queryString.append("&").append("glblprop").append("=").append(String.valueOf(glblprop));
        }
        if ((glbldir!= null)&&(!StringUtils.isEmpty(String.valueOf(glbldir)))) {
            queryString.append("&").append("glbldir").append("=").append(String.valueOf(glbldir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeLangBackLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeLangBackLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeLinks(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gplnamespace, String gpllimit, String gplcontinue, String gpltitles, String gpldir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=links";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gplnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gplnamespace)))) {
            queryString.append("&").append("gplnamespace").append("=").append(String.valueOf(gplnamespace));
        }
        if ((gpllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpllimit)))) {
            queryString.append("&").append("gpllimit").append("=").append(String.valueOf(gpllimit));
        }
        if ((gplcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gplcontinue)))) {
            queryString.append("&").append("gplcontinue").append("=").append(String.valueOf(gplcontinue));
        }
        if ((gpltitles!= null)&&(!StringUtils.isEmpty(String.valueOf(gpltitles)))) {
            queryString.append("&").append("gpltitles").append("=").append(String.valueOf(gpltitles));
        }
        if ((gpldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gpldir)))) {
            queryString.append("&").append("gpldir").append("=").append(String.valueOf(gpldir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeLinks", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeLinks", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeLinkShere(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String glhprop, String glhnamespace, String glhshow, String glhlimit, String glhcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=linkshere";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((glhprop!= null)&&(!StringUtils.isEmpty(String.valueOf(glhprop)))) {
            queryString.append("&").append("glhprop").append("=").append(String.valueOf(glhprop));
        }
        if ((glhnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(glhnamespace)))) {
            queryString.append("&").append("glhnamespace").append("=").append(String.valueOf(glhnamespace));
        }
        if ((glhshow!= null)&&(!StringUtils.isEmpty(String.valueOf(glhshow)))) {
            queryString.append("&").append("glhshow").append("=").append(String.valueOf(glhshow));
        }
        if ((glhlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(glhlimit)))) {
            queryString.append("&").append("glhlimit").append("=").append(String.valueOf(glhlimit));
        }
        if ((glhcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(glhcontinue)))) {
            queryString.append("&").append("glhcontinue").append("=").append(String.valueOf(glhcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeLinkShere", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeLinkShere", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeMessageCollection(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gmcgroup, String gmclanguage, String gmclimit, String gmcoffset, String gmcfilter, String gmcprop, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=messagecollection";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gmcgroup!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcgroup)))) {
            queryString.append("&").append("gmcgroup").append("=").append(String.valueOf(gmcgroup));
        }
        if ((gmclanguage!= null)&&(!StringUtils.isEmpty(String.valueOf(gmclanguage)))) {
            queryString.append("&").append("gmclanguage").append("=").append(String.valueOf(gmclanguage));
        }
        if ((gmclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gmclimit)))) {
            queryString.append("&").append("gmclimit").append("=").append(String.valueOf(gmclimit));
        }
        if ((gmcoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcoffset)))) {
            queryString.append("&").append("gmcoffset").append("=").append(String.valueOf(gmcoffset));
        }
        if ((gmcfilter!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcfilter)))) {
            queryString.append("&").append("gmcfilter").append("=").append(String.valueOf(gmcfilter));
        }
        if ((gmcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gmcprop)))) {
            queryString.append("&").append("gmcprop").append("=").append(String.valueOf(gmcprop));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeMessageCollection", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeMessageCollection", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgePagesWithProp(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gpwppropname, String gpwpprop, String gpwpcontinue, String gpwplimit, String gpwpdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=pageswithprop";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gpwppropname!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwppropname)))) {
            queryString.append("&").append("gpwppropname").append("=").append(String.valueOf(gpwppropname));
        }
        if ((gpwpprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpprop)))) {
            queryString.append("&").append("gpwpprop").append("=").append(String.valueOf(gpwpprop));
        }
        if ((gpwpcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpcontinue)))) {
            queryString.append("&").append("gpwpcontinue").append("=").append(String.valueOf(gpwpcontinue));
        }
        if ((gpwplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwplimit)))) {
            queryString.append("&").append("gpwplimit").append("=").append(String.valueOf(gpwplimit));
        }
        if ((gpwpdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gpwpdir)))) {
            queryString.append("&").append("gpwpdir").append("=").append(String.valueOf(gpwpdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgePagesWithProp", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgePagesWithProp", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgePrefixSearch(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gpssearch, String gpsnamespace, String gpslimit, String gpsoffset, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=prefixsearch";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gpssearch!= null)&&(!StringUtils.isEmpty(String.valueOf(gpssearch)))) {
            queryString.append("&").append("gpssearch").append("=").append(String.valueOf(gpssearch));
        }
        if ((gpsnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gpsnamespace)))) {
            queryString.append("&").append("gpsnamespace").append("=").append(String.valueOf(gpsnamespace));
        }
        if ((gpslimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gpslimit)))) {
            queryString.append("&").append("gpslimit").append("=").append(String.valueOf(gpslimit));
        }
        if ((gpsoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gpsoffset)))) {
            queryString.append("&").append("gpsoffset").append("=").append(String.valueOf(gpsoffset));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgePrefixSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgePrefixSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeProtectedTitles(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gptnamespace, String gptlevel, String gptlimit, String gptdir, String gptstart, String gptend, String gptprop, String ptcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=protectedtitles";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gptnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gptnamespace)))) {
            queryString.append("&").append("gptnamespace").append("=").append(String.valueOf(gptnamespace));
        }
        if ((gptlevel!= null)&&(!StringUtils.isEmpty(String.valueOf(gptlevel)))) {
            queryString.append("&").append("gptlevel").append("=").append(String.valueOf(gptlevel));
        }
        if ((gptlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gptlimit)))) {
            queryString.append("&").append("gptlimit").append("=").append(String.valueOf(gptlimit));
        }
        if ((gptdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gptdir)))) {
            queryString.append("&").append("gptdir").append("=").append(String.valueOf(gptdir));
        }
        if ((gptstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gptstart)))) {
            queryString.append("&").append("gptstart").append("=").append(String.valueOf(gptstart));
        }
        if ((gptend!= null)&&(!StringUtils.isEmpty(String.valueOf(gptend)))) {
            queryString.append("&").append("gptend").append("=").append(String.valueOf(gptend));
        }
        if ((gptprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gptprop)))) {
            queryString.append("&").append("gptprop").append("=").append(String.valueOf(gptprop));
        }
        if ((ptcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(ptcontinue)))) {
            queryString.append("&").append("gptcontinue").append("=").append(String.valueOf(ptcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeProtectedTitles", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeProtectedTitles", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeQueryPage(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gqppage, String gqpoffset, String gqplimit, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=querypage";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gqppage!= null)&&(!StringUtils.isEmpty(String.valueOf(gqppage)))) {
            queryString.append("&").append("gqppage").append("=").append(String.valueOf(gqppage));
        }
        if ((gqpoffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gqpoffset)))) {
            queryString.append("&").append("gqpoffset").append("=").append(String.valueOf(gqpoffset));
        }
        if ((gqplimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gqplimit)))) {
            queryString.append("&").append("gqplimit").append("=").append(String.valueOf(gqplimit));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeQueryPage", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeQueryPage", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeRandom(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String grnnamespace, String grnlimit, String grnredirect, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=random";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((grnnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grnnamespace)))) {
            queryString.append("&").append("grnnamespace").append("=").append(String.valueOf(grnnamespace));
        }
        if ((grnlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grnlimit)))) {
            queryString.append("&").append("grnlimit").append("=").append(String.valueOf(grnlimit));
        }
        if ((grnredirect!= null)&&(!StringUtils.isEmpty(String.valueOf(grnredirect)))) {
            queryString.append("&").append("grnredirect").append("=").append(String.valueOf(grnredirect));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeRandom", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeRandom", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeRecentChanges(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String grcstart, String grcend, String grcdir, String grcnamespace, String grcuser, String grcexcludeuser, String grctag, String grcprop, String grcshow, String grclimit, String grctype, String grctoponly, String grccontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=recentchanges";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((grcstart!= null)&&(!StringUtils.isEmpty(String.valueOf(grcstart)))) {
            queryString.append("&").append("grcstart").append("=").append(String.valueOf(grcstart));
        }
        if ((grcend!= null)&&(!StringUtils.isEmpty(String.valueOf(grcend)))) {
            queryString.append("&").append("grcend").append("=").append(String.valueOf(grcend));
        }
        if ((grcdir!= null)&&(!StringUtils.isEmpty(String.valueOf(grcdir)))) {
            queryString.append("&").append("grcdir").append("=").append(String.valueOf(grcdir));
        }
        if ((grcnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grcnamespace)))) {
            queryString.append("&").append("grcnamespace").append("=").append(String.valueOf(grcnamespace));
        }
        if ((grcuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grcuser)))) {
            queryString.append("&").append("grcuser").append("=").append(String.valueOf(grcuser));
        }
        if ((grcexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grcexcludeuser)))) {
            queryString.append("&").append("grcexcludeuser").append("=").append(String.valueOf(grcexcludeuser));
        }
        if ((grctag!= null)&&(!StringUtils.isEmpty(String.valueOf(grctag)))) {
            queryString.append("&").append("grctag").append("=").append(String.valueOf(grctag));
        }
        if ((grcprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grcprop)))) {
            queryString.append("&").append("grcprop").append("=").append(String.valueOf(grcprop));
        }
        if ((grcshow!= null)&&(!StringUtils.isEmpty(String.valueOf(grcshow)))) {
            queryString.append("&").append("grcshow").append("=").append(String.valueOf(grcshow));
        }
        if ((grclimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grclimit)))) {
            queryString.append("&").append("grclimit").append("=").append(String.valueOf(grclimit));
        }
        if ((grctype!= null)&&(!StringUtils.isEmpty(String.valueOf(grctype)))) {
            queryString.append("&").append("grctype").append("=").append(String.valueOf(grctype));
        }
        if ((grctoponly!= null)&&(!StringUtils.isEmpty(String.valueOf(grctoponly)))) {
            queryString.append("&").append("grctoponly").append("=").append(String.valueOf(grctoponly));
        }
        if ((grccontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grccontinue)))) {
            queryString.append("&").append("grccontinue").append("=").append(String.valueOf(grccontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeRecentChanges", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeRecentChanges", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeRedirects(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String grdprop, String grdnamespace, String grdshow, String grdlimit, String grdcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=redirects";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((grdprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grdprop)))) {
            queryString.append("&").append("grdprop").append("=").append(String.valueOf(grdprop));
        }
        if ((grdnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(grdnamespace)))) {
            queryString.append("&").append("grdnamespace").append("=").append(String.valueOf(grdnamespace));
        }
        if ((grdshow!= null)&&(!StringUtils.isEmpty(String.valueOf(grdshow)))) {
            queryString.append("&").append("grdshow").append("=").append(String.valueOf(grdshow));
        }
        if ((grdlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grdlimit)))) {
            queryString.append("&").append("grdlimit").append("=").append(String.valueOf(grdlimit));
        }
        if ((grdcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grdcontinue)))) {
            queryString.append("&").append("grdcontinue").append("=").append(String.valueOf(grdcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeRedirects", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeRedirects", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeRevisions(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String grvprop, String grvlimit, String grvexpandtemplates, String grvgeneratexml, String grvparse, String grvsection, String grvdiffto, String grvdifftotext, String grvcontentformat, String grvstartid, String grvendid, String grvstart, String grvend, String grvdir, String grvuser, String grvexcludeuser, String grvtag, String grvcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=revisions";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((grvprop!= null)&&(!StringUtils.isEmpty(String.valueOf(grvprop)))) {
            queryString.append("&").append("grvprop").append("=").append(String.valueOf(grvprop));
        }
        if ((grvlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(grvlimit)))) {
            queryString.append("&").append("grvlimit").append("=").append(String.valueOf(grvlimit));
        }
        if ((grvexpandtemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(grvexpandtemplates)))) {
            queryString.append("&").append("grvexpandtemplates").append("=").append(String.valueOf(grvexpandtemplates));
        }
        if ((grvgeneratexml!= null)&&(!StringUtils.isEmpty(String.valueOf(grvgeneratexml)))) {
            queryString.append("&").append("grvgeneratexml").append("=").append(String.valueOf(grvgeneratexml));
        }
        if ((grvparse!= null)&&(!StringUtils.isEmpty(String.valueOf(grvparse)))) {
            queryString.append("&").append("grvparse").append("=").append(String.valueOf(grvparse));
        }
        if ((grvsection!= null)&&(!StringUtils.isEmpty(String.valueOf(grvsection)))) {
            queryString.append("&").append("grvsection").append("=").append(String.valueOf(grvsection));
        }
        if ((grvdiffto!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdiffto)))) {
            queryString.append("&").append("grvdiffto").append("=").append(String.valueOf(grvdiffto));
        }
        if ((grvdifftotext!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdifftotext)))) {
            queryString.append("&").append("grvdifftotext").append("=").append(String.valueOf(grvdifftotext));
        }
        if ((grvcontentformat!= null)&&(!StringUtils.isEmpty(String.valueOf(grvcontentformat)))) {
            queryString.append("&").append("grvcontentformat").append("=").append(String.valueOf(grvcontentformat));
        }
        if ((grvstartid!= null)&&(!StringUtils.isEmpty(String.valueOf(grvstartid)))) {
            queryString.append("&").append("grvstartid").append("=").append(String.valueOf(grvstartid));
        }
        if ((grvendid!= null)&&(!StringUtils.isEmpty(String.valueOf(grvendid)))) {
            queryString.append("&").append("grvendid").append("=").append(String.valueOf(grvendid));
        }
        if ((grvstart!= null)&&(!StringUtils.isEmpty(String.valueOf(grvstart)))) {
            queryString.append("&").append("grvstart").append("=").append(String.valueOf(grvstart));
        }
        if ((grvend!= null)&&(!StringUtils.isEmpty(String.valueOf(grvend)))) {
            queryString.append("&").append("grvend").append("=").append(String.valueOf(grvend));
        }
        if ((grvdir!= null)&&(!StringUtils.isEmpty(String.valueOf(grvdir)))) {
            queryString.append("&").append("grvdir").append("=").append(String.valueOf(grvdir));
        }
        if ((grvuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grvuser)))) {
            queryString.append("&").append("grvuser").append("=").append(String.valueOf(grvuser));
        }
        if ((grvexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(grvexcludeuser)))) {
            queryString.append("&").append("grvexcludeuser").append("=").append(String.valueOf(grvexcludeuser));
        }
        if ((grvtag!= null)&&(!StringUtils.isEmpty(String.valueOf(grvtag)))) {
            queryString.append("&").append("grvtag").append("=").append(String.valueOf(grvtag));
        }
        if ((grvcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(grvcontinue)))) {
            queryString.append("&").append("grvcontinue").append("=").append(String.valueOf(grvcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeRevisions", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeRevisions", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeSearch(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gsrsearch, String gsrnamespace, String gsrwhat, String gsrinfo, String gsrprop, String gsroffset, String gsrlimit, String gsrinterwiki, String redirects, String converttitles)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=search";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gsrsearch!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrsearch)))) {
            queryString.append("&").append("gsrsearch").append("=").append(String.valueOf(gsrsearch));
        }
        if ((gsrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrnamespace)))) {
            queryString.append("&").append("gsrnamespace").append("=").append(String.valueOf(gsrnamespace));
        }
        if ((gsrwhat!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrwhat)))) {
            queryString.append("&").append("gsrwhat").append("=").append(String.valueOf(gsrwhat));
        }
        if ((gsrinfo!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrinfo)))) {
            queryString.append("&").append("gsrinfo").append("=").append(String.valueOf(gsrinfo));
        }
        if ((gsrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrprop)))) {
            queryString.append("&").append("gsrprop").append("=").append(String.valueOf(gsrprop));
        }
        if ((gsroffset!= null)&&(!StringUtils.isEmpty(String.valueOf(gsroffset)))) {
            queryString.append("&").append("gsroffset").append("=").append(String.valueOf(gsroffset));
        }
        if ((gsrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrlimit)))) {
            queryString.append("&").append("gsrlimit").append("=").append(String.valueOf(gsrlimit));
        }
        if ((gsrinterwiki!= null)&&(!StringUtils.isEmpty(String.valueOf(gsrinterwiki)))) {
            queryString.append("&").append("gsrinterwiki").append("=").append(String.valueOf(gsrinterwiki));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeSearch", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeSearch", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeTemplates(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gtlnamespace, String gtllimit, String gtlcontinue, String gtltemplates, String gtldir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=query&prop=templates";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gtlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gtlnamespace)))) {
            queryString.append("&").append("gtlnamespace").append("=").append(String.valueOf(gtlnamespace));
        }
        if ((gtllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gtllimit)))) {
            queryString.append("&").append("gtllimit").append("=").append(String.valueOf(gtllimit));
        }
        if ((gtlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gtlcontinue)))) {
            queryString.append("&").append("gtlcontinue").append("=").append(String.valueOf(gtlcontinue));
        }
        if ((gtltemplates!= null)&&(!StringUtils.isEmpty(String.valueOf(gtltemplates)))) {
            queryString.append("&").append("gtltemplates").append("=").append(String.valueOf(gtltemplates));
        }
        if ((gtldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gtldir)))) {
            queryString.append("&").append("gtldir").append("=").append(String.valueOf(gtldir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeTemplates", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeTemplates", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeTranscludedin(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gtiprop, String gtinamespace, String gtishow, String gtilimit, String gticontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=transcludedin";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gtiprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gtiprop)))) {
            queryString.append("&").append("gtiprop").append("=").append(String.valueOf(gtiprop));
        }
        if ((gtinamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gtinamespace)))) {
            queryString.append("&").append("gtinamespace").append("=").append(String.valueOf(gtinamespace));
        }
        if ((gtishow!= null)&&(!StringUtils.isEmpty(String.valueOf(gtishow)))) {
            queryString.append("&").append("gtishow").append("=").append(String.valueOf(gtishow));
        }
        if ((gtilimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gtilimit)))) {
            queryString.append("&").append("gtilimit").append("=").append(String.valueOf(gtilimit));
        }
        if ((gticontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gticontinue)))) {
            queryString.append("&").append("gticontinue").append("=").append(String.valueOf(gticontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeTranscludedin", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeTranscludedin", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeWatchList(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gwlallrev, String gwlstart, String gwlend, String gwlnamespace, String gwluser, String gwlexcludeuser, String gwldir, String gwllimit, String gwlprop, String gwlshow, String gwltype, String gwlowner, String gwltoken, String gwlcontinue, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=watchlist";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gwlallrev!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlallrev)))) {
            queryString.append("&").append("gwlallrev").append("=").append(String.valueOf(gwlallrev));
        }
        if ((gwlstart!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlstart)))) {
            queryString.append("&").append("gwlstart").append("=").append(String.valueOf(gwlstart));
        }
        if ((gwlend!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlend)))) {
            queryString.append("&").append("gwlend").append("=").append(String.valueOf(gwlend));
        }
        if ((gwlnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlnamespace)))) {
            queryString.append("&").append("gwlnamespace").append("=").append(String.valueOf(gwlnamespace));
        }
        if ((gwluser!= null)&&(!StringUtils.isEmpty(String.valueOf(gwluser)))) {
            queryString.append("&").append("gwluser").append("=").append(String.valueOf(gwluser));
        }
        if ((gwlexcludeuser!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlexcludeuser)))) {
            queryString.append("&").append("gwlexcludeuser").append("=").append(String.valueOf(gwlexcludeuser));
        }
        if ((gwldir!= null)&&(!StringUtils.isEmpty(String.valueOf(gwldir)))) {
            queryString.append("&").append("gwldir").append("=").append(String.valueOf(gwldir));
        }
        if ((gwllimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gwllimit)))) {
            queryString.append("&").append("gwllimit").append("=").append(String.valueOf(gwllimit));
        }
        if ((gwlprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlprop)))) {
            queryString.append("&").append("gwlprop").append("=").append(String.valueOf(gwlprop));
        }
        if ((gwlshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlshow)))) {
            queryString.append("&").append("gwlshow").append("=").append(String.valueOf(gwlshow));
        }
        if ((gwltype!= null)&&(!StringUtils.isEmpty(String.valueOf(gwltype)))) {
            queryString.append("&").append("gwltype").append("=").append(String.valueOf(gwltype));
        }
        if ((gwlowner!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlowner)))) {
            queryString.append("&").append("gwlowner").append("=").append(String.valueOf(gwlowner));
        }
        if ((gwltoken!= null)&&(!StringUtils.isEmpty(String.valueOf(gwltoken)))) {
            queryString.append("&").append("gwltoken").append("=").append(String.valueOf(gwltoken));
        }
        if ((gwlcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gwlcontinue)))) {
            queryString.append("&").append("gwlcontinue").append("=").append(String.valueOf(gwlcontinue));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeWatchList", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeWatchList", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String purgeWatchListRaw(String format, String forcelinkupdate, String forcerecursivelinkupdate, String continueStr, String titles, String pageids, String revids, String gwrcontinue, String gwrnamespace, String gwrlimit, String gwrprop, String gwrshow, String gwrowner, String gwrtoken, String gwrdir, String redirects, String converttitles, String maxlag, String smaxage, String maxage, String assertUser, String requestid, String servedby, String curtimestamp, String origin, String uselang, String centralauthtoken)
        throws IOException
    {
        HttpMethod method = null;
        method = new PostMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=purge&generator=watchlistraw";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((forcelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcelinkupdate)))) {
            queryString.append("&").append("forcelinkupdate").append("=").append(String.valueOf(forcelinkupdate));
        }
        if ((forcerecursivelinkupdate!= null)&&(!StringUtils.isEmpty(String.valueOf(forcerecursivelinkupdate)))) {
            queryString.append("&").append("forcerecursivelinkupdate").append("=").append(String.valueOf(forcerecursivelinkupdate));
        }
        if ((continueStr!= null)&&(!StringUtils.isEmpty(String.valueOf(continueStr)))) {
            queryString.append("&").append("continue").append("=").append(String.valueOf(continueStr));
        }
        if ((titles!= null)&&(!StringUtils.isEmpty(String.valueOf(titles)))) {
            queryString.append("&").append("titles").append("=").append(String.valueOf(titles));
        }
        if ((pageids!= null)&&(!StringUtils.isEmpty(String.valueOf(pageids)))) {
            queryString.append("&").append("pageids").append("=").append(String.valueOf(pageids));
        }
        if ((revids!= null)&&(!StringUtils.isEmpty(String.valueOf(revids)))) {
            queryString.append("&").append("revids").append("=").append(String.valueOf(revids));
        }
        if ((gwrcontinue!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrcontinue)))) {
            queryString.append("&").append("gwrcontinue").append("=").append(String.valueOf(gwrcontinue));
        }
        if ((gwrnamespace!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrnamespace)))) {
            queryString.append("&").append("gwrnamespace").append("=").append(String.valueOf(gwrnamespace));
        }
        if ((gwrlimit!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrlimit)))) {
            queryString.append("&").append("gwrlimit").append("=").append(String.valueOf(gwrlimit));
        }
        if ((gwrprop!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrprop)))) {
            queryString.append("&").append("gwrprop").append("=").append(String.valueOf(gwrprop));
        }
        if ((gwrshow!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrshow)))) {
            queryString.append("&").append("gwrshow").append("=").append(String.valueOf(gwrshow));
        }
        if ((gwrowner!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrowner)))) {
            queryString.append("&").append("gwrowner").append("=").append(String.valueOf(gwrowner));
        }
        if ((gwrtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrtoken)))) {
            queryString.append("&").append("gwrtoken").append("=").append(String.valueOf(gwrtoken));
        }
        if ((gwrdir!= null)&&(!StringUtils.isEmpty(String.valueOf(gwrdir)))) {
            queryString.append("&").append("gwrdir").append("=").append(String.valueOf(gwrdir));
        }
        if ((redirects!= null)&&(!StringUtils.isEmpty(String.valueOf(redirects)))) {
            queryString.append("&").append("redirects").append("=").append(String.valueOf(redirects));
        }
        if ((converttitles!= null)&&(!StringUtils.isEmpty(String.valueOf(converttitles)))) {
            queryString.append("&").append("converttitles").append("=").append(String.valueOf(converttitles));
        }
        if ((maxlag!= null)&&(!StringUtils.isEmpty(String.valueOf(maxlag)))) {
            queryString.append("&").append("maxlag").append("=").append(String.valueOf(maxlag));
        }
        if ((smaxage!= null)&&(!StringUtils.isEmpty(String.valueOf(smaxage)))) {
            queryString.append("&").append("smaxage").append("=").append(String.valueOf(smaxage));
        }
        if ((maxage!= null)&&(!StringUtils.isEmpty(String.valueOf(maxage)))) {
            queryString.append("&").append("maxage").append("=").append(String.valueOf(maxage));
        }
        if ((assertUser!= null)&&(!StringUtils.isEmpty(String.valueOf(assertUser)))) {
            queryString.append("&").append("assert").append("=").append(String.valueOf(assertUser));
        }
        if ((requestid!= null)&&(!StringUtils.isEmpty(String.valueOf(requestid)))) {
            queryString.append("&").append("requestid").append("=").append(String.valueOf(requestid));
        }
        if ((servedby!= null)&&(!StringUtils.isEmpty(String.valueOf(servedby)))) {
            queryString.append("&").append("servedby").append("=").append(String.valueOf(servedby));
        }
        if ((curtimestamp!= null)&&(!StringUtils.isEmpty(String.valueOf(curtimestamp)))) {
            queryString.append("&").append("curtimestamp").append("=").append(String.valueOf(curtimestamp));
        }
        if ((origin!= null)&&(!StringUtils.isEmpty(String.valueOf(origin)))) {
            queryString.append("&").append("origin").append("=").append(String.valueOf(origin));
        }
        if ((uselang!= null)&&(!StringUtils.isEmpty(String.valueOf(uselang)))) {
            queryString.append("&").append("uselang").append("=").append(String.valueOf(uselang));
        }
        if ((centralauthtoken!= null)&&(!StringUtils.isEmpty(String.valueOf(centralauthtoken)))) {
            queryString.append("&").append("centralauthtoken").append("=").append(String.valueOf(centralauthtoken));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
        ((PostMethod) method).addParameters(postParameters.toArray(new NameValuePair[] {}));
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("purgeWatchListRaw", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named purgeWatchListRaw", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    public String getParamInfo(String format, String modules, String helpformat)
        throws IOException
    {
        HttpMethod method = null;
        method = new GetMethod();
        String uri = "http://en.wikipedia.org/w/api.php?action=paraminfo";
        method.setURI(new URI(uri, false));
        StringBuilder queryString = new StringBuilder(((method.getQueryString()!= null)?method.getQueryString():""));
        if ((format!= null)&&(!StringUtils.isEmpty(String.valueOf(format)))) {
            queryString.append("&").append("format").append("=").append(String.valueOf(format));
        }
        if ((modules!= null)&&(!StringUtils.isEmpty(String.valueOf(modules)))) {
            queryString.append("&").append("modules").append("=").append(String.valueOf(modules));
        }
        if ((helpformat!= null)&&(!StringUtils.isEmpty(String.valueOf(helpformat)))) {
            queryString.append("&").append("helpformat").append("=").append(String.valueOf(helpformat));
        }
        if ((queryString.length()> 0)&&(queryString.charAt(0) == '&')) {
            queryString.deleteCharAt(0);
        }
        method.setQueryString(URIUtil.encodeQuery(queryString.toString()));
        setHttpBasicAuthHeader(method);
        httpClient.executeMethod(method);
        MuleMessage muleMessage = getMuleMessage(method, "UTF-8");
        String output = ((String) muleMessage.getPayload());
        if ((output!= null)&&(!String.class.isAssignableFrom(String.class))) {
            DataType payloadOutputDataType = null;
            try {
                Method reflectedMethod = WikiPediaConnector.class.getMethod("getParamInfo", String.class, String.class, String.class);
                payloadOutputDataType = DataTypeFactory.createFromReturnType(reflectedMethod);
                DataType payloadInputDataType = DataTypeFactory.create(String.class, ((String) muleMessage.getOutboundProperty("Content-Type")));
                Transformer transformer = getPayloadTransformer(payloadInputDataType, payloadOutputDataType);
                return ((String) transformer.transform(output));
            } catch (TransformerException te) {
                throw new RuntimeException(("Unable to transform output from String to "+ payloadOutputDataType.toString()), te);
            } catch (NoSuchMethodException nsme) {
                throw new RuntimeException("Unable to find method named getParamInfo", nsme);
            }
        } else {
            return ((String)((Object) output));
        }
    }

    private void setHttpBasicAuthHeader(HttpMethod method) {
        if (getConnectionStrategy() instanceof ConnectorConnectionStrategy) {
            ConnectorConnectionStrategy stg = ((ConnectorConnectionStrategy) getConnectionStrategy());
            String notEncodedHeader = stg.getUsername().concat(":").concat(stg.getPassword());
            String encodedHeader = "Basic ".concat(new String(Base64 .encodeBase64(notEncodedHeader.getBytes())));
            method.addRequestHeader("Authorization", encodedHeader);
        }
    }

}
